
SmartMeter-c21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f8c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000007c  20000000  00002f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000184  2000007c  00003008  0002007c  2**2
                  ALLOC
  3 .stack        00002000  20000200  0000318c  0002007c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
  6 .debug_info   00030594  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b47  00000000  00000000  00050691  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005f20  00000000  00000000  000551d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006c0  00000000  00000000  0005b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000007a8  00000000  00000000  0005b7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00009d43  00000000  00000000  0005bf60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000106d3  00000000  00000000  00065ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a382f  00000000  00000000  00076376  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001744  00000000  00000000  00119ba8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * \note This will not change setting in user's configuration structure.
 *
 * \param[in, out] module  Pointer to the software instance struct
 */
void rtc_calendar_swap_time_mode(struct rtc_module *const module)
{
       0:	00 22 00 20 a9 16 00 00 a5 16 00 00 a5 16 00 00     .". ............
	...
		/* Set pm flag. */
		time.pm = (uint8_t)(time.hour / 12);

		/* Set 12h clock hour value. */
		time.hour = time.hour % 12;
		if (time.hour == 0) {
      2c:	a5 16 00 00 00 00 00 00 00 00 00 00 a5 16 00 00     ................
			time.hour = 12;
		}

		/* Update alarms */
		for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
			rtc_calendar_get_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      3c:	a5 16 00 00 a5 16 00 00 a5 16 00 00 01 02 00 00     ................
			alarm.time.pm = (uint8_t)(alarm.time.hour / 12);
			alarm.time.hour = alarm.time.hour % 12;
      4c:	a5 16 00 00 a5 16 00 00 a9 02 00 00 a5 16 00 00     ................
			time.hour = 12;
      5c:	a5 16 00 00 85 03 00 00 11 09 00 00 21 09 00 00     ............!...
			if (alarm.time.hour == 0) {
				alarm.time.hour = 12;
			}
			module->clock_24h = false;
      6c:	31 09 00 00 41 09 00 00 51 09 00 00 61 09 00 00     1...A...Q...a...
		/* Change value in configuration structure. */
		module->clock_24h = true;
	}

	/* Disable RTC so new configuration can be set. */
	rtc_calendar_disable(module);
      7c:	a5 16 00 00 a5 16 00 00 55 03 00 00 65 03 00 00     ........U...e...

	/* Toggle mode. */
	rtc_module->MODE2.CTRLA.reg ^= RTC_MODE2_CTRLA_CLKREP;

	/* Enable RTC. */
	rtc_calendar_enable(module);
      8c:	75 03 00 00 a5 16 00 00 a5 16 00 00 a5 16 00 00     u...............
		if (time.pm == 1) {
      9c:	a5 16 00 00 a5 16 00 00 e1 01 00 00 f1 01 00 00     ................
			time.pm = 0;
      ac:	a5 16 00 00 a5 16 00 00 a5 16 00 00 a5 16 00 00     ................

000000bc <__do_global_dtors_aux>:
			if (alarm.time.pm == 1) {
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
			} else if (alarm.time.hour == 12) {
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
		module->clock_24h = true;
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
		} else if (time.hour == 12) {
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
			time.hour = 0;
      d6:	bd10      	pop	{r4, pc}
      d8:	2000007c 	.word	0x2000007c
      dc:	00000000 	.word	0x00000000
				alarm.time.hour = alarm.time.hour + 12;
      e0:	00002f8c 	.word	0x00002f8c

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
				alarm.time.pm = 0;
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
				module->clock_24h = true;
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
				rtc_calendar_set_alarm(module, &alarm, (enum rtc_calendar_alarm)i);
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
				alarm.time.hour = 0;
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000080 	.word	0x20000080
     110:	00002f8c 	.word	0x00002f8c
     114:	00002f8c 	.word	0x00002f8c
     118:	00000000 	.word	0x00000000

0000011c <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
     11c:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     11e:	0080      	lsls	r0, r0, #2
     120:	4b2e      	ldr	r3, [pc, #184]	; (1dc <_adc_interrupt_handler+0xc0>)
     122:	58c4      	ldr	r4, [r0, r3]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     124:	6823      	ldr	r3, [r4, #0]
     126:	799d      	ldrb	r5, [r3, #6]
     128:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
     12a:	07ea      	lsls	r2, r5, #31
     12c:	d52d      	bpl.n	18a <_adc_interrupt_handler+0x6e>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     12e:	7ee2      	ldrb	r2, [r4, #27]
     130:	07d2      	lsls	r2, r2, #31
     132:	d52a      	bpl.n	18a <_adc_interrupt_handler+0x6e>
     134:	7ea2      	ldrb	r2, [r4, #26]
     136:	07d2      	lsls	r2, r2, #31
     138:	d527      	bpl.n	18a <_adc_interrupt_handler+0x6e>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     13a:	2201      	movs	r2, #1
     13c:	719a      	strb	r2, [r3, #6]

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     13e:	6962      	ldr	r2, [r4, #20]
     140:	1c93      	adds	r3, r2, #2
     142:	6163      	str	r3, [r4, #20]
     144:	6823      	ldr	r3, [r4, #0]
     146:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     148:	b29b      	uxth	r3, r3
     14a:	8013      	strh	r3, [r2, #0]

			if (--module->remaining_conversions > 0) {
     14c:	8b23      	ldrh	r3, [r4, #24]
     14e:	3b01      	subs	r3, #1
     150:	b29b      	uxth	r3, r3
     152:	8323      	strh	r3, [r4, #24]
     154:	2b00      	cmp	r3, #0
     156:	d015      	beq.n	184 <_adc_interrupt_handler+0x68>
				if (module->software_trigger == true
     158:	7f63      	ldrb	r3, [r4, #29]
     15a:	2b00      	cmp	r3, #0
     15c:	d015      	beq.n	18a <_adc_interrupt_handler+0x6e>
					&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     15e:	6822      	ldr	r2, [r4, #0]
     160:	79d3      	ldrb	r3, [r2, #7]
     162:	b25b      	sxtb	r3, r3
     164:	2b00      	cmp	r3, #0
     166:	db10      	blt.n	18a <_adc_interrupt_handler+0x6e>
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->SYNCBUSY.reg) {
     168:	8c13      	ldrh	r3, [r2, #32]
     16a:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     16c:	2b00      	cmp	r3, #0
     16e:	d1fb      	bne.n	168 <_adc_interrupt_handler+0x4c>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     170:	7e13      	ldrb	r3, [r2, #24]
     172:	2102      	movs	r1, #2
     174:	430b      	orrs	r3, r1
     176:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     178:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
     17a:	8c13      	ldrh	r3, [r2, #32]
     17c:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     17e:	2b00      	cmp	r3, #0
     180:	d1fb      	bne.n	17a <_adc_interrupt_handler+0x5e>
     182:	e002      	b.n	18a <_adc_interrupt_handler+0x6e>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     184:	7f23      	ldrb	r3, [r4, #28]
     186:	2b05      	cmp	r3, #5
     188:	d016      	beq.n	1b8 <_adc_interrupt_handler+0x9c>
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     18a:	076b      	lsls	r3, r5, #29
     18c:	d508      	bpl.n	1a0 <_adc_interrupt_handler+0x84>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     18e:	2304      	movs	r3, #4
     190:	6822      	ldr	r2, [r4, #0]
     192:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     194:	7ee3      	ldrb	r3, [r4, #27]
     196:	079b      	lsls	r3, r3, #30
     198:	d502      	bpl.n	1a0 <_adc_interrupt_handler+0x84>
     19a:	7ea3      	ldrb	r3, [r4, #26]
     19c:	079b      	lsls	r3, r3, #30
     19e:	d414      	bmi.n	1ca <_adc_interrupt_handler+0xae>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     1a0:	07ab      	lsls	r3, r5, #30
     1a2:	d508      	bpl.n	1b6 <_adc_interrupt_handler+0x9a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     1a4:	2302      	movs	r3, #2
     1a6:	6822      	ldr	r2, [r4, #0]
     1a8:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     1aa:	7ee3      	ldrb	r3, [r4, #27]
     1ac:	075b      	lsls	r3, r3, #29
     1ae:	d502      	bpl.n	1b6 <_adc_interrupt_handler+0x9a>
     1b0:	7ea3      	ldrb	r3, [r4, #26]
     1b2:	075b      	lsls	r3, r3, #29
     1b4:	d40d      	bmi.n	1d2 <_adc_interrupt_handler+0xb6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
		}
	}
}
     1b6:	bd70      	pop	{r4, r5, r6, pc}
					module->job_status = STATUS_OK;
     1b8:	2300      	movs	r3, #0
     1ba:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     1bc:	3301      	adds	r3, #1
     1be:	6822      	ldr	r2, [r4, #0]
     1c0:	7113      	strb	r3, [r2, #4]
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     1c2:	0020      	movs	r0, r4
     1c4:	68a3      	ldr	r3, [r4, #8]
     1c6:	4798      	blx	r3
     1c8:	e7df      	b.n	18a <_adc_interrupt_handler+0x6e>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     1ca:	0020      	movs	r0, r4
     1cc:	68e3      	ldr	r3, [r4, #12]
     1ce:	4798      	blx	r3
     1d0:	e7e6      	b.n	1a0 <_adc_interrupt_handler+0x84>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     1d2:	6923      	ldr	r3, [r4, #16]
     1d4:	0020      	movs	r0, r4
     1d6:	4798      	blx	r3
}
     1d8:	e7ed      	b.n	1b6 <_adc_interrupt_handler+0x9a>
     1da:	46c0      	nop			; (mov r8, r8)
     1dc:	200001a8 	.word	0x200001a8

000001e0 <ADC0_Handler>:
		void ADC##n##_Handler(void) \
		{ \
			_adc_interrupt_handler(n); \
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
     1e0:	b510      	push	{r4, lr}
     1e2:	2000      	movs	r0, #0
     1e4:	4b01      	ldr	r3, [pc, #4]	; (1ec <ADC0_Handler+0xc>)
     1e6:	4798      	blx	r3
     1e8:	bd10      	pop	{r4, pc}
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	0000011d 	.word	0x0000011d

000001f0 <ADC1_Handler>:
     1f0:	b510      	push	{r4, lr}
     1f2:	2001      	movs	r0, #1
     1f4:	4b01      	ldr	r3, [pc, #4]	; (1fc <ADC1_Handler+0xc>)
     1f6:	4798      	blx	r3
     1f8:	bd10      	pop	{r4, pc}
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	0000011d 	.word	0x0000011d

00000200 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     202:	46de      	mov	lr, fp
     204:	4657      	mov	r7, sl
     206:	464e      	mov	r6, r9
     208:	4645      	mov	r5, r8
     20a:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     20c:	4b24      	ldr	r3, [pc, #144]	; (2a0 <RTC_Handler+0xa0>)
     20e:	681b      	ldr	r3, [r3, #0]
     210:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
     212:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
     214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
	callback_mask &= module->registered_callback;
     216:	4652      	mov	r2, sl
     218:	8e12      	ldrh	r2, [r2, #48]	; 0x30
     21a:	401a      	ands	r2, r3
     21c:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
     21e:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
     220:	8973      	ldrh	r3, [r6, #10]
     222:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
     224:	b21a      	sxth	r2, r3
     226:	2a00      	cmp	r2, #0
     228:	db08      	blt.n	23c <RTC_Handler+0x3c>
     22a:	27ff      	movs	r7, #255	; 0xff
     22c:	401f      	ands	r7, r3
	}else if (interrupt_status & RTC_MODE2_INTFLAG_PER(0xff)) {
     22e:	d02a      	beq.n	286 <RTC_Handler+0x86>
     230:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
     232:	2301      	movs	r3, #1
     234:	4699      	mov	r9, r3
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
     236:	33fe      	adds	r3, #254	; 0xfe
     238:	469b      	mov	fp, r3
     23a:	e014      	b.n	266 <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
     23c:	4643      	mov	r3, r8
     23e:	059b      	lsls	r3, r3, #22
     240:	d407      	bmi.n	252 <RTC_Handler+0x52>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
     242:	4b18      	ldr	r3, [pc, #96]	; (2a4 <RTC_Handler+0xa4>)
     244:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
     246:	bc3c      	pop	{r2, r3, r4, r5}
     248:	4690      	mov	r8, r2
     24a:	4699      	mov	r9, r3
     24c:	46a2      	mov	sl, r4
     24e:	46ab      	mov	fp, r5
     250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
     252:	4653      	mov	r3, sl
     254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     256:	4798      	blx	r3
     258:	e7f3      	b.n	242 <RTC_Handler+0x42>
			rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_PER(1<<i);
     25a:	465b      	mov	r3, fp
     25c:	401d      	ands	r5, r3
     25e:	81b5      	strh	r5, [r6, #12]
     260:	3401      	adds	r4, #1
		for (i = 0;i < RTC_PER_NUM;i++) {
     262:	2c08      	cmp	r4, #8
     264:	d0ef      	beq.n	246 <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE2_INTFLAG_PER(1 << i))
     266:	0023      	movs	r3, r4
     268:	464d      	mov	r5, r9
     26a:	40a5      	lsls	r5, r4
     26c:	422f      	tst	r7, r5
     26e:	d0f4      	beq.n	25a <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
     270:	4642      	mov	r2, r8
     272:	4122      	asrs	r2, r4
     274:	4649      	mov	r1, r9
     276:	4211      	tst	r1, r2
     278:	d0ef      	beq.n	25a <RTC_Handler+0x5a>
				module->callbacks[i]();
     27a:	3302      	adds	r3, #2
     27c:	009b      	lsls	r3, r3, #2
     27e:	4652      	mov	r2, sl
     280:	589b      	ldr	r3, [r3, r2]
     282:	4798      	blx	r3
     284:	e7e9      	b.n	25a <RTC_Handler+0x5a>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
     286:	05db      	lsls	r3, r3, #23
     288:	d5dd      	bpl.n	246 <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
     28a:	4643      	mov	r3, r8
     28c:	05db      	lsls	r3, r3, #23
     28e:	d403      	bmi.n	298 <RTC_Handler+0x98>
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
     290:	2380      	movs	r3, #128	; 0x80
     292:	005b      	lsls	r3, r3, #1
     294:	81b3      	strh	r3, [r6, #12]
}
     296:	e7d6      	b.n	246 <RTC_Handler+0x46>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
     298:	4653      	mov	r3, sl
     29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     29c:	4798      	blx	r3
     29e:	e7f7      	b.n	290 <RTC_Handler+0x90>
     2a0:	200001b0 	.word	0x200001b0
     2a4:	ffff8000 	.word	0xffff8000

000002a8 <TSENS_Handler>:

struct tsens_module *_tsens_instances;

/** Interrupt handler for the TSENS module. */
void TSENS_Handler(void)
{
     2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     2aa:	46c6      	mov	lr, r8
     2ac:	b500      	push	{lr}
	struct tsens_module *module = _tsens_instances;
     2ae:	4b14      	ldr	r3, [pc, #80]	; (300 <TSENS_Handler+0x58>)
     2b0:	681f      	ldr	r7, [r3, #0]
	Assert(module);

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = TSENS->INTFLAG.reg;
     2b2:	4b14      	ldr	r3, [pc, #80]	; (304 <TSENS_Handler+0x5c>)
     2b4:	799e      	ldrb	r6, [r3, #6]
     2b6:	b2f6      	uxtb	r6, r6

	/* store TSENS result in job buffer */
	uint32_t temp = TSENS->VALUE.reg;
     2b8:	68db      	ldr	r3, [r3, #12]
	if(temp & 0x00800000) {
     2ba:	021a      	lsls	r2, r3, #8
     2bc:	d502      	bpl.n	2c4 <TSENS_Handler+0x1c>
		temp |= ~TSENS_VALUE_MASK;
     2be:	22ff      	movs	r2, #255	; 0xff
     2c0:	0612      	lsls	r2, r2, #24
     2c2:	4313      	orrs	r3, r2
	}
#if (ERRATA_14476)
	*(module->value) = temp * (-1);
     2c4:	693a      	ldr	r2, [r7, #16]
     2c6:	425b      	negs	r3, r3
     2c8:	6013      	str	r3, [r2, #0]
     2ca:	2400      	movs	r4, #0
#endif

	for(uint8_t i = 0; i < TSENS_CALLBACK_NUM; i++)
	{
		if (flags & ((uint32_t)0x01 << i)) {
     2cc:	2501      	movs	r5, #1
			/* Clear the INTFLAG anyway */
			TSENS->INTFLAG.reg = (uint32_t)0x01 << i;
     2ce:	4b0d      	ldr	r3, [pc, #52]	; (304 <TSENS_Handler+0x5c>)
     2d0:	4698      	mov	r8, r3
     2d2:	e002      	b.n	2da <TSENS_Handler+0x32>
     2d4:	3401      	adds	r4, #1
	for(uint8_t i = 0; i < TSENS_CALLBACK_NUM; i++)
     2d6:	2c04      	cmp	r4, #4
     2d8:	d00f      	beq.n	2fa <TSENS_Handler+0x52>
     2da:	b2e0      	uxtb	r0, r4
		if (flags & ((uint32_t)0x01 << i)) {
     2dc:	0033      	movs	r3, r6
     2de:	40e3      	lsrs	r3, r4
     2e0:	421d      	tst	r5, r3
     2e2:	d0f7      	beq.n	2d4 <TSENS_Handler+0x2c>
			TSENS->INTFLAG.reg = (uint32_t)0x01 << i;
     2e4:	002b      	movs	r3, r5
     2e6:	40a3      	lsls	r3, r4
     2e8:	b2db      	uxtb	r3, r3
     2ea:	4642      	mov	r2, r8
     2ec:	7193      	strb	r3, [r2, #6]

			if(module->callback[i] != NULL) {
     2ee:	00a3      	lsls	r3, r4, #2
     2f0:	58fb      	ldr	r3, [r7, r3]
     2f2:	2b00      	cmp	r3, #0
     2f4:	d0ee      	beq.n	2d4 <TSENS_Handler+0x2c>
				module->callback[i]((enum tsens_callback)i);
     2f6:	4798      	blx	r3
     2f8:	e7ec      	b.n	2d4 <TSENS_Handler+0x2c>
			}
		}
	}
}
     2fa:	bc04      	pop	{r2}
     2fc:	4690      	mov	r8, r2
     2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     300:	200001b4 	.word	0x200001b4
     304:	40003000 	.word	0x40003000

00000308 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     308:	b5f0      	push	{r4, r5, r6, r7, lr}
     30a:	46c6      	mov	lr, r8
     30c:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     30e:	0080      	lsls	r0, r0, #2
     310:	4b0e      	ldr	r3, [pc, #56]	; (34c <_tcc_interrupt_handler+0x44>)
     312:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     314:	683b      	ldr	r3, [r7, #0]
     316:	6ade      	ldr	r6, [r3, #44]	; 0x2c
     318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
     31a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     31c:	4013      	ands	r3, r2
     31e:	401e      	ands	r6, r3
     320:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     322:	4b0b      	ldr	r3, [pc, #44]	; (350 <_tcc_interrupt_handler+0x48>)
     324:	4698      	mov	r8, r3
     326:	e002      	b.n	32e <_tcc_interrupt_handler+0x26>
     328:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     32a:	2c30      	cmp	r4, #48	; 0x30
     32c:	d00a      	beq.n	344 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     32e:	4643      	mov	r3, r8
     330:	58e5      	ldr	r5, [r4, r3]
     332:	4235      	tst	r5, r6
     334:	d0f8      	beq.n	328 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     336:	193b      	adds	r3, r7, r4
     338:	685b      	ldr	r3, [r3, #4]
     33a:	0038      	movs	r0, r7
     33c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     33e:	683b      	ldr	r3, [r7, #0]
     340:	62dd      	str	r5, [r3, #44]	; 0x2c
     342:	e7f1      	b.n	328 <_tcc_interrupt_handler+0x20>
		}
	}
}
     344:	bc04      	pop	{r2}
     346:	4690      	mov	r8, r2
     348:	bdf0      	pop	{r4, r5, r6, r7, pc}
     34a:	46c0      	nop			; (mov r8, r8)
     34c:	200001b8 	.word	0x200001b8
     350:	00002e3c 	.word	0x00002e3c

00000354 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     354:	b510      	push	{r4, lr}
     356:	2000      	movs	r0, #0
     358:	4b01      	ldr	r3, [pc, #4]	; (360 <TCC0_Handler+0xc>)
     35a:	4798      	blx	r3
     35c:	bd10      	pop	{r4, pc}
     35e:	46c0      	nop			; (mov r8, r8)
     360:	00000309 	.word	0x00000309

00000364 <TCC1_Handler>:
     364:	b510      	push	{r4, lr}
     366:	2001      	movs	r0, #1
     368:	4b01      	ldr	r3, [pc, #4]	; (370 <TCC1_Handler+0xc>)
     36a:	4798      	blx	r3
     36c:	bd10      	pop	{r4, pc}
     36e:	46c0      	nop			; (mov r8, r8)
     370:	00000309 	.word	0x00000309

00000374 <TCC2_Handler>:
     374:	b510      	push	{r4, lr}
     376:	2002      	movs	r0, #2
     378:	4b01      	ldr	r3, [pc, #4]	; (380 <TCC2_Handler+0xc>)
     37a:	4798      	blx	r3
     37c:	bd10      	pop	{r4, pc}
     37e:	46c0      	nop			; (mov r8, r8)
     380:	00000309 	.word	0x00000309

00000384 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     384:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     386:	4b0c      	ldr	r3, [pc, #48]	; (3b8 <EVSYS_Handler+0x34>)
     388:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     38a:	2184      	movs	r1, #132	; 0x84
     38c:	05c9      	lsls	r1, r1, #23
     38e:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     390:	6898      	ldr	r0, [r3, #8]
     392:	4302      	orrs	r2, r0
     394:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     396:	4b09      	ldr	r3, [pc, #36]	; (3bc <EVSYS_Handler+0x38>)
     398:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     39a:	2c00      	cmp	r4, #0
     39c:	d005      	beq.n	3aa <EVSYS_Handler+0x26>
		current_hook->hook_func(current_hook->resource);
     39e:	6820      	ldr	r0, [r4, #0]
     3a0:	6863      	ldr	r3, [r4, #4]
     3a2:	4798      	blx	r3
		current_hook = current_hook->next;
     3a4:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     3a6:	2c00      	cmp	r4, #0
     3a8:	d1f9      	bne.n	39e <EVSYS_Handler+0x1a>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     3aa:	4b03      	ldr	r3, [pc, #12]	; (3b8 <EVSYS_Handler+0x34>)
     3ac:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     3ae:	689a      	ldr	r2, [r3, #8]
     3b0:	438a      	bics	r2, r1
     3b2:	609a      	str	r2, [r3, #8]
}
     3b4:	bd10      	pop	{r4, pc}
     3b6:	46c0      	nop			; (mov r8, r8)
     3b8:	20000000 	.word	0x20000000
     3bc:	0fff0fff 	.word	0x0fff0fff

000003c0 <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			MCLK->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
     3c0:	4906      	ldr	r1, [pc, #24]	; (3dc <_system_events_init+0x1c>)
     3c2:	69cb      	ldr	r3, [r1, #28]
     3c4:	2201      	movs	r2, #1
     3c6:	4313      	orrs	r3, r2
     3c8:	61cb      	str	r3, [r1, #28]
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_EVSYS);
#endif

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRLA.reg = EVSYS_CTRLA_SWRST;
     3ca:	2384      	movs	r3, #132	; 0x84
     3cc:	05db      	lsls	r3, r3, #23
     3ce:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRLA.reg & EVSYS_CTRLA_SWRST) {
     3d0:	0019      	movs	r1, r3
     3d2:	780b      	ldrb	r3, [r1, #0]
     3d4:	4213      	tst	r3, r2
     3d6:	d1fc      	bne.n	3d2 <_system_events_init+0x12>
	}
}
     3d8:	4770      	bx	lr
     3da:	46c0      	nop			; (mov r8, r8)
     3dc:	40000800 	.word	0x40000800

000003e0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     3e0:	4b0c      	ldr	r3, [pc, #48]	; (414 <cpu_irq_enter_critical+0x34>)
     3e2:	681b      	ldr	r3, [r3, #0]
     3e4:	2b00      	cmp	r3, #0
     3e6:	d106      	bne.n	3f6 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     3e8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     3ec:	2b00      	cmp	r3, #0
     3ee:	d007      	beq.n	400 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     3f0:	2200      	movs	r2, #0
     3f2:	4b09      	ldr	r3, [pc, #36]	; (418 <cpu_irq_enter_critical+0x38>)
     3f4:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     3f6:	4a07      	ldr	r2, [pc, #28]	; (414 <cpu_irq_enter_critical+0x34>)
     3f8:	6813      	ldr	r3, [r2, #0]
     3fa:	3301      	adds	r3, #1
     3fc:	6013      	str	r3, [r2, #0]
}
     3fe:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     400:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     402:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     406:	2200      	movs	r2, #0
     408:	4b04      	ldr	r3, [pc, #16]	; (41c <cpu_irq_enter_critical+0x3c>)
     40a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     40c:	3201      	adds	r2, #1
     40e:	4b02      	ldr	r3, [pc, #8]	; (418 <cpu_irq_enter_critical+0x38>)
     410:	701a      	strb	r2, [r3, #0]
     412:	e7f0      	b.n	3f6 <cpu_irq_enter_critical+0x16>
     414:	20000098 	.word	0x20000098
     418:	2000009c 	.word	0x2000009c
     41c:	20000014 	.word	0x20000014

00000420 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     420:	4b08      	ldr	r3, [pc, #32]	; (444 <cpu_irq_leave_critical+0x24>)
     422:	681a      	ldr	r2, [r3, #0]
     424:	3a01      	subs	r2, #1
     426:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     428:	681b      	ldr	r3, [r3, #0]
     42a:	2b00      	cmp	r3, #0
     42c:	d109      	bne.n	442 <cpu_irq_leave_critical+0x22>
     42e:	4b06      	ldr	r3, [pc, #24]	; (448 <cpu_irq_leave_critical+0x28>)
     430:	781b      	ldrb	r3, [r3, #0]
     432:	2b00      	cmp	r3, #0
     434:	d005      	beq.n	442 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     436:	2201      	movs	r2, #1
     438:	4b04      	ldr	r3, [pc, #16]	; (44c <cpu_irq_leave_critical+0x2c>)
     43a:	701a      	strb	r2, [r3, #0]
     43c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     440:	b662      	cpsie	i
	}
}
     442:	4770      	bx	lr
     444:	20000098 	.word	0x20000098
     448:	2000009c 	.word	0x2000009c
     44c:	20000014 	.word	0x20000014

00000450 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     450:	b5f0      	push	{r4, r5, r6, r7, lr}
     452:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     454:	ac01      	add	r4, sp, #4
     456:	2501      	movs	r5, #1
     458:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     45a:	2700      	movs	r7, #0
     45c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     45e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     460:	0021      	movs	r1, r4
     462:	200f      	movs	r0, #15
     464:	4e06      	ldr	r6, [pc, #24]	; (480 <system_board_init+0x30>)
     466:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     468:	2280      	movs	r2, #128	; 0x80
     46a:	0212      	lsls	r2, r2, #8
     46c:	2382      	movs	r3, #130	; 0x82
     46e:	05db      	lsls	r3, r3, #23
     470:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     472:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     474:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     476:	0021      	movs	r1, r4
     478:	201c      	movs	r0, #28
     47a:	47b0      	blx	r6
}
     47c:	b003      	add	sp, #12
     47e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     480:	00000485 	.word	0x00000485

00000484 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     484:	b500      	push	{lr}
     486:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     488:	ab01      	add	r3, sp, #4
     48a:	2280      	movs	r2, #128	; 0x80
     48c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     48e:	780a      	ldrb	r2, [r1, #0]
     490:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     492:	784a      	ldrb	r2, [r1, #1]
     494:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     496:	788a      	ldrb	r2, [r1, #2]
     498:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     49a:	0019      	movs	r1, r3
     49c:	4b01      	ldr	r3, [pc, #4]	; (4a4 <port_pin_set_config+0x20>)
     49e:	4798      	blx	r3
}
     4a0:	b003      	add	sp, #12
     4a2:	bd00      	pop	{pc}
     4a4:	00001649 	.word	0x00001649

000004a8 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     4a8:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     4aa:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4ac:	2340      	movs	r3, #64	; 0x40
     4ae:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     4b0:	4281      	cmp	r1, r0
     4b2:	d202      	bcs.n	4ba <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     4b4:	0018      	movs	r0, r3
     4b6:	bd10      	pop	{r4, pc}
		baud_calculated++;
     4b8:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     4ba:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     4bc:	1c63      	adds	r3, r4, #1
     4be:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     4c0:	4288      	cmp	r0, r1
     4c2:	d9f9      	bls.n	4b8 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4c4:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     4c6:	2cff      	cmp	r4, #255	; 0xff
     4c8:	d8f4      	bhi.n	4b4 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     4ca:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     4cc:	2300      	movs	r3, #0
     4ce:	e7f1      	b.n	4b4 <_sercom_get_sync_baud_val+0xc>

000004d0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4d2:	46de      	mov	lr, fp
     4d4:	4657      	mov	r7, sl
     4d6:	464e      	mov	r6, r9
     4d8:	4645      	mov	r5, r8
     4da:	b5e0      	push	{r5, r6, r7, lr}
     4dc:	b089      	sub	sp, #36	; 0x24
     4de:	000c      	movs	r4, r1
     4e0:	9205      	str	r2, [sp, #20]
     4e2:	aa12      	add	r2, sp, #72	; 0x48
     4e4:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     4e6:	0005      	movs	r5, r0
     4e8:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4ea:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     4ec:	42a5      	cmp	r5, r4
     4ee:	d907      	bls.n	500 <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     4f0:	0010      	movs	r0, r2
     4f2:	b009      	add	sp, #36	; 0x24
     4f4:	bc3c      	pop	{r2, r3, r4, r5}
     4f6:	4690      	mov	r8, r2
     4f8:	4699      	mov	r9, r3
     4fa:	46a2      	mov	sl, r4
     4fc:	46ab      	mov	fp, r5
     4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     500:	2b00      	cmp	r3, #0
     502:	d155      	bne.n	5b0 <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     504:	0002      	movs	r2, r0
     506:	0008      	movs	r0, r1
     508:	2100      	movs	r1, #0
     50a:	4d63      	ldr	r5, [pc, #396]	; (698 <_sercom_get_async_baud_val+0x1c8>)
     50c:	47a8      	blx	r5
     50e:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     510:	0026      	movs	r6, r4
     512:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
     514:	2300      	movs	r3, #0
     516:	2400      	movs	r4, #0
     518:	9300      	str	r3, [sp, #0]
     51a:	9401      	str	r4, [sp, #4]
     51c:	2200      	movs	r2, #0
     51e:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     520:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     522:	2120      	movs	r1, #32
     524:	468c      	mov	ip, r1
     526:	391f      	subs	r1, #31
     528:	9602      	str	r6, [sp, #8]
     52a:	9703      	str	r7, [sp, #12]
     52c:	e014      	b.n	558 <_sercom_get_async_baud_val+0x88>
     52e:	4664      	mov	r4, ip
     530:	1a24      	subs	r4, r4, r0
     532:	000d      	movs	r5, r1
     534:	40e5      	lsrs	r5, r4
     536:	46a8      	mov	r8, r5
     538:	e015      	b.n	566 <_sercom_get_async_baud_val+0x96>
			r = r - d;
     53a:	9c02      	ldr	r4, [sp, #8]
     53c:	9d03      	ldr	r5, [sp, #12]
     53e:	1b12      	subs	r2, r2, r4
     540:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     542:	464d      	mov	r5, r9
     544:	9e00      	ldr	r6, [sp, #0]
     546:	9f01      	ldr	r7, [sp, #4]
     548:	4335      	orrs	r5, r6
     54a:	003c      	movs	r4, r7
     54c:	4646      	mov	r6, r8
     54e:	4334      	orrs	r4, r6
     550:	9500      	str	r5, [sp, #0]
     552:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
     554:	3801      	subs	r0, #1
     556:	d31d      	bcc.n	594 <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
     558:	2420      	movs	r4, #32
     55a:	4264      	negs	r4, r4
     55c:	1904      	adds	r4, r0, r4
     55e:	d4e6      	bmi.n	52e <_sercom_get_async_baud_val+0x5e>
     560:	000d      	movs	r5, r1
     562:	40a5      	lsls	r5, r4
     564:	46a8      	mov	r8, r5
     566:	000c      	movs	r4, r1
     568:	4084      	lsls	r4, r0
     56a:	46a1      	mov	r9, r4
		r = r << 1;
     56c:	1892      	adds	r2, r2, r2
     56e:	415b      	adcs	r3, r3
     570:	0014      	movs	r4, r2
     572:	001d      	movs	r5, r3
		if (n & bit_shift) {
     574:	4646      	mov	r6, r8
     576:	465f      	mov	r7, fp
     578:	423e      	tst	r6, r7
     57a:	d003      	beq.n	584 <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
     57c:	000e      	movs	r6, r1
     57e:	4326      	orrs	r6, r4
     580:	0032      	movs	r2, r6
     582:	002b      	movs	r3, r5
		if (r >= d) {
     584:	9c02      	ldr	r4, [sp, #8]
     586:	9d03      	ldr	r5, [sp, #12]
     588:	429d      	cmp	r5, r3
     58a:	d8e3      	bhi.n	554 <_sercom_get_async_baud_val+0x84>
     58c:	d1d5      	bne.n	53a <_sercom_get_async_baud_val+0x6a>
     58e:	4294      	cmp	r4, r2
     590:	d8e0      	bhi.n	554 <_sercom_get_async_baud_val+0x84>
     592:	e7d2      	b.n	53a <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
     594:	2200      	movs	r2, #0
     596:	2301      	movs	r3, #1
     598:	9800      	ldr	r0, [sp, #0]
     59a:	9901      	ldr	r1, [sp, #4]
     59c:	1a12      	subs	r2, r2, r0
     59e:	418b      	sbcs	r3, r1
     5a0:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
     5a2:	0c13      	lsrs	r3, r2, #16
     5a4:	040a      	lsls	r2, r1, #16
     5a6:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     5a8:	9b05      	ldr	r3, [sp, #20]
     5aa:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     5ac:	2200      	movs	r2, #0
     5ae:	e79f      	b.n	4f0 <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
     5b0:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     5b2:	2b01      	cmp	r3, #1
     5b4:	d1f8      	bne.n	5a8 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     5b6:	0f63      	lsrs	r3, r4, #29
     5b8:	9304      	str	r3, [sp, #16]
     5ba:	00e3      	lsls	r3, r4, #3
     5bc:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     5be:	000a      	movs	r2, r1
     5c0:	2300      	movs	r3, #0
     5c2:	2100      	movs	r1, #0
     5c4:	4c34      	ldr	r4, [pc, #208]	; (698 <_sercom_get_async_baud_val+0x1c8>)
     5c6:	47a0      	blx	r4
     5c8:	0004      	movs	r4, r0
     5ca:	000d      	movs	r5, r1
     5cc:	2300      	movs	r3, #0
     5ce:	469c      	mov	ip, r3
     5d0:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
     5d2:	3320      	adds	r3, #32
     5d4:	469b      	mov	fp, r3
     5d6:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
     5d8:	4663      	mov	r3, ip
     5da:	9307      	str	r3, [sp, #28]
     5dc:	e048      	b.n	670 <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
     5de:	4659      	mov	r1, fp
     5e0:	1bc9      	subs	r1, r1, r7
     5e2:	0030      	movs	r0, r6
     5e4:	40c8      	lsrs	r0, r1
     5e6:	4682      	mov	sl, r0
     5e8:	e010      	b.n	60c <_sercom_get_async_baud_val+0x13c>
			r = r - d;
     5ea:	9800      	ldr	r0, [sp, #0]
     5ec:	9901      	ldr	r1, [sp, #4]
     5ee:	1a12      	subs	r2, r2, r0
     5f0:	418b      	sbcs	r3, r1
			q |= bit_shift;
     5f2:	9902      	ldr	r1, [sp, #8]
     5f4:	4648      	mov	r0, r9
     5f6:	4301      	orrs	r1, r0
     5f8:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
     5fa:	3f01      	subs	r7, #1
     5fc:	d325      	bcc.n	64a <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
     5fe:	2120      	movs	r1, #32
     600:	4249      	negs	r1, r1
     602:	1879      	adds	r1, r7, r1
     604:	d4eb      	bmi.n	5de <_sercom_get_async_baud_val+0x10e>
     606:	0030      	movs	r0, r6
     608:	4088      	lsls	r0, r1
     60a:	4682      	mov	sl, r0
     60c:	0031      	movs	r1, r6
     60e:	40b9      	lsls	r1, r7
     610:	4689      	mov	r9, r1
		r = r << 1;
     612:	1892      	adds	r2, r2, r2
     614:	415b      	adcs	r3, r3
     616:	0010      	movs	r0, r2
     618:	0019      	movs	r1, r3
		if (n & bit_shift) {
     61a:	4644      	mov	r4, r8
     61c:	464d      	mov	r5, r9
     61e:	402c      	ands	r4, r5
     620:	46a4      	mov	ip, r4
     622:	4654      	mov	r4, sl
     624:	9d04      	ldr	r5, [sp, #16]
     626:	402c      	ands	r4, r5
     628:	46a2      	mov	sl, r4
     62a:	4664      	mov	r4, ip
     62c:	4655      	mov	r5, sl
     62e:	432c      	orrs	r4, r5
     630:	d003      	beq.n	63a <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
     632:	0034      	movs	r4, r6
     634:	4304      	orrs	r4, r0
     636:	0022      	movs	r2, r4
     638:	000b      	movs	r3, r1
		if (r >= d) {
     63a:	9800      	ldr	r0, [sp, #0]
     63c:	9901      	ldr	r1, [sp, #4]
     63e:	4299      	cmp	r1, r3
     640:	d8db      	bhi.n	5fa <_sercom_get_async_baud_val+0x12a>
     642:	d1d2      	bne.n	5ea <_sercom_get_async_baud_val+0x11a>
     644:	4290      	cmp	r0, r2
     646:	d8d8      	bhi.n	5fa <_sercom_get_async_baud_val+0x12a>
     648:	e7cf      	b.n	5ea <_sercom_get_async_baud_val+0x11a>
     64a:	9c00      	ldr	r4, [sp, #0]
     64c:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
     64e:	9902      	ldr	r1, [sp, #8]
     650:	9a07      	ldr	r2, [sp, #28]
     652:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     654:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     656:	4911      	ldr	r1, [pc, #68]	; (69c <_sercom_get_async_baud_val+0x1cc>)
     658:	428b      	cmp	r3, r1
     65a:	d914      	bls.n	686 <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     65c:	9b06      	ldr	r3, [sp, #24]
     65e:	3301      	adds	r3, #1
     660:	b2db      	uxtb	r3, r3
     662:	0019      	movs	r1, r3
     664:	9306      	str	r3, [sp, #24]
     666:	0013      	movs	r3, r2
     668:	3301      	adds	r3, #1
     66a:	9307      	str	r3, [sp, #28]
     66c:	2908      	cmp	r1, #8
     66e:	d008      	beq.n	682 <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
     670:	2300      	movs	r3, #0
     672:	9302      	str	r3, [sp, #8]
     674:	2200      	movs	r2, #0
     676:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     678:	213f      	movs	r1, #63	; 0x3f
     67a:	9400      	str	r4, [sp, #0]
     67c:	9501      	str	r5, [sp, #4]
     67e:	000f      	movs	r7, r1
     680:	e7bd      	b.n	5fe <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     682:	2240      	movs	r2, #64	; 0x40
     684:	e734      	b.n	4f0 <_sercom_get_async_baud_val+0x20>
     686:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
     688:	9906      	ldr	r1, [sp, #24]
     68a:	2908      	cmp	r1, #8
     68c:	d100      	bne.n	690 <_sercom_get_async_baud_val+0x1c0>
     68e:	e72f      	b.n	4f0 <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
     690:	034a      	lsls	r2, r1, #13
     692:	431a      	orrs	r2, r3
     694:	e788      	b.n	5a8 <_sercom_get_async_baud_val+0xd8>
     696:	46c0      	nop			; (mov r8, r8)
     698:	00001ce5 	.word	0x00001ce5
     69c:	00001fff 	.word	0x00001fff

000006a0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     6a0:	b510      	push	{r4, lr}
     6a2:	b082      	sub	sp, #8
     6a4:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     6a6:	4b0e      	ldr	r3, [pc, #56]	; (6e0 <sercom_set_gclk_generator+0x40>)
     6a8:	781b      	ldrb	r3, [r3, #0]
     6aa:	2b00      	cmp	r3, #0
     6ac:	d007      	beq.n	6be <sercom_set_gclk_generator+0x1e>
     6ae:	2900      	cmp	r1, #0
     6b0:	d105      	bne.n	6be <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     6b2:	4b0b      	ldr	r3, [pc, #44]	; (6e0 <sercom_set_gclk_generator+0x40>)
     6b4:	785b      	ldrb	r3, [r3, #1]
     6b6:	4283      	cmp	r3, r0
     6b8:	d010      	beq.n	6dc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     6ba:	201d      	movs	r0, #29
     6bc:	e00c      	b.n	6d8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     6be:	a901      	add	r1, sp, #4
     6c0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     6c2:	2012      	movs	r0, #18
     6c4:	4b07      	ldr	r3, [pc, #28]	; (6e4 <sercom_set_gclk_generator+0x44>)
     6c6:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     6c8:	2012      	movs	r0, #18
     6ca:	4b07      	ldr	r3, [pc, #28]	; (6e8 <sercom_set_gclk_generator+0x48>)
     6cc:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     6ce:	4b04      	ldr	r3, [pc, #16]	; (6e0 <sercom_set_gclk_generator+0x40>)
     6d0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     6d2:	2201      	movs	r2, #1
     6d4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     6d6:	2000      	movs	r0, #0
}
     6d8:	b002      	add	sp, #8
     6da:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     6dc:	2000      	movs	r0, #0
     6de:	e7fb      	b.n	6d8 <sercom_set_gclk_generator+0x38>
     6e0:	200000a0 	.word	0x200000a0
     6e4:	0000154d 	.word	0x0000154d
     6e8:	000014dd 	.word	0x000014dd

000006ec <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     6ec:	4b40      	ldr	r3, [pc, #256]	; (7f0 <_sercom_get_default_pad+0x104>)
     6ee:	4298      	cmp	r0, r3
     6f0:	d031      	beq.n	756 <_sercom_get_default_pad+0x6a>
     6f2:	d90a      	bls.n	70a <_sercom_get_default_pad+0x1e>
     6f4:	4b3f      	ldr	r3, [pc, #252]	; (7f4 <_sercom_get_default_pad+0x108>)
     6f6:	4298      	cmp	r0, r3
     6f8:	d04d      	beq.n	796 <_sercom_get_default_pad+0xaa>
     6fa:	4b3f      	ldr	r3, [pc, #252]	; (7f8 <_sercom_get_default_pad+0x10c>)
     6fc:	4298      	cmp	r0, r3
     6fe:	d05a      	beq.n	7b6 <_sercom_get_default_pad+0xca>
     700:	4b3e      	ldr	r3, [pc, #248]	; (7fc <_sercom_get_default_pad+0x110>)
     702:	4298      	cmp	r0, r3
     704:	d037      	beq.n	776 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     706:	2000      	movs	r0, #0
}
     708:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     70a:	4b3d      	ldr	r3, [pc, #244]	; (800 <_sercom_get_default_pad+0x114>)
     70c:	4298      	cmp	r0, r3
     70e:	d00c      	beq.n	72a <_sercom_get_default_pad+0x3e>
     710:	4b3c      	ldr	r3, [pc, #240]	; (804 <_sercom_get_default_pad+0x118>)
     712:	4298      	cmp	r0, r3
     714:	d1f7      	bne.n	706 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     716:	2901      	cmp	r1, #1
     718:	d017      	beq.n	74a <_sercom_get_default_pad+0x5e>
     71a:	2900      	cmp	r1, #0
     71c:	d05d      	beq.n	7da <_sercom_get_default_pad+0xee>
     71e:	2902      	cmp	r1, #2
     720:	d015      	beq.n	74e <_sercom_get_default_pad+0x62>
     722:	2903      	cmp	r1, #3
     724:	d015      	beq.n	752 <_sercom_get_default_pad+0x66>
	return 0;
     726:	2000      	movs	r0, #0
     728:	e7ee      	b.n	708 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     72a:	2901      	cmp	r1, #1
     72c:	d007      	beq.n	73e <_sercom_get_default_pad+0x52>
     72e:	2900      	cmp	r1, #0
     730:	d051      	beq.n	7d6 <_sercom_get_default_pad+0xea>
     732:	2902      	cmp	r1, #2
     734:	d005      	beq.n	742 <_sercom_get_default_pad+0x56>
     736:	2903      	cmp	r1, #3
     738:	d005      	beq.n	746 <_sercom_get_default_pad+0x5a>
	return 0;
     73a:	2000      	movs	r0, #0
     73c:	e7e4      	b.n	708 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     73e:	4832      	ldr	r0, [pc, #200]	; (808 <_sercom_get_default_pad+0x11c>)
     740:	e7e2      	b.n	708 <_sercom_get_default_pad+0x1c>
     742:	4832      	ldr	r0, [pc, #200]	; (80c <_sercom_get_default_pad+0x120>)
     744:	e7e0      	b.n	708 <_sercom_get_default_pad+0x1c>
     746:	4832      	ldr	r0, [pc, #200]	; (810 <_sercom_get_default_pad+0x124>)
     748:	e7de      	b.n	708 <_sercom_get_default_pad+0x1c>
     74a:	4832      	ldr	r0, [pc, #200]	; (814 <_sercom_get_default_pad+0x128>)
     74c:	e7dc      	b.n	708 <_sercom_get_default_pad+0x1c>
     74e:	4832      	ldr	r0, [pc, #200]	; (818 <_sercom_get_default_pad+0x12c>)
     750:	e7da      	b.n	708 <_sercom_get_default_pad+0x1c>
     752:	4832      	ldr	r0, [pc, #200]	; (81c <_sercom_get_default_pad+0x130>)
     754:	e7d8      	b.n	708 <_sercom_get_default_pad+0x1c>
     756:	2901      	cmp	r1, #1
     758:	d007      	beq.n	76a <_sercom_get_default_pad+0x7e>
     75a:	2900      	cmp	r1, #0
     75c:	d03f      	beq.n	7de <_sercom_get_default_pad+0xf2>
     75e:	2902      	cmp	r1, #2
     760:	d005      	beq.n	76e <_sercom_get_default_pad+0x82>
     762:	2903      	cmp	r1, #3
     764:	d005      	beq.n	772 <_sercom_get_default_pad+0x86>
	return 0;
     766:	2000      	movs	r0, #0
     768:	e7ce      	b.n	708 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     76a:	482d      	ldr	r0, [pc, #180]	; (820 <_sercom_get_default_pad+0x134>)
     76c:	e7cc      	b.n	708 <_sercom_get_default_pad+0x1c>
     76e:	482d      	ldr	r0, [pc, #180]	; (824 <_sercom_get_default_pad+0x138>)
     770:	e7ca      	b.n	708 <_sercom_get_default_pad+0x1c>
     772:	482d      	ldr	r0, [pc, #180]	; (828 <_sercom_get_default_pad+0x13c>)
     774:	e7c8      	b.n	708 <_sercom_get_default_pad+0x1c>
     776:	2901      	cmp	r1, #1
     778:	d007      	beq.n	78a <_sercom_get_default_pad+0x9e>
     77a:	2900      	cmp	r1, #0
     77c:	d031      	beq.n	7e2 <_sercom_get_default_pad+0xf6>
     77e:	2902      	cmp	r1, #2
     780:	d005      	beq.n	78e <_sercom_get_default_pad+0xa2>
     782:	2903      	cmp	r1, #3
     784:	d005      	beq.n	792 <_sercom_get_default_pad+0xa6>
	return 0;
     786:	2000      	movs	r0, #0
     788:	e7be      	b.n	708 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     78a:	4828      	ldr	r0, [pc, #160]	; (82c <_sercom_get_default_pad+0x140>)
     78c:	e7bc      	b.n	708 <_sercom_get_default_pad+0x1c>
     78e:	4828      	ldr	r0, [pc, #160]	; (830 <_sercom_get_default_pad+0x144>)
     790:	e7ba      	b.n	708 <_sercom_get_default_pad+0x1c>
     792:	4828      	ldr	r0, [pc, #160]	; (834 <_sercom_get_default_pad+0x148>)
     794:	e7b8      	b.n	708 <_sercom_get_default_pad+0x1c>
     796:	2901      	cmp	r1, #1
     798:	d007      	beq.n	7aa <_sercom_get_default_pad+0xbe>
     79a:	2900      	cmp	r1, #0
     79c:	d023      	beq.n	7e6 <_sercom_get_default_pad+0xfa>
     79e:	2902      	cmp	r1, #2
     7a0:	d005      	beq.n	7ae <_sercom_get_default_pad+0xc2>
     7a2:	2903      	cmp	r1, #3
     7a4:	d005      	beq.n	7b2 <_sercom_get_default_pad+0xc6>
	return 0;
     7a6:	2000      	movs	r0, #0
     7a8:	e7ae      	b.n	708 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7aa:	4823      	ldr	r0, [pc, #140]	; (838 <_sercom_get_default_pad+0x14c>)
     7ac:	e7ac      	b.n	708 <_sercom_get_default_pad+0x1c>
     7ae:	4823      	ldr	r0, [pc, #140]	; (83c <_sercom_get_default_pad+0x150>)
     7b0:	e7aa      	b.n	708 <_sercom_get_default_pad+0x1c>
     7b2:	4823      	ldr	r0, [pc, #140]	; (840 <_sercom_get_default_pad+0x154>)
     7b4:	e7a8      	b.n	708 <_sercom_get_default_pad+0x1c>
     7b6:	2901      	cmp	r1, #1
     7b8:	d007      	beq.n	7ca <_sercom_get_default_pad+0xde>
     7ba:	2900      	cmp	r1, #0
     7bc:	d015      	beq.n	7ea <_sercom_get_default_pad+0xfe>
     7be:	2902      	cmp	r1, #2
     7c0:	d005      	beq.n	7ce <_sercom_get_default_pad+0xe2>
     7c2:	2903      	cmp	r1, #3
     7c4:	d005      	beq.n	7d2 <_sercom_get_default_pad+0xe6>
	return 0;
     7c6:	2000      	movs	r0, #0
     7c8:	e79e      	b.n	708 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7ca:	481e      	ldr	r0, [pc, #120]	; (844 <_sercom_get_default_pad+0x158>)
     7cc:	e79c      	b.n	708 <_sercom_get_default_pad+0x1c>
     7ce:	481e      	ldr	r0, [pc, #120]	; (848 <_sercom_get_default_pad+0x15c>)
     7d0:	e79a      	b.n	708 <_sercom_get_default_pad+0x1c>
     7d2:	481e      	ldr	r0, [pc, #120]	; (84c <_sercom_get_default_pad+0x160>)
     7d4:	e798      	b.n	708 <_sercom_get_default_pad+0x1c>
     7d6:	481e      	ldr	r0, [pc, #120]	; (850 <_sercom_get_default_pad+0x164>)
     7d8:	e796      	b.n	708 <_sercom_get_default_pad+0x1c>
     7da:	481e      	ldr	r0, [pc, #120]	; (854 <_sercom_get_default_pad+0x168>)
     7dc:	e794      	b.n	708 <_sercom_get_default_pad+0x1c>
     7de:	481e      	ldr	r0, [pc, #120]	; (858 <_sercom_get_default_pad+0x16c>)
     7e0:	e792      	b.n	708 <_sercom_get_default_pad+0x1c>
     7e2:	481e      	ldr	r0, [pc, #120]	; (85c <_sercom_get_default_pad+0x170>)
     7e4:	e790      	b.n	708 <_sercom_get_default_pad+0x1c>
     7e6:	481e      	ldr	r0, [pc, #120]	; (860 <_sercom_get_default_pad+0x174>)
     7e8:	e78e      	b.n	708 <_sercom_get_default_pad+0x1c>
     7ea:	481e      	ldr	r0, [pc, #120]	; (864 <_sercom_get_default_pad+0x178>)
     7ec:	e78c      	b.n	708 <_sercom_get_default_pad+0x1c>
     7ee:	46c0      	nop			; (mov r8, r8)
     7f0:	42000c00 	.word	0x42000c00
     7f4:	42001400 	.word	0x42001400
     7f8:	42001800 	.word	0x42001800
     7fc:	42001000 	.word	0x42001000
     800:	42000400 	.word	0x42000400
     804:	42000800 	.word	0x42000800
     808:	00050003 	.word	0x00050003
     80c:	00060003 	.word	0x00060003
     810:	00070003 	.word	0x00070003
     814:	00110002 	.word	0x00110002
     818:	00120002 	.word	0x00120002
     81c:	00130002 	.word	0x00130002
     820:	000d0002 	.word	0x000d0002
     824:	000e0002 	.word	0x000e0002
     828:	000f0002 	.word	0x000f0002
     82c:	00170002 	.word	0x00170002
     830:	00180002 	.word	0x00180002
     834:	00190002 	.word	0x00190002
     838:	00290003 	.word	0x00290003
     83c:	002a0003 	.word	0x002a0003
     840:	002b0003 	.word	0x002b0003
     844:	00230003 	.word	0x00230003
     848:	00200003 	.word	0x00200003
     84c:	00210003 	.word	0x00210003
     850:	00040003 	.word	0x00040003
     854:	00100002 	.word	0x00100002
     858:	000c0002 	.word	0x000c0002
     85c:	00160002 	.word	0x00160002
     860:	00280003 	.word	0x00280003
     864:	00220003 	.word	0x00220003

00000868 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     868:	b530      	push	{r4, r5, lr}
     86a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     86c:	4b0b      	ldr	r3, [pc, #44]	; (89c <_sercom_get_sercom_inst_index+0x34>)
     86e:	466a      	mov	r2, sp
     870:	cb32      	ldmia	r3!, {r1, r4, r5}
     872:	c232      	stmia	r2!, {r1, r4, r5}
     874:	cb32      	ldmia	r3!, {r1, r4, r5}
     876:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     878:	9b00      	ldr	r3, [sp, #0]
     87a:	4283      	cmp	r3, r0
     87c:	d00b      	beq.n	896 <_sercom_get_sercom_inst_index+0x2e>
     87e:	2301      	movs	r3, #1
     880:	009a      	lsls	r2, r3, #2
     882:	4669      	mov	r1, sp
     884:	5852      	ldr	r2, [r2, r1]
     886:	4282      	cmp	r2, r0
     888:	d006      	beq.n	898 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     88a:	3301      	adds	r3, #1
     88c:	2b06      	cmp	r3, #6
     88e:	d1f7      	bne.n	880 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     890:	2000      	movs	r0, #0
}
     892:	b007      	add	sp, #28
     894:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     896:	2300      	movs	r3, #0
			return i;
     898:	b2d8      	uxtb	r0, r3
     89a:	e7fa      	b.n	892 <_sercom_get_sercom_inst_index+0x2a>
     89c:	00002e6c 	.word	0x00002e6c

000008a0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     8a0:	4770      	bx	lr
	...

000008a4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     8a6:	4b0a      	ldr	r3, [pc, #40]	; (8d0 <_sercom_set_handler+0x2c>)
     8a8:	781b      	ldrb	r3, [r3, #0]
     8aa:	2b00      	cmp	r3, #0
     8ac:	d10c      	bne.n	8c8 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     8ae:	4f09      	ldr	r7, [pc, #36]	; (8d4 <_sercom_set_handler+0x30>)
     8b0:	4e09      	ldr	r6, [pc, #36]	; (8d8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     8b2:	4d0a      	ldr	r5, [pc, #40]	; (8dc <_sercom_set_handler+0x38>)
     8b4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     8b6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     8b8:	195a      	adds	r2, r3, r5
     8ba:	6014      	str	r4, [r2, #0]
     8bc:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     8be:	2b18      	cmp	r3, #24
     8c0:	d1f9      	bne.n	8b6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     8c2:	2201      	movs	r2, #1
     8c4:	4b02      	ldr	r3, [pc, #8]	; (8d0 <_sercom_set_handler+0x2c>)
     8c6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     8c8:	0080      	lsls	r0, r0, #2
     8ca:	4b02      	ldr	r3, [pc, #8]	; (8d4 <_sercom_set_handler+0x30>)
     8cc:	50c1      	str	r1, [r0, r3]
}
     8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8d0:	200000a2 	.word	0x200000a2
     8d4:	200000a4 	.word	0x200000a4
     8d8:	000008a1 	.word	0x000008a1
     8dc:	200001c4 	.word	0x200001c4

000008e0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     8e0:	b500      	push	{lr}
     8e2:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     8e4:	2309      	movs	r3, #9
     8e6:	466a      	mov	r2, sp
     8e8:	7013      	strb	r3, [r2, #0]
     8ea:	3301      	adds	r3, #1
     8ec:	7053      	strb	r3, [r2, #1]
     8ee:	3301      	adds	r3, #1
     8f0:	7093      	strb	r3, [r2, #2]
     8f2:	3301      	adds	r3, #1
     8f4:	70d3      	strb	r3, [r2, #3]
     8f6:	3301      	adds	r3, #1
     8f8:	7113      	strb	r3, [r2, #4]
     8fa:	3301      	adds	r3, #1
     8fc:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     8fe:	4b03      	ldr	r3, [pc, #12]	; (90c <_sercom_get_interrupt_vector+0x2c>)
     900:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     902:	466b      	mov	r3, sp
     904:	5618      	ldrsb	r0, [r3, r0]
}
     906:	b003      	add	sp, #12
     908:	bd00      	pop	{pc}
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	00000869 	.word	0x00000869

00000910 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     910:	b510      	push	{r4, lr}
     912:	4b02      	ldr	r3, [pc, #8]	; (91c <SERCOM0_Handler+0xc>)
     914:	681b      	ldr	r3, [r3, #0]
     916:	2000      	movs	r0, #0
     918:	4798      	blx	r3
     91a:	bd10      	pop	{r4, pc}
     91c:	200000a4 	.word	0x200000a4

00000920 <SERCOM1_Handler>:
     920:	b510      	push	{r4, lr}
     922:	4b02      	ldr	r3, [pc, #8]	; (92c <SERCOM1_Handler+0xc>)
     924:	685b      	ldr	r3, [r3, #4]
     926:	2001      	movs	r0, #1
     928:	4798      	blx	r3
     92a:	bd10      	pop	{r4, pc}
     92c:	200000a4 	.word	0x200000a4

00000930 <SERCOM2_Handler>:
     930:	b510      	push	{r4, lr}
     932:	4b02      	ldr	r3, [pc, #8]	; (93c <SERCOM2_Handler+0xc>)
     934:	689b      	ldr	r3, [r3, #8]
     936:	2002      	movs	r0, #2
     938:	4798      	blx	r3
     93a:	bd10      	pop	{r4, pc}
     93c:	200000a4 	.word	0x200000a4

00000940 <SERCOM3_Handler>:
     940:	b510      	push	{r4, lr}
     942:	4b02      	ldr	r3, [pc, #8]	; (94c <SERCOM3_Handler+0xc>)
     944:	68db      	ldr	r3, [r3, #12]
     946:	2003      	movs	r0, #3
     948:	4798      	blx	r3
     94a:	bd10      	pop	{r4, pc}
     94c:	200000a4 	.word	0x200000a4

00000950 <SERCOM4_Handler>:
     950:	b510      	push	{r4, lr}
     952:	4b02      	ldr	r3, [pc, #8]	; (95c <SERCOM4_Handler+0xc>)
     954:	691b      	ldr	r3, [r3, #16]
     956:	2004      	movs	r0, #4
     958:	4798      	blx	r3
     95a:	bd10      	pop	{r4, pc}
     95c:	200000a4 	.word	0x200000a4

00000960 <SERCOM5_Handler>:
     960:	b510      	push	{r4, lr}
     962:	4b02      	ldr	r3, [pc, #8]	; (96c <SERCOM5_Handler+0xc>)
     964:	695b      	ldr	r3, [r3, #20]
     966:	2005      	movs	r0, #5
     968:	4798      	blx	r3
     96a:	bd10      	pop	{r4, pc}
     96c:	200000a4 	.word	0x200000a4

00000970 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     970:	b5f0      	push	{r4, r5, r6, r7, lr}
     972:	46de      	mov	lr, fp
     974:	4657      	mov	r7, sl
     976:	464e      	mov	r6, r9
     978:	4645      	mov	r5, r8
     97a:	b5e0      	push	{r5, r6, r7, lr}
     97c:	b091      	sub	sp, #68	; 0x44
     97e:	0005      	movs	r5, r0
     980:	000c      	movs	r4, r1
     982:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     984:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     986:	0008      	movs	r0, r1
     988:	4bd4      	ldr	r3, [pc, #848]	; (cdc <usart_init+0x36c>)
     98a:	4798      	blx	r3
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#elif (SAMC21)
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	
	if (sercom_index == 5){
     98c:	2805      	cmp	r0, #5
     98e:	d00d      	beq.n	9ac <usart_init+0x3c>
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
     990:	0007      	movs	r7, r0
     992:	3713      	adds	r7, #19
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     994:	6822      	ldr	r2, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     996:	2305      	movs	r3, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     998:	07d2      	lsls	r2, r2, #31
     99a:	d509      	bpl.n	9b0 <usart_init+0x40>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     99c:	0018      	movs	r0, r3
     99e:	b011      	add	sp, #68	; 0x44
     9a0:	bc3c      	pop	{r2, r3, r4, r5}
     9a2:	4690      	mov	r8, r2
     9a4:	4699      	mov	r9, r3
     9a6:	46a2      	mov	sl, r4
     9a8:	46ab      	mov	fp, r5
     9aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index	= SERCOM5_GCLK_ID_CORE;
     9ac:	2719      	movs	r7, #25
     9ae:	e7f1      	b.n	994 <usart_init+0x24>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     9b0:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     9b2:	3317      	adds	r3, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     9b4:	0792      	lsls	r2, r2, #30
     9b6:	d4f1      	bmi.n	99c <usart_init+0x2c>
     9b8:	4ac9      	ldr	r2, [pc, #804]	; (ce0 <usart_init+0x370>)
     9ba:	69d1      	ldr	r1, [r2, #28]
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
     9bc:	3001      	adds	r0, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     9be:	3b1b      	subs	r3, #27
     9c0:	4083      	lsls	r3, r0
     9c2:	430b      	orrs	r3, r1
     9c4:	61d3      	str	r3, [r2, #28]
	gclk_chan_conf.source_generator = config->generator_source;
     9c6:	a90f      	add	r1, sp, #60	; 0x3c
     9c8:	2335      	movs	r3, #53	; 0x35
     9ca:	4698      	mov	r8, r3
     9cc:	5cf3      	ldrb	r3, [r6, r3]
     9ce:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     9d0:	b2ff      	uxtb	r7, r7
     9d2:	0038      	movs	r0, r7
     9d4:	4bc3      	ldr	r3, [pc, #780]	; (ce4 <usart_init+0x374>)
     9d6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     9d8:	0038      	movs	r0, r7
     9da:	4bc3      	ldr	r3, [pc, #780]	; (ce8 <usart_init+0x378>)
     9dc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     9de:	4643      	mov	r3, r8
     9e0:	5cf0      	ldrb	r0, [r6, r3]
     9e2:	2100      	movs	r1, #0
     9e4:	4bc1      	ldr	r3, [pc, #772]	; (cec <usart_init+0x37c>)
     9e6:	4798      	blx	r3
	module->character_size = config->character_size;
     9e8:	7af3      	ldrb	r3, [r6, #11]
     9ea:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     9ec:	232c      	movs	r3, #44	; 0x2c
     9ee:	5cf3      	ldrb	r3, [r6, r3]
     9f0:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     9f2:	232d      	movs	r3, #45	; 0x2d
     9f4:	5cf3      	ldrb	r3, [r6, r3]
     9f6:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     9f8:	7ef3      	ldrb	r3, [r6, #27]
     9fa:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     9fc:	2324      	movs	r3, #36	; 0x24
     9fe:	5cf3      	ldrb	r3, [r6, r3]
     a00:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     a02:	682b      	ldr	r3, [r5, #0]
     a04:	9302      	str	r3, [sp, #8]
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     a06:	0018      	movs	r0, r3
     a08:	4bb4      	ldr	r3, [pc, #720]	; (cdc <usart_init+0x36c>)
     a0a:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     a0c:	3013      	adds	r0, #19
	uint16_t baud  = 0;
     a0e:	2200      	movs	r2, #0
     a10:	230e      	movs	r3, #14
     a12:	a906      	add	r1, sp, #24
     a14:	468c      	mov	ip, r1
     a16:	4463      	add	r3, ip
     a18:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     a1a:	8a33      	ldrh	r3, [r6, #16]
     a1c:	4698      	mov	r8, r3
     a1e:	2380      	movs	r3, #128	; 0x80
     a20:	01db      	lsls	r3, r3, #7
     a22:	4598      	cmp	r8, r3
     a24:	d100      	bne.n	a28 <usart_init+0xb8>
     a26:	e0c3      	b.n	bb0 <usart_init+0x240>
     a28:	d90e      	bls.n	a48 <usart_init+0xd8>
     a2a:	23c0      	movs	r3, #192	; 0xc0
     a2c:	01db      	lsls	r3, r3, #7
     a2e:	4598      	cmp	r8, r3
     a30:	d100      	bne.n	a34 <usart_init+0xc4>
     a32:	e0b8      	b.n	ba6 <usart_init+0x236>
     a34:	2380      	movs	r3, #128	; 0x80
     a36:	021b      	lsls	r3, r3, #8
     a38:	4598      	cmp	r8, r3
     a3a:	d000      	beq.n	a3e <usart_init+0xce>
     a3c:	e148      	b.n	cd0 <usart_init+0x360>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     a3e:	2303      	movs	r3, #3
     a40:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     a42:	2300      	movs	r3, #0
     a44:	9307      	str	r3, [sp, #28]
     a46:	e008      	b.n	a5a <usart_init+0xea>
	switch (config->sample_rate) {
     a48:	2380      	movs	r3, #128	; 0x80
     a4a:	019b      	lsls	r3, r3, #6
     a4c:	4598      	cmp	r8, r3
     a4e:	d000      	beq.n	a52 <usart_init+0xe2>
     a50:	e13e      	b.n	cd0 <usart_init+0x360>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     a52:	2310      	movs	r3, #16
     a54:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     a56:	3b0f      	subs	r3, #15
     a58:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     a5a:	6833      	ldr	r3, [r6, #0]
     a5c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     a5e:	68f3      	ldr	r3, [r6, #12]
     a60:	469b      	mov	fp, r3
		config->sample_adjustment |
     a62:	6973      	ldr	r3, [r6, #20]
     a64:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     a66:	7e33      	ldrb	r3, [r6, #24]
     a68:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     a6a:	232e      	movs	r3, #46	; 0x2e
     a6c:	5cf3      	ldrb	r3, [r6, r3]
     a6e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     a70:	6873      	ldr	r3, [r6, #4]
     a72:	4699      	mov	r9, r3
	switch (transfer_mode)
     a74:	2b00      	cmp	r3, #0
     a76:	d100      	bne.n	a7a <usart_init+0x10a>
     a78:	e0c7      	b.n	c0a <usart_init+0x29a>
     a7a:	2380      	movs	r3, #128	; 0x80
     a7c:	055b      	lsls	r3, r3, #21
     a7e:	4599      	cmp	r9, r3
     a80:	d100      	bne.n	a84 <usart_init+0x114>
     a82:	e0aa      	b.n	bda <usart_init+0x26a>
	if(config->encoding_format_enable) {
     a84:	7e73      	ldrb	r3, [r6, #25]
     a86:	2b00      	cmp	r3, #0
     a88:	d002      	beq.n	a90 <usart_init+0x120>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     a8a:	7eb3      	ldrb	r3, [r6, #26]
     a8c:	9a02      	ldr	r2, [sp, #8]
     a8e:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     a90:	682a      	ldr	r2, [r5, #0]
     a92:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     a94:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     a96:	2b00      	cmp	r3, #0
     a98:	d1fc      	bne.n	a94 <usart_init+0x124>
     a9a:	9702      	str	r7, [sp, #8]
	usart_hw->BAUD.reg = baud;
     a9c:	330e      	adds	r3, #14
     a9e:	a906      	add	r1, sp, #24
     aa0:	468c      	mov	ip, r1
     aa2:	4463      	add	r3, ip
     aa4:	881b      	ldrh	r3, [r3, #0]
     aa6:	81bb      	strh	r3, [r7, #12]
	ctrla |= transfer_mode;
     aa8:	9a05      	ldr	r2, [sp, #20]
     aaa:	465b      	mov	r3, fp
     aac:	431a      	orrs	r2, r3
     aae:	9b03      	ldr	r3, [sp, #12]
     ab0:	431a      	orrs	r2, r3
     ab2:	464b      	mov	r3, r9
     ab4:	431a      	orrs	r2, r3
     ab6:	4643      	mov	r3, r8
     ab8:	431a      	orrs	r2, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     aba:	9b04      	ldr	r3, [sp, #16]
     abc:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     abe:	431a      	orrs	r2, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ac0:	4653      	mov	r3, sl
     ac2:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     ac4:	431a      	orrs	r2, r3
	if (config->use_external_clock == false) {
     ac6:	232f      	movs	r3, #47	; 0x2f
     ac8:	5cf3      	ldrb	r3, [r6, r3]
     aca:	2b00      	cmp	r3, #0
     acc:	d101      	bne.n	ad2 <usart_init+0x162>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     ace:	3304      	adds	r3, #4
     ad0:	431a      	orrs	r2, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     ad2:	7e73      	ldrb	r3, [r6, #25]
     ad4:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     ad6:	2124      	movs	r1, #36	; 0x24
     ad8:	5c71      	ldrb	r1, [r6, r1]
     ada:	0249      	lsls	r1, r1, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     adc:	430b      	orrs	r3, r1
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     ade:	2126      	movs	r1, #38	; 0x26
     ae0:	5c71      	ldrb	r1, [r6, r1]
     ae2:	0209      	lsls	r1, r1, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     ae4:	430b      	orrs	r3, r1
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     ae6:	212c      	movs	r1, #44	; 0x2c
     ae8:	5c71      	ldrb	r1, [r6, r1]
     aea:	0449      	lsls	r1, r1, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     aec:	430b      	orrs	r3, r1
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     aee:	212d      	movs	r1, #45	; 0x2d
     af0:	5c71      	ldrb	r1, [r6, r1]
     af2:	0409      	lsls	r1, r1, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     af4:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
     af6:	7af1      	ldrb	r1, [r6, #11]
     af8:	4319      	orrs	r1, r3
     afa:	468c      	mov	ip, r1
	if (config->parity != USART_PARITY_NONE) {
     afc:	8933      	ldrh	r3, [r6, #8]
     afe:	2bff      	cmp	r3, #255	; 0xff
     b00:	d100      	bne.n	b04 <usart_init+0x194>
     b02:	e0a8      	b.n	c56 <usart_init+0x2e6>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     b04:	2180      	movs	r1, #128	; 0x80
     b06:	0449      	lsls	r1, r1, #17
     b08:	430a      	orrs	r2, r1
		ctrlb |= config->parity;
     b0a:	4661      	mov	r1, ip
     b0c:	4319      	orrs	r1, r3
     b0e:	468c      	mov	ip, r1
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     b10:	9f02      	ldr	r7, [sp, #8]
     b12:	68bb      	ldr	r3, [r7, #8]
						| config->lin_break_length;
     b14:	8c31      	ldrh	r1, [r6, #32]
     b16:	8c70      	ldrh	r0, [r6, #34]	; 0x22
     b18:	4301      	orrs	r1, r0
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     b1a:	2007      	movs	r0, #7
     b1c:	4018      	ands	r0, r3
						| config->lin_break_length;
     b1e:	4301      	orrs	r1, r0
	usart_hw->CTRLC.reg = ((usart_hw->CTRLC.reg) & SERCOM_USART_CTRLC_GTIME_Msk)
     b20:	60b9      	str	r1, [r7, #8]
	if (config->lin_node != LIN_INVALID_MODE) {
     b22:	69f3      	ldr	r3, [r6, #28]
     b24:	2b00      	cmp	r3, #0
     b26:	d002      	beq.n	b2e <usart_init+0x1be>
		ctrla &= ~(SERCOM_USART_CTRLA_FORM(0xf));
     b28:	4971      	ldr	r1, [pc, #452]	; (cf0 <usart_init+0x380>)
     b2a:	400a      	ands	r2, r1
		ctrla |= config->lin_node;
     b2c:	431a      	orrs	r2, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     b2e:	2334      	movs	r3, #52	; 0x34
     b30:	5cf3      	ldrb	r3, [r6, r3]
     b32:	2b00      	cmp	r3, #0
     b34:	d103      	bne.n	b3e <usart_init+0x1ce>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     b36:	4b6f      	ldr	r3, [pc, #444]	; (cf4 <usart_init+0x384>)
     b38:	789b      	ldrb	r3, [r3, #2]
     b3a:	079b      	lsls	r3, r3, #30
     b3c:	d501      	bpl.n	b42 <usart_init+0x1d2>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     b3e:	2380      	movs	r3, #128	; 0x80
     b40:	431a      	orrs	r2, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     b42:	6829      	ldr	r1, [r5, #0]
     b44:	9f02      	ldr	r7, [sp, #8]
	return (usart_hw->SYNCBUSY.reg);
     b46:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
     b48:	2b00      	cmp	r3, #0
     b4a:	d1fc      	bne.n	b46 <usart_init+0x1d6>
	usart_hw->CTRLB.reg = ctrlb;
     b4c:	4663      	mov	r3, ip
     b4e:	607b      	str	r3, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     b50:	6829      	ldr	r1, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     b52:	69cb      	ldr	r3, [r1, #28]
	while (usart_is_syncing(module)) {
     b54:	2b00      	cmp	r3, #0
     b56:	d1fc      	bne.n	b52 <usart_init+0x1e2>
	usart_hw->CTRLA.reg = ctrla;
     b58:	603a      	str	r2, [r7, #0]
	if ((usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_FORM_Msk) != \
     b5a:	683b      	ldr	r3, [r7, #0]
     b5c:	22f0      	movs	r2, #240	; 0xf0
     b5e:	0512      	lsls	r2, r2, #20
     b60:	4013      	ands	r3, r2
     b62:	22e0      	movs	r2, #224	; 0xe0
     b64:	04d2      	lsls	r2, r2, #19
     b66:	4293      	cmp	r3, r2
     b68:	d00a      	beq.n	b80 <usart_init+0x210>
		usart_hw->CTRLC.reg &= ~(SERCOM_USART_CTRLC_GTIME(0x7));
     b6a:	68bb      	ldr	r3, [r7, #8]
     b6c:	2207      	movs	r2, #7
     b6e:	4393      	bics	r3, r2
     b70:	60bb      	str	r3, [r7, #8]
		usart_hw->CTRLC.reg |= SERCOM_USART_CTRLC_GTIME(config->rs485_guard_time);
     b72:	68ba      	ldr	r2, [r7, #8]
     b74:	2325      	movs	r3, #37	; 0x25
     b76:	5cf1      	ldrb	r1, [r6, r3]
     b78:	3b1e      	subs	r3, #30
     b7a:	400b      	ands	r3, r1
     b7c:	4313      	orrs	r3, r2
     b7e:	60bb      	str	r3, [r7, #8]
     b80:	ab0e      	add	r3, sp, #56	; 0x38
     b82:	2280      	movs	r2, #128	; 0x80
     b84:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     b86:	2200      	movs	r2, #0
     b88:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     b8a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     b8c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     b8e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     b90:	930a      	str	r3, [sp, #40]	; 0x28
     b92:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     b94:	930b      	str	r3, [sp, #44]	; 0x2c
     b96:	6c33      	ldr	r3, [r6, #64]	; 0x40
     b98:	930c      	str	r3, [sp, #48]	; 0x30
     b9a:	6c73      	ldr	r3, [r6, #68]	; 0x44
     b9c:	9302      	str	r3, [sp, #8]
     b9e:	930d      	str	r3, [sp, #52]	; 0x34
     ba0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     ba2:	ae0a      	add	r6, sp, #40	; 0x28
     ba4:	e066      	b.n	c74 <usart_init+0x304>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     ba6:	2308      	movs	r3, #8
     ba8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     baa:	3b07      	subs	r3, #7
     bac:	9307      	str	r3, [sp, #28]
     bae:	e754      	b.n	a5a <usart_init+0xea>
	ctrla = (uint32_t)config->data_order |
     bb0:	6833      	ldr	r3, [r6, #0]
     bb2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     bb4:	68f3      	ldr	r3, [r6, #12]
     bb6:	469b      	mov	fp, r3
		config->sample_adjustment |
     bb8:	6973      	ldr	r3, [r6, #20]
     bba:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     bbc:	7e33      	ldrb	r3, [r6, #24]
     bbe:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     bc0:	232e      	movs	r3, #46	; 0x2e
     bc2:	5cf3      	ldrb	r3, [r6, r3]
     bc4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     bc6:	6873      	ldr	r3, [r6, #4]
     bc8:	4699      	mov	r9, r3
	switch (transfer_mode)
     bca:	2b00      	cmp	r3, #0
     bcc:	d019      	beq.n	c02 <usart_init+0x292>
     bce:	2380      	movs	r3, #128	; 0x80
     bd0:	055b      	lsls	r3, r3, #21
     bd2:	4599      	cmp	r9, r3
     bd4:	d001      	beq.n	bda <usart_init+0x26a>
	enum status_code status_code = STATUS_OK;
     bd6:	2300      	movs	r3, #0
     bd8:	e027      	b.n	c2a <usart_init+0x2ba>
			if (!config->use_external_clock) {
     bda:	232f      	movs	r3, #47	; 0x2f
     bdc:	5cf3      	ldrb	r3, [r6, r3]
     bde:	2b00      	cmp	r3, #0
     be0:	d000      	beq.n	be4 <usart_init+0x274>
     be2:	e74f      	b.n	a84 <usart_init+0x114>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     be4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     be6:	001f      	movs	r7, r3
     be8:	b2c0      	uxtb	r0, r0
     bea:	4b43      	ldr	r3, [pc, #268]	; (cf8 <usart_init+0x388>)
     bec:	4798      	blx	r3
     bee:	0001      	movs	r1, r0
     bf0:	220e      	movs	r2, #14
     bf2:	ab06      	add	r3, sp, #24
     bf4:	469c      	mov	ip, r3
     bf6:	4462      	add	r2, ip
     bf8:	0038      	movs	r0, r7
     bfa:	4b40      	ldr	r3, [pc, #256]	; (cfc <usart_init+0x38c>)
     bfc:	4798      	blx	r3
     bfe:	0003      	movs	r3, r0
     c00:	e013      	b.n	c2a <usart_init+0x2ba>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     c02:	2308      	movs	r3, #8
     c04:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     c06:	2300      	movs	r3, #0
     c08:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     c0a:	232f      	movs	r3, #47	; 0x2f
     c0c:	5cf3      	ldrb	r3, [r6, r3]
     c0e:	2b00      	cmp	r3, #0
     c10:	d00f      	beq.n	c32 <usart_init+0x2c2>
				status_code =
     c12:	9b06      	ldr	r3, [sp, #24]
     c14:	9300      	str	r3, [sp, #0]
     c16:	9b07      	ldr	r3, [sp, #28]
     c18:	220e      	movs	r2, #14
     c1a:	a906      	add	r1, sp, #24
     c1c:	468c      	mov	ip, r1
     c1e:	4462      	add	r2, ip
     c20:	6b31      	ldr	r1, [r6, #48]	; 0x30
     c22:	6ab0      	ldr	r0, [r6, #40]	; 0x28
     c24:	4f36      	ldr	r7, [pc, #216]	; (d00 <usart_init+0x390>)
     c26:	47b8      	blx	r7
     c28:	0003      	movs	r3, r0
	if (status_code != STATUS_OK) {
     c2a:	2b00      	cmp	r3, #0
     c2c:	d000      	beq.n	c30 <usart_init+0x2c0>
     c2e:	e6b5      	b.n	99c <usart_init+0x2c>
     c30:	e728      	b.n	a84 <usart_init+0x114>
						_sercom_get_async_baud_val(config->baudrate,
     c32:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     c34:	001f      	movs	r7, r3
     c36:	b2c0      	uxtb	r0, r0
     c38:	4b2f      	ldr	r3, [pc, #188]	; (cf8 <usart_init+0x388>)
     c3a:	4798      	blx	r3
     c3c:	0001      	movs	r1, r0
				status_code =
     c3e:	9b06      	ldr	r3, [sp, #24]
     c40:	9300      	str	r3, [sp, #0]
     c42:	9b07      	ldr	r3, [sp, #28]
     c44:	220e      	movs	r2, #14
     c46:	a806      	add	r0, sp, #24
     c48:	4684      	mov	ip, r0
     c4a:	4462      	add	r2, ip
     c4c:	0038      	movs	r0, r7
     c4e:	4f2c      	ldr	r7, [pc, #176]	; (d00 <usart_init+0x390>)
     c50:	47b8      	blx	r7
     c52:	0003      	movs	r3, r0
     c54:	e7e9      	b.n	c2a <usart_init+0x2ba>
		if(config->lin_slave_enable) {
     c56:	7ef3      	ldrb	r3, [r6, #27]
     c58:	2b00      	cmp	r3, #0
     c5a:	d100      	bne.n	c5e <usart_init+0x2ee>
     c5c:	e758      	b.n	b10 <usart_init+0x1a0>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     c5e:	2380      	movs	r3, #128	; 0x80
     c60:	04db      	lsls	r3, r3, #19
     c62:	431a      	orrs	r2, r3
     c64:	e754      	b.n	b10 <usart_init+0x1a0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     c66:	0020      	movs	r0, r4
     c68:	4b26      	ldr	r3, [pc, #152]	; (d04 <usart_init+0x394>)
     c6a:	4798      	blx	r3
     c6c:	e007      	b.n	c7e <usart_init+0x30e>
     c6e:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     c70:	2f04      	cmp	r7, #4
     c72:	d00d      	beq.n	c90 <usart_init+0x320>
     c74:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     c76:	00bb      	lsls	r3, r7, #2
     c78:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     c7a:	2800      	cmp	r0, #0
     c7c:	d0f3      	beq.n	c66 <usart_init+0x2f6>
		if (current_pinmux != PINMUX_UNUSED) {
     c7e:	1c43      	adds	r3, r0, #1
     c80:	d0f5      	beq.n	c6e <usart_init+0x2fe>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     c82:	a90e      	add	r1, sp, #56	; 0x38
     c84:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     c86:	0c00      	lsrs	r0, r0, #16
     c88:	b2c0      	uxtb	r0, r0
     c8a:	4b1f      	ldr	r3, [pc, #124]	; (d08 <usart_init+0x398>)
     c8c:	4798      	blx	r3
     c8e:	e7ee      	b.n	c6e <usart_init+0x2fe>
		module->callback[i]            = NULL;
     c90:	2300      	movs	r3, #0
     c92:	60eb      	str	r3, [r5, #12]
     c94:	612b      	str	r3, [r5, #16]
     c96:	616b      	str	r3, [r5, #20]
     c98:	61ab      	str	r3, [r5, #24]
     c9a:	61eb      	str	r3, [r5, #28]
     c9c:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     c9e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     ca0:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     ca2:	2200      	movs	r2, #0
     ca4:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     ca6:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     ca8:	3330      	adds	r3, #48	; 0x30
     caa:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     cac:	3301      	adds	r3, #1
     cae:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     cb0:	3301      	adds	r3, #1
     cb2:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     cb4:	3301      	adds	r3, #1
     cb6:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     cb8:	6828      	ldr	r0, [r5, #0]
     cba:	4b08      	ldr	r3, [pc, #32]	; (cdc <usart_init+0x36c>)
     cbc:	4798      	blx	r3
     cbe:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     cc0:	4912      	ldr	r1, [pc, #72]	; (d0c <usart_init+0x39c>)
     cc2:	4b13      	ldr	r3, [pc, #76]	; (d10 <usart_init+0x3a0>)
     cc4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     cc6:	00a4      	lsls	r4, r4, #2
     cc8:	4b12      	ldr	r3, [pc, #72]	; (d14 <usart_init+0x3a4>)
     cca:	50e5      	str	r5, [r4, r3]
	return status_code;
     ccc:	2300      	movs	r3, #0
     cce:	e665      	b.n	99c <usart_init+0x2c>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     cd0:	2310      	movs	r3, #16
     cd2:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     cd4:	2300      	movs	r3, #0
     cd6:	9307      	str	r3, [sp, #28]
     cd8:	e6bf      	b.n	a5a <usart_init+0xea>
     cda:	46c0      	nop			; (mov r8, r8)
     cdc:	00000869 	.word	0x00000869
     ce0:	40000800 	.word	0x40000800
     ce4:	0000154d 	.word	0x0000154d
     ce8:	000014dd 	.word	0x000014dd
     cec:	000006a1 	.word	0x000006a1
     cf0:	f0ffffff 	.word	0xf0ffffff
     cf4:	41002000 	.word	0x41002000
     cf8:	00001571 	.word	0x00001571
     cfc:	000004a9 	.word	0x000004a9
     d00:	000004d1 	.word	0x000004d1
     d04:	000006ed 	.word	0x000006ed
     d08:	00001649 	.word	0x00001649
     d0c:	00000e3d 	.word	0x00000e3d
     d10:	000008a5 	.word	0x000008a5
     d14:	200001c4 	.word	0x200001c4

00000d18 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     d18:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     d1a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     d1c:	2a00      	cmp	r2, #0
     d1e:	d101      	bne.n	d24 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     d20:	0018      	movs	r0, r3
     d22:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     d24:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     d26:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     d28:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     d2a:	2a00      	cmp	r2, #0
     d2c:	d1f8      	bne.n	d20 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     d2e:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     d30:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     d32:	2a00      	cmp	r2, #0
     d34:	d1fc      	bne.n	d30 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     d36:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     d38:	2102      	movs	r1, #2
     d3a:	7e1a      	ldrb	r2, [r3, #24]
     d3c:	420a      	tst	r2, r1
     d3e:	d0fc      	beq.n	d3a <usart_write_wait+0x22>
	return STATUS_OK;
     d40:	2300      	movs	r3, #0
     d42:	e7ed      	b.n	d20 <usart_write_wait+0x8>

00000d44 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     d44:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     d46:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     d48:	2a00      	cmp	r2, #0
     d4a:	d101      	bne.n	d50 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     d4c:	0018      	movs	r0, r3
     d4e:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     d50:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     d52:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     d54:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     d56:	2a00      	cmp	r2, #0
     d58:	d1f8      	bne.n	d4c <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     d5a:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     d5c:	7e10      	ldrb	r0, [r2, #24]
     d5e:	0740      	lsls	r0, r0, #29
     d60:	d5f4      	bpl.n	d4c <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     d62:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     d64:	2b00      	cmp	r3, #0
     d66:	d1fc      	bne.n	d62 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     d68:	8b53      	ldrh	r3, [r2, #26]
     d6a:	b2db      	uxtb	r3, r3
	if (error_code) {
     d6c:	0658      	lsls	r0, r3, #25
     d6e:	d01d      	beq.n	dac <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     d70:	0798      	lsls	r0, r3, #30
     d72:	d503      	bpl.n	d7c <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     d74:	2302      	movs	r3, #2
     d76:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     d78:	3318      	adds	r3, #24
     d7a:	e7e7      	b.n	d4c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     d7c:	0758      	lsls	r0, r3, #29
     d7e:	d503      	bpl.n	d88 <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     d80:	2304      	movs	r3, #4
     d82:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     d84:	331a      	adds	r3, #26
     d86:	e7e1      	b.n	d4c <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     d88:	07d8      	lsls	r0, r3, #31
     d8a:	d503      	bpl.n	d94 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     d8c:	2301      	movs	r3, #1
     d8e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     d90:	3312      	adds	r3, #18
     d92:	e7db      	b.n	d4c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     d94:	06d8      	lsls	r0, r3, #27
     d96:	d503      	bpl.n	da0 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     d98:	2310      	movs	r3, #16
     d9a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     d9c:	3332      	adds	r3, #50	; 0x32
     d9e:	e7d5      	b.n	d4c <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     da0:	069b      	lsls	r3, r3, #26
     da2:	d503      	bpl.n	dac <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     da4:	2320      	movs	r3, #32
     da6:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     da8:	3321      	adds	r3, #33	; 0x21
     daa:	e7cf      	b.n	d4c <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     dac:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     dae:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     db0:	2300      	movs	r3, #0
     db2:	e7cb      	b.n	d4c <usart_read_wait+0x8>

00000db4 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     db6:	0004      	movs	r4, r0
     db8:	000d      	movs	r5, r1
     dba:	0016      	movs	r6, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     dbc:	6807      	ldr	r7, [r0, #0]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     dbe:	4b0f      	ldr	r3, [pc, #60]	; (dfc <_usart_read_buffer+0x48>)
     dc0:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     dc2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
     dc4:	b29b      	uxth	r3, r3
     dc6:	2b00      	cmp	r3, #0
     dc8:	d003      	beq.n	dd2 <_usart_read_buffer+0x1e>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     dca:	4b0d      	ldr	r3, [pc, #52]	; (e00 <_usart_read_buffer+0x4c>)
     dcc:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     dce:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     dd2:	85a6      	strh	r6, [r4, #44]	; 0x2c
     dd4:	4b0a      	ldr	r3, [pc, #40]	; (e00 <_usart_read_buffer+0x4c>)
     dd6:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     dd8:	6265      	str	r5, [r4, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
     dda:	2205      	movs	r2, #5
     ddc:	2332      	movs	r3, #50	; 0x32
     dde:	54e2      	strb	r2, [r4, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     de0:	3b2e      	subs	r3, #46	; 0x2e
     de2:	75bb      	strb	r3, [r7, #22]
	if(module->lin_slave_enabled) {
     de4:	7a23      	ldrb	r3, [r4, #8]
     de6:	2b00      	cmp	r3, #0
     de8:	d001      	beq.n	dee <_usart_read_buffer+0x3a>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
     dea:	2320      	movs	r3, #32
     dec:	75bb      	strb	r3, [r7, #22]
	if(module->start_frame_detection_enabled) {
     dee:	7a63      	ldrb	r3, [r4, #9]
	return STATUS_OK;
     df0:	2000      	movs	r0, #0
	if(module->start_frame_detection_enabled) {
     df2:	2b00      	cmp	r3, #0
     df4:	d0ec      	beq.n	dd0 <_usart_read_buffer+0x1c>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
     df6:	2308      	movs	r3, #8
     df8:	75bb      	strb	r3, [r7, #22]
     dfa:	e7e9      	b.n	dd0 <_usart_read_buffer+0x1c>
     dfc:	000003e1 	.word	0x000003e1
     e00:	00000421 	.word	0x00000421

00000e04 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     e04:	1c93      	adds	r3, r2, #2
     e06:	009b      	lsls	r3, r3, #2
     e08:	18c3      	adds	r3, r0, r3
     e0a:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     e0c:	2130      	movs	r1, #48	; 0x30
     e0e:	2301      	movs	r3, #1
     e10:	4093      	lsls	r3, r2
     e12:	001a      	movs	r2, r3
     e14:	5c43      	ldrb	r3, [r0, r1]
     e16:	4313      	orrs	r3, r2
     e18:	5443      	strb	r3, [r0, r1]
}
     e1a:	4770      	bx	lr

00000e1c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     e1c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     e1e:	2317      	movs	r3, #23
	if (length == 0) {
     e20:	2a00      	cmp	r2, #0
     e22:	d101      	bne.n	e28 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     e24:	0018      	movs	r0, r3
     e26:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     e28:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     e2a:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
     e2c:	2c00      	cmp	r4, #0
     e2e:	d0f9      	beq.n	e24 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     e30:	4b01      	ldr	r3, [pc, #4]	; (e38 <usart_read_buffer_job+0x1c>)
     e32:	4798      	blx	r3
     e34:	0003      	movs	r3, r0
     e36:	e7f5      	b.n	e24 <usart_read_buffer_job+0x8>
     e38:	00000db5 	.word	0x00000db5

00000e3c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     e3e:	0080      	lsls	r0, r0, #2
     e40:	4b64      	ldr	r3, [pc, #400]	; (fd4 <_usart_interrupt_handler+0x198>)
     e42:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     e44:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     e46:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     e48:	2b00      	cmp	r3, #0
     e4a:	d1fc      	bne.n	e46 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     e4c:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     e4e:	7da6      	ldrb	r6, [r4, #22]
     e50:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     e52:	2330      	movs	r3, #48	; 0x30
     e54:	5ceb      	ldrb	r3, [r5, r3]
     e56:	2231      	movs	r2, #49	; 0x31
     e58:	5caf      	ldrb	r7, [r5, r2]
     e5a:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     e5c:	07f3      	lsls	r3, r6, #31
     e5e:	d522      	bpl.n	ea6 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     e60:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     e62:	b29b      	uxth	r3, r3
     e64:	2b00      	cmp	r3, #0
     e66:	d01c      	beq.n	ea2 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     e68:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     e6a:	7813      	ldrb	r3, [r2, #0]
     e6c:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     e6e:	1c51      	adds	r1, r2, #1
     e70:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     e72:	7969      	ldrb	r1, [r5, #5]
     e74:	2901      	cmp	r1, #1
     e76:	d00e      	beq.n	e96 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     e78:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     e7a:	05db      	lsls	r3, r3, #23
     e7c:	0ddb      	lsrs	r3, r3, #23
     e7e:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     e80:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     e82:	3b01      	subs	r3, #1
     e84:	b29b      	uxth	r3, r3
     e86:	85eb      	strh	r3, [r5, #46]	; 0x2e
     e88:	2b00      	cmp	r3, #0
     e8a:	d10c      	bne.n	ea6 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     e8c:	3301      	adds	r3, #1
     e8e:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     e90:	3301      	adds	r3, #1
     e92:	75a3      	strb	r3, [r4, #22]
     e94:	e007      	b.n	ea6 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     e96:	7851      	ldrb	r1, [r2, #1]
     e98:	0209      	lsls	r1, r1, #8
     e9a:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     e9c:	3202      	adds	r2, #2
     e9e:	62aa      	str	r2, [r5, #40]	; 0x28
     ea0:	e7eb      	b.n	e7a <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     ea2:	2301      	movs	r3, #1
     ea4:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     ea6:	07b3      	lsls	r3, r6, #30
     ea8:	d506      	bpl.n	eb8 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     eaa:	2302      	movs	r3, #2
     eac:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     eae:	2200      	movs	r2, #0
     eb0:	3331      	adds	r3, #49	; 0x31
     eb2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     eb4:	07fb      	lsls	r3, r7, #31
     eb6:	d41e      	bmi.n	ef6 <_usart_interrupt_handler+0xba>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     eb8:	0773      	lsls	r3, r6, #29
     eba:	d568      	bpl.n	f8e <_usart_interrupt_handler+0x152>

		if (module->remaining_rx_buffer_length) {
     ebc:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     ebe:	b29b      	uxth	r3, r3
     ec0:	2b00      	cmp	r3, #0
     ec2:	d062      	beq.n	f8a <_usart_interrupt_handler+0x14e>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ec4:	8b63      	ldrh	r3, [r4, #26]
     ec6:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     ec8:	071a      	lsls	r2, r3, #28
     eca:	d418      	bmi.n	efe <_usart_interrupt_handler+0xc2>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     ecc:	227f      	movs	r2, #127	; 0x7f
     ece:	4013      	ands	r3, r2
				error_code &= ~SERCOM_USART_STATUS_CTS;
			}
#endif
#ifdef FEATURE_USART_LIN_MASTER
			/* TXE status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_TXE) {
     ed0:	065a      	lsls	r2, r3, #25
     ed2:	d501      	bpl.n	ed8 <_usart_interrupt_handler+0x9c>
				error_code &= ~SERCOM_USART_STATUS_TXE;
     ed4:	2240      	movs	r2, #64	; 0x40
     ed6:	4393      	bics	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     ed8:	2b00      	cmp	r3, #0
     eda:	d033      	beq.n	f44 <_usart_interrupt_handler+0x108>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     edc:	079a      	lsls	r2, r3, #30
     ede:	d511      	bpl.n	f04 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     ee0:	221a      	movs	r2, #26
     ee2:	2332      	movs	r3, #50	; 0x32
     ee4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     ee6:	3b30      	subs	r3, #48	; 0x30
     ee8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     eea:	077b      	lsls	r3, r7, #29
     eec:	d54f      	bpl.n	f8e <_usart_interrupt_handler+0x152>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     eee:	0028      	movs	r0, r5
     ef0:	696b      	ldr	r3, [r5, #20]
     ef2:	4798      	blx	r3
     ef4:	e04b      	b.n	f8e <_usart_interrupt_handler+0x152>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     ef6:	0028      	movs	r0, r5
     ef8:	68eb      	ldr	r3, [r5, #12]
     efa:	4798      	blx	r3
     efc:	e7dc      	b.n	eb8 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     efe:	2277      	movs	r2, #119	; 0x77
     f00:	4013      	ands	r3, r2
     f02:	e7e5      	b.n	ed0 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     f04:	075a      	lsls	r2, r3, #29
     f06:	d505      	bpl.n	f14 <_usart_interrupt_handler+0xd8>
					module->rx_status = STATUS_ERR_OVERFLOW;
     f08:	221e      	movs	r2, #30
     f0a:	2332      	movs	r3, #50	; 0x32
     f0c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     f0e:	3b2e      	subs	r3, #46	; 0x2e
     f10:	8363      	strh	r3, [r4, #26]
     f12:	e7ea      	b.n	eea <_usart_interrupt_handler+0xae>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     f14:	07da      	lsls	r2, r3, #31
     f16:	d505      	bpl.n	f24 <_usart_interrupt_handler+0xe8>
					module->rx_status = STATUS_ERR_BAD_DATA;
     f18:	2213      	movs	r2, #19
     f1a:	2332      	movs	r3, #50	; 0x32
     f1c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     f1e:	3b31      	subs	r3, #49	; 0x31
     f20:	8363      	strh	r3, [r4, #26]
     f22:	e7e2      	b.n	eea <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     f24:	06da      	lsls	r2, r3, #27
     f26:	d505      	bpl.n	f34 <_usart_interrupt_handler+0xf8>
					module->rx_status = STATUS_ERR_PROTOCOL;
     f28:	2242      	movs	r2, #66	; 0x42
     f2a:	2332      	movs	r3, #50	; 0x32
     f2c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     f2e:	3b22      	subs	r3, #34	; 0x22
     f30:	8363      	strh	r3, [r4, #26]
     f32:	e7da      	b.n	eea <_usart_interrupt_handler+0xae>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     f34:	069b      	lsls	r3, r3, #26
     f36:	d5d8      	bpl.n	eea <_usart_interrupt_handler+0xae>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     f38:	2241      	movs	r2, #65	; 0x41
     f3a:	2332      	movs	r3, #50	; 0x32
     f3c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     f3e:	3b12      	subs	r3, #18
     f40:	8363      	strh	r3, [r4, #26]
     f42:	e7d2      	b.n	eea <_usart_interrupt_handler+0xae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     f44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     f46:	05db      	lsls	r3, r3, #23
     f48:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     f4a:	b2da      	uxtb	r2, r3
     f4c:	6a69      	ldr	r1, [r5, #36]	; 0x24
     f4e:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     f50:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     f52:	1c51      	adds	r1, r2, #1
     f54:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     f56:	7969      	ldrb	r1, [r5, #5]
     f58:	2901      	cmp	r1, #1
     f5a:	d010      	beq.n	f7e <_usart_interrupt_handler+0x142>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     f5c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     f5e:	3b01      	subs	r3, #1
     f60:	b29b      	uxth	r3, r3
     f62:	85ab      	strh	r3, [r5, #44]	; 0x2c
     f64:	2b00      	cmp	r3, #0
     f66:	d112      	bne.n	f8e <_usart_interrupt_handler+0x152>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     f68:	3304      	adds	r3, #4
     f6a:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     f6c:	2200      	movs	r2, #0
     f6e:	332e      	adds	r3, #46	; 0x2e
     f70:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     f72:	07bb      	lsls	r3, r7, #30
     f74:	d50b      	bpl.n	f8e <_usart_interrupt_handler+0x152>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     f76:	0028      	movs	r0, r5
     f78:	692b      	ldr	r3, [r5, #16]
     f7a:	4798      	blx	r3
     f7c:	e007      	b.n	f8e <_usart_interrupt_handler+0x152>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     f7e:	0a1b      	lsrs	r3, r3, #8
     f80:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     f82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     f84:	3301      	adds	r3, #1
     f86:	626b      	str	r3, [r5, #36]	; 0x24
     f88:	e7e8      	b.n	f5c <_usart_interrupt_handler+0x120>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     f8a:	2304      	movs	r3, #4
     f8c:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     f8e:	06f3      	lsls	r3, r6, #27
     f90:	d504      	bpl.n	f9c <_usart_interrupt_handler+0x160>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     f92:	2310      	movs	r3, #16
     f94:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     f96:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     f98:	06fb      	lsls	r3, r7, #27
     f9a:	d40e      	bmi.n	fba <_usart_interrupt_handler+0x17e>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     f9c:	06b3      	lsls	r3, r6, #26
     f9e:	d504      	bpl.n	faa <_usart_interrupt_handler+0x16e>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     fa0:	2320      	movs	r3, #32
     fa2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     fa4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     fa6:	073b      	lsls	r3, r7, #28
     fa8:	d40b      	bmi.n	fc2 <_usart_interrupt_handler+0x186>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     faa:	0733      	lsls	r3, r6, #28
     fac:	d504      	bpl.n	fb8 <_usart_interrupt_handler+0x17c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     fae:	2308      	movs	r3, #8
     fb0:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     fb2:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     fb4:	06bb      	lsls	r3, r7, #26
     fb6:	d408      	bmi.n	fca <_usart_interrupt_handler+0x18e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     fba:	0028      	movs	r0, r5
     fbc:	69eb      	ldr	r3, [r5, #28]
     fbe:	4798      	blx	r3
     fc0:	e7ec      	b.n	f9c <_usart_interrupt_handler+0x160>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     fc2:	0028      	movs	r0, r5
     fc4:	69ab      	ldr	r3, [r5, #24]
     fc6:	4798      	blx	r3
     fc8:	e7ef      	b.n	faa <_usart_interrupt_handler+0x16e>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     fca:	6a2b      	ldr	r3, [r5, #32]
     fcc:	0028      	movs	r0, r5
     fce:	4798      	blx	r3
}
     fd0:	e7f2      	b.n	fb8 <_usart_interrupt_handler+0x17c>
     fd2:	46c0      	nop			; (mov r8, r8)
     fd4:	200001c4 	.word	0x200001c4

00000fd8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     fd8:	b510      	push	{r4, lr}
	switch (clock_source) {
     fda:	2807      	cmp	r0, #7
     fdc:	d803      	bhi.n	fe6 <system_clock_source_get_hz+0xe>
     fde:	0080      	lsls	r0, r0, #2
     fe0:	4b0f      	ldr	r3, [pc, #60]	; (1020 <system_clock_source_get_hz+0x48>)
     fe2:	581b      	ldr	r3, [r3, r0]
     fe4:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
     fe6:	2000      	movs	r0, #0
     fe8:	e018      	b.n	101c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc.frequency;
     fea:	4b0e      	ldr	r3, [pc, #56]	; (1024 <system_clock_source_get_hz+0x4c>)
     fec:	6858      	ldr	r0, [r3, #4]
     fee:	e015      	b.n	101c <system_clock_source_get_hz+0x44>
		return 48000000UL / (OSCCTRL->OSC48MDIV.bit.DIV + 1);
     ff0:	4b0d      	ldr	r3, [pc, #52]	; (1028 <system_clock_source_get_hz+0x50>)
     ff2:	7d59      	ldrb	r1, [r3, #21]
     ff4:	0709      	lsls	r1, r1, #28
     ff6:	0f09      	lsrs	r1, r1, #28
     ff8:	3101      	adds	r1, #1
     ffa:	480c      	ldr	r0, [pc, #48]	; (102c <system_clock_source_get_hz+0x54>)
     ffc:	4b0c      	ldr	r3, [pc, #48]	; (1030 <system_clock_source_get_hz+0x58>)
     ffe:	4798      	blx	r3
    1000:	e00c      	b.n	101c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.xosc32k.frequency;
    1002:	4b08      	ldr	r3, [pc, #32]	; (1024 <system_clock_source_get_hz+0x4c>)
    1004:	6898      	ldr	r0, [r3, #8]
    1006:	e009      	b.n	101c <system_clock_source_get_hz+0x44>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    1008:	4b07      	ldr	r3, [pc, #28]	; (1028 <system_clock_source_get_hz+0x50>)
    100a:	7f1b      	ldrb	r3, [r3, #28]
			return 0;
    100c:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    100e:	079b      	lsls	r3, r3, #30
    1010:	d504      	bpl.n	101c <system_clock_source_get_hz+0x44>
		return _system_clock_inst.dpll.frequency;
    1012:	4b04      	ldr	r3, [pc, #16]	; (1024 <system_clock_source_get_hz+0x4c>)
    1014:	6818      	ldr	r0, [r3, #0]
    1016:	e001      	b.n	101c <system_clock_source_get_hz+0x44>
		return 32768UL;
    1018:	2080      	movs	r0, #128	; 0x80
    101a:	0200      	lsls	r0, r0, #8
	}
}
    101c:	bd10      	pop	{r4, pc}
    101e:	46c0      	nop			; (mov r8, r8)
    1020:	00002e84 	.word	0x00002e84
    1024:	200000bc 	.word	0x200000bc
    1028:	40001000 	.word	0x40001000
    102c:	02dc6c00 	.word	0x02dc6c00
    1030:	00001bcd 	.word	0x00001bcd

00001034 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    1034:	b5f0      	push	{r4, r5, r6, r7, lr}
    1036:	46de      	mov	lr, fp
    1038:	4657      	mov	r7, sl
    103a:	464e      	mov	r6, r9
    103c:	4645      	mov	r5, r8
    103e:	b5e0      	push	{r5, r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    1040:	4a25      	ldr	r2, [pc, #148]	; (10d8 <system_clock_source_xosc32k_set_config+0xa4>)
    1042:	8a93      	ldrh	r3, [r2, #20]

	temp.bit.STARTUP = config->startup_time;
    1044:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1046:	7801      	ldrb	r1, [r0, #0]
    1048:	424c      	negs	r4, r1
    104a:	414c      	adcs	r4, r1
    104c:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    104e:	7881      	ldrb	r1, [r0, #2]
    1050:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    1052:	78c1      	ldrb	r1, [r0, #3]
    1054:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    1056:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1058:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    105a:	7a81      	ldrb	r1, [r0, #10]
    105c:	468b      	mov	fp, r1

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    105e:	491f      	ldr	r1, [pc, #124]	; (10dc <system_clock_source_xosc32k_set_config+0xa8>)
    1060:	6844      	ldr	r4, [r0, #4]
    1062:	608c      	str	r4, [r1, #8]

	OSC32KCTRL->CFDCTRL.reg =
		(config->clock_failure_detector_prescaler << OSC32KCTRL_CFDCTRL_CFDPRESC_Pos) |
    1064:	7ac1      	ldrb	r1, [r0, #11]
    1066:	0089      	lsls	r1, r1, #2
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
		(config->enable_clock_switch_back << OSC32KCTRL_CFDCTRL_SWBACK_Pos);
    1068:	7b84      	ldrb	r4, [r0, #14]
    106a:	0064      	lsls	r4, r4, #1
		(config->enable_clock_failure_detector << OSC32KCTRL_CFDCTRL_CFDEN_Pos)|
    106c:	4321      	orrs	r1, r4
    106e:	7b44      	ldrb	r4, [r0, #13]
    1070:	4321      	orrs	r1, r4
    1072:	b2c9      	uxtb	r1, r1
	OSC32KCTRL->CFDCTRL.reg =
    1074:	7591      	strb	r1, [r2, #22]

	OSC32KCTRL->EVCTRL.reg =
			(config->enable_clock_failure_detector_event_outut << OSC32KCTRL_EVCTRL_CFDEO_Pos);
    1076:	7b01      	ldrb	r1, [r0, #12]
	OSC32KCTRL->EVCTRL.reg =
    1078:	75d1      	strb	r1, [r2, #23]

	OSC32KCTRL->XOSC32K = temp;
    107a:	2101      	movs	r1, #1
    107c:	4648      	mov	r0, r9
    107e:	0080      	lsls	r0, r0, #2
    1080:	2404      	movs	r4, #4
    1082:	43a3      	bics	r3, r4
    1084:	4303      	orrs	r3, r0
    1086:	4640      	mov	r0, r8
    1088:	4008      	ands	r0, r1
    108a:	00c0      	lsls	r0, r0, #3
    108c:	3404      	adds	r4, #4
    108e:	43a3      	bics	r3, r4
    1090:	4303      	orrs	r3, r0
    1092:	4660      	mov	r0, ip
    1094:	4008      	ands	r0, r1
    1096:	0100      	lsls	r0, r0, #4
    1098:	3408      	adds	r4, #8
    109a:	43a3      	bics	r3, r4
    109c:	4303      	orrs	r3, r0
    109e:	400f      	ands	r7, r1
    10a0:	01bf      	lsls	r7, r7, #6
    10a2:	2040      	movs	r0, #64	; 0x40
    10a4:	4383      	bics	r3, r0
    10a6:	433b      	orrs	r3, r7
    10a8:	400e      	ands	r6, r1
    10aa:	01f6      	lsls	r6, r6, #7
    10ac:	3040      	adds	r0, #64	; 0x40
    10ae:	4383      	bics	r3, r0
    10b0:	4333      	orrs	r3, r6
    10b2:	3879      	subs	r0, #121	; 0x79
    10b4:	4005      	ands	r5, r0
    10b6:	022d      	lsls	r5, r5, #8
    10b8:	4809      	ldr	r0, [pc, #36]	; (10e0 <system_clock_source_xosc32k_set_config+0xac>)
    10ba:	4003      	ands	r3, r0
    10bc:	432b      	orrs	r3, r5
    10be:	4658      	mov	r0, fp
    10c0:	4001      	ands	r1, r0
    10c2:	0309      	lsls	r1, r1, #12
    10c4:	4807      	ldr	r0, [pc, #28]	; (10e4 <system_clock_source_xosc32k_set_config+0xb0>)
    10c6:	4003      	ands	r3, r0
    10c8:	430b      	orrs	r3, r1
    10ca:	8293      	strh	r3, [r2, #20]
}
    10cc:	bc3c      	pop	{r2, r3, r4, r5}
    10ce:	4690      	mov	r8, r2
    10d0:	4699      	mov	r9, r3
    10d2:	46a2      	mov	sl, r4
    10d4:	46ab      	mov	fp, r5
    10d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    10d8:	40001400 	.word	0x40001400
    10dc:	200000bc 	.word	0x200000bc
    10e0:	fffff8ff 	.word	0xfffff8ff
    10e4:	ffffefff 	.word	0xffffefff

000010e8 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
    10e8:	b570      	push	{r4, r5, r6, lr}
    10ea:	0004      	movs	r4, r0

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
    10ec:	68c3      	ldr	r3, [r0, #12]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
    10ee:	7d02      	ldrb	r2, [r0, #20]
    10f0:	2a01      	cmp	r2, #1
    10f2:	d04e      	beq.n	1192 <system_clock_source_dpll_set_config+0xaa>
		refclk = refclk / config->reference_divider;
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
    10f4:	68a2      	ldr	r2, [r4, #8]
    10f6:	0110      	lsls	r0, r2, #4
    10f8:	0019      	movs	r1, r3
    10fa:	4b29      	ldr	r3, [pc, #164]	; (11a0 <system_clock_source_dpll_set_config+0xb8>)
    10fc:	4798      	blx	r3
	tmpldrfrac = tmpldr & 0x0f;
    10fe:	220f      	movs	r2, #15
    1100:	4002      	ands	r2, r0
	tmpldr = (tmpldr >> 4) - 1;
    1102:	0903      	lsrs	r3, r0, #4

	OSCCTRL->DPLLCTRLA.reg =
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    1104:	7821      	ldrb	r1, [r4, #0]
    1106:	01c9      	lsls	r1, r1, #7
			((uint32_t)config->run_in_standby << OSCCTRL_DPLLCTRLA_RUNSTDBY_Pos);
    1108:	7865      	ldrb	r5, [r4, #1]
    110a:	01ad      	lsls	r5, r5, #6
			((uint32_t)config->on_demand << OSCCTRL_DPLLCTRLA_ONDEMAND_Pos) |
    110c:	4329      	orrs	r1, r5
    110e:	b2c9      	uxtb	r1, r1
	OSCCTRL->DPLLCTRLA.reg =
    1110:	4d24      	ldr	r5, [pc, #144]	; (11a4 <system_clock_source_dpll_set_config+0xbc>)
    1112:	7729      	strb	r1, [r5, #28]

	OSCCTRL->DPLLRATIO.reg =
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    1114:	0411      	lsls	r1, r2, #16
	tmpldr = (tmpldr >> 4) - 1;
    1116:	3b01      	subs	r3, #1
			OSCCTRL_DPLLRATIO_LDR(tmpldr);
    1118:	051b      	lsls	r3, r3, #20
    111a:	0d1b      	lsrs	r3, r3, #20
			OSCCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
    111c:	430b      	orrs	r3, r1
	OSCCTRL->DPLLRATIO.reg =
    111e:	622b      	str	r3, [r5, #32]

	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLRATIO){
    1120:	002e      	movs	r6, r5
    1122:	252c      	movs	r5, #44	; 0x2c
    1124:	2104      	movs	r1, #4
    1126:	5d73      	ldrb	r3, [r6, r5]
    1128:	420b      	tst	r3, r1
    112a:	d1fc      	bne.n	1126 <system_clock_source_dpll_set_config+0x3e>
		}

	OSCCTRL->DPLLCTRLB.reg =
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
			((uint32_t)config->lock_bypass << OSCCTRL_DPLLCTRLB_LBYPASS_Pos) |
    112c:	78a3      	ldrb	r3, [r4, #2]
    112e:	031b      	lsls	r3, r3, #12
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
			((uint32_t)config->wake_up_fast << OSCCTRL_DPLLCTRLB_WUF_Pos) |
    1130:	78e1      	ldrb	r1, [r4, #3]
    1132:	00c9      	lsls	r1, r1, #3
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    1134:	430b      	orrs	r3, r1
    1136:	7921      	ldrb	r1, [r4, #4]
    1138:	0089      	lsls	r1, r1, #2
    113a:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_FILTER(config->filter);
    113c:	7ca1      	ldrb	r1, [r4, #18]
    113e:	2503      	movs	r5, #3
    1140:	4029      	ands	r1, r5
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    1142:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_DIV(config->reference_divider) |
    1144:	8a21      	ldrh	r1, [r4, #16]
    1146:	0409      	lsls	r1, r1, #16
    1148:	4e17      	ldr	r6, [pc, #92]	; (11a8 <system_clock_source_dpll_set_config+0xc0>)
    114a:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    114c:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_LTIME(config->lock_time) |
    114e:	7ce1      	ldrb	r1, [r4, #19]
    1150:	0209      	lsls	r1, r1, #8
    1152:	26e0      	movs	r6, #224	; 0xe0
    1154:	00f6      	lsls	r6, r6, #3
    1156:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    1158:	430b      	orrs	r3, r1
			OSCCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
    115a:	7d26      	ldrb	r6, [r4, #20]
    115c:	0136      	lsls	r6, r6, #4
    115e:	2130      	movs	r1, #48	; 0x30
    1160:	4031      	ands	r1, r6
			((uint32_t)config->low_power_enable << OSCCTRL_DPLLCTRLB_LPEN_Pos) |
    1162:	430b      	orrs	r3, r1
	OSCCTRL->DPLLCTRLB.reg =
    1164:	490f      	ldr	r1, [pc, #60]	; (11a4 <system_clock_source_dpll_set_config+0xbc>)
    1166:	624b      	str	r3, [r1, #36]	; 0x24

	OSCCTRL->DPLLPRESC.reg  = OSCCTRL_DPLLPRESC_PRESC(config->prescaler);
    1168:	7d63      	ldrb	r3, [r4, #21]
    116a:	401d      	ands	r5, r3
    116c:	2328      	movs	r3, #40	; 0x28
    116e:	54cd      	strb	r5, [r1, r3]
	while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_DPLLPRESC){
    1170:	000e      	movs	r6, r1
    1172:	252c      	movs	r5, #44	; 0x2c
    1174:	2108      	movs	r1, #8
    1176:	5d73      	ldrb	r3, [r6, r5]
    1178:	420b      	tst	r3, r1
    117a:	d1fc      	bne.n	1176 <system_clock_source_dpll_set_config+0x8e>
	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16) / (2^PRESC)
	 */
	_system_clock_inst.dpll.frequency =
			(config->reference_frequency *
			 (((tmpldr + 1) << 4) + tmpldrfrac)
    117c:	230f      	movs	r3, #15
    117e:	4398      	bics	r0, r3
    1180:	1882      	adds	r2, r0, r2
			(config->reference_frequency *
    1182:	68e3      	ldr	r3, [r4, #12]
    1184:	435a      	muls	r2, r3
			) >> (4 + config->prescaler);
    1186:	7d63      	ldrb	r3, [r4, #21]
    1188:	3304      	adds	r3, #4
    118a:	40da      	lsrs	r2, r3
	_system_clock_inst.dpll.frequency =
    118c:	4b07      	ldr	r3, [pc, #28]	; (11ac <system_clock_source_dpll_set_config+0xc4>)
    118e:	601a      	str	r2, [r3, #0]
}
    1190:	bd70      	pop	{r4, r5, r6, pc}
		refclk = refclk / config->reference_divider;
    1192:	8a01      	ldrh	r1, [r0, #16]
    1194:	0018      	movs	r0, r3
    1196:	4b02      	ldr	r3, [pc, #8]	; (11a0 <system_clock_source_dpll_set_config+0xb8>)
    1198:	4798      	blx	r3
    119a:	0003      	movs	r3, r0
    119c:	e7aa      	b.n	10f4 <system_clock_source_dpll_set_config+0xc>
    119e:	46c0      	nop			; (mov r8, r8)
    11a0:	00001bcd 	.word	0x00001bcd
    11a4:	40001000 	.word	0x40001000
    11a8:	07ff0000 	.word	0x07ff0000
    11ac:	200000bc 	.word	0x200000bc

000011b0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    11b0:	2807      	cmp	r0, #7
    11b2:	d803      	bhi.n	11bc <system_clock_source_enable+0xc>
    11b4:	0080      	lsls	r0, r0, #2
    11b6:	4b18      	ldr	r3, [pc, #96]	; (1218 <system_clock_source_enable+0x68>)
    11b8:	581b      	ldr	r3, [r3, r0]
    11ba:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    11bc:	2017      	movs	r0, #23
    11be:	e029      	b.n	1214 <system_clock_source_enable+0x64>
		OSCCTRL->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ENABLE;
    11c0:	4a16      	ldr	r2, [pc, #88]	; (121c <system_clock_source_enable+0x6c>)
    11c2:	7d13      	ldrb	r3, [r2, #20]
    11c4:	2102      	movs	r1, #2
    11c6:	430b      	orrs	r3, r1
    11c8:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    11ca:	2000      	movs	r0, #0
    11cc:	e022      	b.n	1214 <system_clock_source_enable+0x64>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    11ce:	4a14      	ldr	r2, [pc, #80]	; (1220 <system_clock_source_enable+0x70>)
    11d0:	6993      	ldr	r3, [r2, #24]
    11d2:	2102      	movs	r1, #2
    11d4:	430b      	orrs	r3, r1
    11d6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    11d8:	2000      	movs	r0, #0
		break;
    11da:	e01b      	b.n	1214 <system_clock_source_enable+0x64>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    11dc:	4a0f      	ldr	r2, [pc, #60]	; (121c <system_clock_source_enable+0x6c>)
    11de:	8a13      	ldrh	r3, [r2, #16]
    11e0:	2102      	movs	r1, #2
    11e2:	430b      	orrs	r3, r1
    11e4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    11e6:	2000      	movs	r0, #0
		break;
    11e8:	e014      	b.n	1214 <system_clock_source_enable+0x64>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    11ea:	4a0d      	ldr	r2, [pc, #52]	; (1220 <system_clock_source_enable+0x70>)
    11ec:	8a93      	ldrh	r3, [r2, #20]
    11ee:	2102      	movs	r1, #2
    11f0:	430b      	orrs	r3, r1
    11f2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    11f4:	2000      	movs	r0, #0
		break;
    11f6:	e00d      	b.n	1214 <system_clock_source_enable+0x64>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    11f8:	4a08      	ldr	r2, [pc, #32]	; (121c <system_clock_source_enable+0x6c>)
    11fa:	7f13      	ldrb	r3, [r2, #28]
    11fc:	2102      	movs	r1, #2
    11fe:	430b      	orrs	r3, r1
    1200:	7713      	strb	r3, [r2, #28]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    1202:	0010      	movs	r0, r2
    1204:	312a      	adds	r1, #42	; 0x2a
    1206:	2202      	movs	r2, #2
    1208:	5c43      	ldrb	r3, [r0, r1]
    120a:	4213      	tst	r3, r2
    120c:	d1fc      	bne.n	1208 <system_clock_source_enable+0x58>
	return STATUS_OK;
    120e:	2000      	movs	r0, #0
    1210:	e000      	b.n	1214 <system_clock_source_enable+0x64>
		return STATUS_OK;
    1212:	2000      	movs	r0, #0
}
    1214:	4770      	bx	lr
    1216:	46c0      	nop			; (mov r8, r8)
    1218:	00002ea4 	.word	0x00002ea4
    121c:	40001000 	.word	0x40001000
    1220:	40001400 	.word	0x40001400

00001224 <system_clock_init>:
 * \note OSC48M is always enabled and if the user selects other clocks for GCLK generators,
 * the OSC48M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC48M.
 */
void system_clock_init(void)
{
    1224:	b5f0      	push	{r4, r5, r6, r7, lr}
    1226:	46c6      	mov	lr, r8
    1228:	b500      	push	{lr}
    122a:	b08e      	sub	sp, #56	; 0x38
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BODVDDRDY | SUPC_INTFLAG_BODVDDDET;
    122c:	2203      	movs	r2, #3
    122e:	4b3f      	ldr	r3, [pc, #252]	; (132c <system_clock_init+0x108>)
    1230:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1232:	4a3f      	ldr	r2, [pc, #252]	; (1330 <system_clock_init+0x10c>)
    1234:	6853      	ldr	r3, [r2, #4]
    1236:	211e      	movs	r1, #30
    1238:	438b      	bics	r3, r1
    123a:	3918      	subs	r1, #24
    123c:	430b      	orrs	r3, r1
    123e:	6053      	str	r3, [r2, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1240:	a80a      	add	r0, sp, #40	; 0x28
    1242:	2300      	movs	r3, #0
    1244:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    1246:	2280      	movs	r2, #128	; 0x80
    1248:	0212      	lsls	r2, r2, #8
    124a:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    124c:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    124e:	2201      	movs	r2, #1
    1250:	70c2      	strb	r2, [r0, #3]
	config->write_once          = false;
    1252:	7283      	strb	r3, [r0, #10]
	config->clock_failure_detector_prescaler = SYSTEM_CLOCK_XOSC32K_FAILURE_DETECTOR_PRESCALER_1;
    1254:	72c3      	strb	r3, [r0, #11]
	config->enable_clock_failure_detector_event_outut = false;
    1256:	7303      	strb	r3, [r0, #12]
	config->enable_clock_failure_detector = false;
    1258:	7343      	strb	r3, [r0, #13]
	config->enable_clock_switch_back = false;
    125a:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    125c:	3902      	subs	r1, #2
    125e:	7041      	strb	r1, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1260:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    1262:	7202      	strb	r2, [r0, #8]
	xosc32k_conf.enable_clock_failure_detector    = CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_ENABLE;
	xosc32k_conf.enable_clock_failure_detector_event_outut =
											CONF_CLOCK_XOSC32K_FAILURE_DETECTOR_EVENT_OUTPUT_ENABLE;
	xosc32k_conf.enable_clock_switch_back = CONF_CLOCK_XOSC32K_FAILURE_SWITCH_BACK_ENABLE;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1264:	4b33      	ldr	r3, [pc, #204]	; (1334 <system_clock_init+0x110>)
    1266:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1268:	2005      	movs	r0, #5
    126a:	4b33      	ldr	r3, [pc, #204]	; (1338 <system_clock_init+0x114>)
    126c:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    126e:	4933      	ldr	r1, [pc, #204]	; (133c <system_clock_init+0x118>)
    1270:	2201      	movs	r2, #1
    1272:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1274:	421a      	tst	r2, r3
    1276:	d0fc      	beq.n	1272 <system_clock_init+0x4e>
	system_clock_source_osc32k_set_config(&osc32k_conf);
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
#endif

	/* OSC48M */
	OSCCTRL->OSC48MCTRL.reg |= (CONF_CLOCK_OSC48M_ON_DEMAND << OSCCTRL_OSC48MCTRL_ONDEMAND_Pos)
    1278:	4b31      	ldr	r3, [pc, #196]	; (1340 <system_clock_init+0x11c>)
    127a:	7d1a      	ldrb	r2, [r3, #20]
    127c:	2180      	movs	r1, #128	; 0x80
    127e:	430a      	orrs	r2, r1
    1280:	751a      	strb	r2, [r3, #20]
								|(CONF_CLOCK_OSC48M_RUN_IN_STANDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

	if (CONF_CLOCK_OSC48M_FREQ_DIV != SYSTEM_OSC48M_DIV_12){
		OSCCTRL->OSC48MDIV.reg = OSCCTRL_OSC48MDIV_DIV(CONF_CLOCK_OSC48M_FREQ_DIV);
    1282:	2202      	movs	r2, #2
    1284:	755a      	strb	r2, [r3, #21]
		while(OSCCTRL->OSC48MSYNCBUSY.reg) ;
    1286:	001a      	movs	r2, r3
    1288:	6993      	ldr	r3, [r2, #24]
    128a:	2b00      	cmp	r3, #0
    128c:	d1fc      	bne.n	1288 <system_clock_init+0x64>
	}

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    128e:	4b2d      	ldr	r3, [pc, #180]	; (1344 <system_clock_init+0x120>)
    1290:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1292:	ad01      	add	r5, sp, #4
    1294:	2601      	movs	r6, #1
    1296:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1298:	2400      	movs	r4, #0
    129a:	706c      	strb	r4, [r5, #1]
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
	config->output_enable      = false;
    129c:	726c      	strb	r4, [r5, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    129e:	2305      	movs	r3, #5
    12a0:	702b      	strb	r3, [r5, #0]
    12a2:	722e      	strb	r6, [r5, #8]
    12a4:	0029      	movs	r1, r5
    12a6:	2001      	movs	r0, #1
    12a8:	4b27      	ldr	r3, [pc, #156]	; (1348 <system_clock_init+0x124>)
    12aa:	4698      	mov	r8, r3
    12ac:	4798      	blx	r3
    12ae:	2001      	movs	r0, #1
    12b0:	4f26      	ldr	r7, [pc, #152]	; (134c <system_clock_init+0x128>)
    12b2:	47b8      	blx	r7
	config->division_factor    = 1;
    12b4:	606e      	str	r6, [r5, #4]
	config->high_when_disabled = false;
    12b6:	706c      	strb	r4, [r5, #1]
	config->run_in_standby     = false;
    12b8:	722c      	strb	r4, [r5, #8]
	config->output_enable      = false;
    12ba:	726c      	strb	r4, [r5, #9]
    12bc:	2307      	movs	r3, #7
    12be:	702b      	strb	r3, [r5, #0]
    12c0:	0029      	movs	r1, r5
    12c2:	2008      	movs	r0, #8
    12c4:	47c0      	blx	r8
    12c6:	2008      	movs	r0, #8
    12c8:	47b8      	blx	r7
	config->lock_bypass         = false;
    12ca:	a804      	add	r0, sp, #16
    12cc:	7084      	strb	r4, [r0, #2]
	config->wake_up_fast        = false;
    12ce:	70c4      	strb	r4, [r0, #3]
	config->low_power_enable    = false;
    12d0:	7104      	strb	r4, [r0, #4]
	config->output_frequency    = 48000000;
    12d2:	4b1f      	ldr	r3, [pc, #124]	; (1350 <system_clock_init+0x12c>)
    12d4:	6083      	str	r3, [r0, #8]
	config->reference_divider   = 1;
    12d6:	8206      	strh	r6, [r0, #16]
	config->prescaler           = SYSTEM_CLOCK_SOURCE_DPLL_DIV_1;
    12d8:	7544      	strb	r4, [r0, #21]
	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
    12da:	74c4      	strb	r4, [r0, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
    12dc:	7484      	strb	r4, [r0, #18]
		Assert(false);
	}
	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);

	dpll_config.on_demand        = false;
    12de:	7004      	strb	r4, [r0, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
    12e0:	2301      	movs	r3, #1
    12e2:	7043      	strb	r3, [r0, #1]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
    12e4:	7504      	strb	r4, [r0, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
    12e6:	4b1b      	ldr	r3, [pc, #108]	; (1354 <system_clock_init+0x130>)
    12e8:	60c3      	str	r3, [r0, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
	dpll_config.prescaler           = CONF_CLOCK_DPLL_PRESCALER;

	system_clock_source_dpll_set_config(&dpll_config);
    12ea:	4b1b      	ldr	r3, [pc, #108]	; (1358 <system_clock_init+0x134>)
    12ec:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
    12ee:	2007      	movs	r0, #7
    12f0:	4b11      	ldr	r3, [pc, #68]	; (1338 <system_clock_init+0x114>)
    12f2:	4798      	blx	r3
		return ((OSCCTRL->DPLLSTATUS.reg &
    12f4:	4812      	ldr	r0, [pc, #72]	; (1340 <system_clock_init+0x11c>)
    12f6:	2130      	movs	r1, #48	; 0x30
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    12f8:	2203      	movs	r2, #3
		return ((OSCCTRL->DPLLSTATUS.reg &
    12fa:	5c43      	ldrb	r3, [r0, r1]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
    12fc:	4013      	ands	r3, r2
    12fe:	2b03      	cmp	r3, #3
    1300:	d1fb      	bne.n	12fa <system_clock_init+0xd6>
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    1302:	3b02      	subs	r3, #2
    1304:	4a15      	ldr	r2, [pc, #84]	; (135c <system_clock_init+0x138>)
    1306:	7113      	strb	r3, [r2, #4]
	config->division_factor    = 1;
    1308:	a901      	add	r1, sp, #4
    130a:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    130c:	2200      	movs	r2, #0
    130e:	704a      	strb	r2, [r1, #1]
	config->output_enable      = false;
    1310:	724a      	strb	r2, [r1, #9]
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1312:	3207      	adds	r2, #7
    1314:	700a      	strb	r2, [r1, #0]
    1316:	720b      	strb	r3, [r1, #8]
    1318:	2000      	movs	r0, #0
    131a:	4b0b      	ldr	r3, [pc, #44]	; (1348 <system_clock_init+0x124>)
    131c:	4798      	blx	r3
    131e:	2000      	movs	r0, #0
    1320:	4b0a      	ldr	r3, [pc, #40]	; (134c <system_clock_init+0x128>)
    1322:	4798      	blx	r3
#endif

}
    1324:	b00e      	add	sp, #56	; 0x38
    1326:	bc04      	pop	{r2}
    1328:	4690      	mov	r8, r2
    132a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    132c:	40001800 	.word	0x40001800
    1330:	41004000 	.word	0x41004000
    1334:	00001035 	.word	0x00001035
    1338:	000011b1 	.word	0x000011b1
    133c:	40001400 	.word	0x40001400
    1340:	40001000 	.word	0x40001000
    1344:	00001361 	.word	0x00001361
    1348:	00001385 	.word	0x00001385
    134c:	00001431 	.word	0x00001431
    1350:	02dc6c00 	.word	0x02dc6c00
    1354:	00007fff 	.word	0x00007fff
    1358:	000010e9 	.word	0x000010e9
    135c:	40000800 	.word	0x40000800

00001360 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    1360:	4a06      	ldr	r2, [pc, #24]	; (137c <system_gclk_init+0x1c>)
    1362:	6953      	ldr	r3, [r2, #20]
    1364:	2180      	movs	r1, #128	; 0x80
    1366:	430b      	orrs	r3, r1
    1368:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    136a:	2201      	movs	r2, #1
    136c:	4b04      	ldr	r3, [pc, #16]	; (1380 <system_gclk_init+0x20>)
    136e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    1370:	0019      	movs	r1, r3
    1372:	780b      	ldrb	r3, [r1, #0]
    1374:	4213      	tst	r3, r2
    1376:	d1fc      	bne.n	1372 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1378:	4770      	bx	lr
    137a:	46c0      	nop			; (mov r8, r8)
    137c:	40000800 	.word	0x40000800
    1380:	40001c00 	.word	0x40001c00

00001384 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1384:	b570      	push	{r4, r5, r6, lr}
    1386:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1388:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    138a:	784b      	ldrb	r3, [r1, #1]
    138c:	2b00      	cmp	r3, #0
    138e:	d002      	beq.n	1396 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1390:	2380      	movs	r3, #128	; 0x80
    1392:	00db      	lsls	r3, r3, #3
    1394:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1396:	7a4b      	ldrb	r3, [r1, #9]
    1398:	2b00      	cmp	r3, #0
    139a:	d002      	beq.n	13a2 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    139c:	2380      	movs	r3, #128	; 0x80
    139e:	011b      	lsls	r3, r3, #4
    13a0:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    13a2:	6848      	ldr	r0, [r1, #4]
    13a4:	2801      	cmp	r0, #1
    13a6:	d90f      	bls.n	13c8 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    13a8:	1e43      	subs	r3, r0, #1
    13aa:	4218      	tst	r0, r3
    13ac:	d131      	bne.n	1412 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    13ae:	2802      	cmp	r0, #2
    13b0:	d92d      	bls.n	140e <system_gclk_gen_set_config+0x8a>
    13b2:	2302      	movs	r3, #2
    13b4:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    13b6:	3201      	adds	r2, #1
						mask <<= 1) {
    13b8:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    13ba:	4298      	cmp	r0, r3
    13bc:	d8fb      	bhi.n	13b6 <system_gclk_gen_set_config+0x32>
    13be:	2380      	movs	r3, #128	; 0x80
    13c0:	015b      	lsls	r3, r3, #5
    13c2:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    13c4:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    13c6:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    13c8:	7a0b      	ldrb	r3, [r1, #8]
    13ca:	2b00      	cmp	r3, #0
    13cc:	d002      	beq.n	13d4 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    13ce:	2380      	movs	r3, #128	; 0x80
    13d0:	019b      	lsls	r3, r3, #6
    13d2:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    13d4:	2604      	movs	r6, #4
    13d6:	40a6      	lsls	r6, r4
    13d8:	4911      	ldr	r1, [pc, #68]	; (1420 <system_gclk_gen_set_config+0x9c>)
    13da:	4a12      	ldr	r2, [pc, #72]	; (1424 <system_gclk_gen_set_config+0xa0>)
    13dc:	684b      	ldr	r3, [r1, #4]
    13de:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    13e0:	421e      	tst	r6, r3
    13e2:	d1fb      	bne.n	13dc <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    13e4:	4b10      	ldr	r3, [pc, #64]	; (1428 <system_gclk_gen_set_config+0xa4>)
    13e6:	4798      	blx	r3
    13e8:	00a4      	lsls	r4, r4, #2
    13ea:	4b0d      	ldr	r3, [pc, #52]	; (1420 <system_gclk_gen_set_config+0x9c>)
    13ec:	469c      	mov	ip, r3
    13ee:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    13f0:	6a22      	ldr	r2, [r4, #32]
    13f2:	2380      	movs	r3, #128	; 0x80
    13f4:	005b      	lsls	r3, r3, #1
    13f6:	401a      	ands	r2, r3
    13f8:	432a      	orrs	r2, r5
    13fa:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    13fc:	4661      	mov	r1, ip
    13fe:	4a09      	ldr	r2, [pc, #36]	; (1424 <system_gclk_gen_set_config+0xa0>)
    1400:	684b      	ldr	r3, [r1, #4]
    1402:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    1404:	421e      	tst	r6, r3
    1406:	d1fb      	bne.n	1400 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    1408:	4b08      	ldr	r3, [pc, #32]	; (142c <system_gclk_gen_set_config+0xa8>)
    140a:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    140c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    140e:	2200      	movs	r2, #0
    1410:	e7d5      	b.n	13be <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    1412:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1414:	2380      	movs	r3, #128	; 0x80
    1416:	009b      	lsls	r3, r3, #2
    1418:	4318      	orrs	r0, r3
    141a:	4305      	orrs	r5, r0
    141c:	e7d4      	b.n	13c8 <system_gclk_gen_set_config+0x44>
    141e:	46c0      	nop			; (mov r8, r8)
    1420:	40001c00 	.word	0x40001c00
    1424:	000007fc 	.word	0x000007fc
    1428:	000003e1 	.word	0x000003e1
    142c:	00000421 	.word	0x00000421

00001430 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1430:	b510      	push	{r4, lr}
    1432:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1434:	2204      	movs	r2, #4
    1436:	4082      	lsls	r2, r0
    1438:	4809      	ldr	r0, [pc, #36]	; (1460 <system_gclk_gen_enable+0x30>)
    143a:	490a      	ldr	r1, [pc, #40]	; (1464 <system_gclk_gen_enable+0x34>)
    143c:	6843      	ldr	r3, [r0, #4]
    143e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    1440:	421a      	tst	r2, r3
    1442:	d1fb      	bne.n	143c <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    1444:	4b08      	ldr	r3, [pc, #32]	; (1468 <system_gclk_gen_enable+0x38>)
    1446:	4798      	blx	r3
    1448:	00a4      	lsls	r4, r4, #2
    144a:	4b05      	ldr	r3, [pc, #20]	; (1460 <system_gclk_gen_enable+0x30>)
    144c:	469c      	mov	ip, r3
    144e:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    1450:	6a22      	ldr	r2, [r4, #32]
    1452:	2380      	movs	r3, #128	; 0x80
    1454:	005b      	lsls	r3, r3, #1
    1456:	4313      	orrs	r3, r2
    1458:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    145a:	4b04      	ldr	r3, [pc, #16]	; (146c <system_gclk_gen_enable+0x3c>)
    145c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    145e:	bd10      	pop	{r4, pc}
    1460:	40001c00 	.word	0x40001c00
    1464:	000007fc 	.word	0x000007fc
    1468:	000003e1 	.word	0x000003e1
    146c:	00000421 	.word	0x00000421

00001470 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1472:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    1474:	2204      	movs	r2, #4
    1476:	4082      	lsls	r2, r0
    1478:	4812      	ldr	r0, [pc, #72]	; (14c4 <system_gclk_gen_get_hz+0x54>)
    147a:	4913      	ldr	r1, [pc, #76]	; (14c8 <system_gclk_gen_get_hz+0x58>)
    147c:	6843      	ldr	r3, [r0, #4]
    147e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    1480:	421a      	tst	r2, r3
    1482:	d1fb      	bne.n	147c <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    1484:	4b11      	ldr	r3, [pc, #68]	; (14cc <system_gclk_gen_get_hz+0x5c>)
    1486:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    1488:	4f0e      	ldr	r7, [pc, #56]	; (14c4 <system_gclk_gen_get_hz+0x54>)
    148a:	3408      	adds	r4, #8
    148c:	00a4      	lsls	r4, r4, #2
    148e:	59e0      	ldr	r0, [r4, r7]
    1490:	0740      	lsls	r0, r0, #29
    1492:	0f40      	lsrs	r0, r0, #29
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1494:	4b0e      	ldr	r3, [pc, #56]	; (14d0 <system_gclk_gen_get_hz+0x60>)
    1496:	4798      	blx	r3
    1498:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    149a:	59e5      	ldr	r5, [r4, r7]
    149c:	04ed      	lsls	r5, r5, #19
    149e:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    14a0:	59e4      	ldr	r4, [r4, r7]
    14a2:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    14a4:	4b0b      	ldr	r3, [pc, #44]	; (14d4 <system_gclk_gen_get_hz+0x64>)
    14a6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    14a8:	2d00      	cmp	r5, #0
    14aa:	d107      	bne.n	14bc <system_gclk_gen_get_hz+0x4c>
    14ac:	2c01      	cmp	r4, #1
    14ae:	d907      	bls.n	14c0 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    14b0:	0021      	movs	r1, r4
    14b2:	0030      	movs	r0, r6
    14b4:	4b08      	ldr	r3, [pc, #32]	; (14d8 <system_gclk_gen_get_hz+0x68>)
    14b6:	4798      	blx	r3
    14b8:	0006      	movs	r6, r0
    14ba:	e001      	b.n	14c0 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    14bc:	3401      	adds	r4, #1
    14be:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    14c0:	0030      	movs	r0, r6
    14c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    14c4:	40001c00 	.word	0x40001c00
    14c8:	000007fc 	.word	0x000007fc
    14cc:	000003e1 	.word	0x000003e1
    14d0:	00000fd9 	.word	0x00000fd9
    14d4:	00000421 	.word	0x00000421
    14d8:	00001bcd 	.word	0x00001bcd

000014dc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    14dc:	b510      	push	{r4, lr}
    14de:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    14e0:	4b09      	ldr	r3, [pc, #36]	; (1508 <system_gclk_chan_enable+0x2c>)
    14e2:	4798      	blx	r3
    14e4:	00a0      	lsls	r0, r4, #2
    14e6:	4b09      	ldr	r3, [pc, #36]	; (150c <system_gclk_chan_enable+0x30>)
    14e8:	469c      	mov	ip, r3
    14ea:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    14ec:	2280      	movs	r2, #128	; 0x80
    14ee:	5883      	ldr	r3, [r0, r2]
    14f0:	2140      	movs	r1, #64	; 0x40
    14f2:	430b      	orrs	r3, r1
    14f4:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    14f6:	3140      	adds	r1, #64	; 0x40
    14f8:	3a40      	subs	r2, #64	; 0x40
    14fa:	5843      	ldr	r3, [r0, r1]
    14fc:	421a      	tst	r2, r3
    14fe:	d0fc      	beq.n	14fa <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    1500:	4b03      	ldr	r3, [pc, #12]	; (1510 <system_gclk_chan_enable+0x34>)
    1502:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    1504:	bd10      	pop	{r4, pc}
    1506:	46c0      	nop			; (mov r8, r8)
    1508:	000003e1 	.word	0x000003e1
    150c:	40001c00 	.word	0x40001c00
    1510:	00000421 	.word	0x00000421

00001514 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1514:	b510      	push	{r4, lr}
    1516:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1518:	4b09      	ldr	r3, [pc, #36]	; (1540 <system_gclk_chan_disable+0x2c>)
    151a:	4798      	blx	r3
    151c:	00a0      	lsls	r0, r4, #2
    151e:	4b09      	ldr	r3, [pc, #36]	; (1544 <system_gclk_chan_disable+0x30>)
    1520:	469c      	mov	ip, r3
    1522:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    1524:	2280      	movs	r2, #128	; 0x80
    1526:	5883      	ldr	r3, [r0, r2]
    1528:	2140      	movs	r1, #64	; 0x40
    152a:	438b      	bics	r3, r1
    152c:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    152e:	3140      	adds	r1, #64	; 0x40
    1530:	3a40      	subs	r2, #64	; 0x40
    1532:	5843      	ldr	r3, [r0, r1]
    1534:	421a      	tst	r2, r3
    1536:	d1fc      	bne.n	1532 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    1538:	4b03      	ldr	r3, [pc, #12]	; (1548 <system_gclk_chan_disable+0x34>)
    153a:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    153c:	bd10      	pop	{r4, pc}
    153e:	46c0      	nop			; (mov r8, r8)
    1540:	000003e1 	.word	0x000003e1
    1544:	40001c00 	.word	0x40001c00
    1548:	00000421 	.word	0x00000421

0000154c <system_gclk_chan_set_config>:
{
    154c:	b570      	push	{r4, r5, r6, lr}
    154e:	0004      	movs	r4, r0
    1550:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    1552:	4b05      	ldr	r3, [pc, #20]	; (1568 <system_gclk_chan_set_config+0x1c>)
    1554:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    1556:	782a      	ldrb	r2, [r5, #0]
    1558:	230f      	movs	r3, #15
    155a:	4013      	ands	r3, r2
    155c:	3420      	adds	r4, #32
    155e:	00a4      	lsls	r4, r4, #2
    1560:	4a02      	ldr	r2, [pc, #8]	; (156c <system_gclk_chan_set_config+0x20>)
    1562:	50a3      	str	r3, [r4, r2]
}
    1564:	bd70      	pop	{r4, r5, r6, pc}
    1566:	46c0      	nop			; (mov r8, r8)
    1568:	00001515 	.word	0x00001515
    156c:	40001c00 	.word	0x40001c00

00001570 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1570:	b510      	push	{r4, lr}
    1572:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1574:	4b06      	ldr	r3, [pc, #24]	; (1590 <system_gclk_chan_get_hz+0x20>)
    1576:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    1578:	3420      	adds	r4, #32
    157a:	00a4      	lsls	r4, r4, #2
    157c:	4b05      	ldr	r3, [pc, #20]	; (1594 <system_gclk_chan_get_hz+0x24>)
    157e:	58e4      	ldr	r4, [r4, r3]
    1580:	0724      	lsls	r4, r4, #28
    1582:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1584:	4b04      	ldr	r3, [pc, #16]	; (1598 <system_gclk_chan_get_hz+0x28>)
    1586:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1588:	0020      	movs	r0, r4
    158a:	4b04      	ldr	r3, [pc, #16]	; (159c <system_gclk_chan_get_hz+0x2c>)
    158c:	4798      	blx	r3
}
    158e:	bd10      	pop	{r4, pc}
    1590:	000003e1 	.word	0x000003e1
    1594:	40001c00 	.word	0x40001c00
    1598:	00000421 	.word	0x00000421
    159c:	00001471 	.word	0x00001471

000015a0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    15a0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    15a2:	78d3      	ldrb	r3, [r2, #3]
    15a4:	2b00      	cmp	r3, #0
    15a6:	d135      	bne.n	1614 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    15a8:	7813      	ldrb	r3, [r2, #0]
    15aa:	2b80      	cmp	r3, #128	; 0x80
    15ac:	d029      	beq.n	1602 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    15ae:	061b      	lsls	r3, r3, #24
    15b0:	2480      	movs	r4, #128	; 0x80
    15b2:	0264      	lsls	r4, r4, #9
    15b4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    15b6:	7854      	ldrb	r4, [r2, #1]
    15b8:	2502      	movs	r5, #2
    15ba:	43ac      	bics	r4, r5
    15bc:	d106      	bne.n	15cc <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    15be:	7894      	ldrb	r4, [r2, #2]
    15c0:	2c00      	cmp	r4, #0
    15c2:	d120      	bne.n	1606 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    15c4:	2480      	movs	r4, #128	; 0x80
    15c6:	02a4      	lsls	r4, r4, #10
    15c8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    15ca:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    15cc:	7854      	ldrb	r4, [r2, #1]
    15ce:	3c01      	subs	r4, #1
    15d0:	2c01      	cmp	r4, #1
    15d2:	d91c      	bls.n	160e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    15d4:	040d      	lsls	r5, r1, #16
    15d6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    15d8:	24a0      	movs	r4, #160	; 0xa0
    15da:	05e4      	lsls	r4, r4, #23
    15dc:	432c      	orrs	r4, r5
    15de:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15e0:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    15e2:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    15e4:	24d0      	movs	r4, #208	; 0xd0
    15e6:	0624      	lsls	r4, r4, #24
    15e8:	432c      	orrs	r4, r5
    15ea:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15ec:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    15ee:	78d4      	ldrb	r4, [r2, #3]
    15f0:	2c00      	cmp	r4, #0
    15f2:	d122      	bne.n	163a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    15f4:	035b      	lsls	r3, r3, #13
    15f6:	d51c      	bpl.n	1632 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    15f8:	7893      	ldrb	r3, [r2, #2]
    15fa:	2b01      	cmp	r3, #1
    15fc:	d01e      	beq.n	163c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    15fe:	6141      	str	r1, [r0, #20]
    1600:	e017      	b.n	1632 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1602:	2300      	movs	r3, #0
    1604:	e7d7      	b.n	15b6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1606:	24c0      	movs	r4, #192	; 0xc0
    1608:	02e4      	lsls	r4, r4, #11
    160a:	4323      	orrs	r3, r4
    160c:	e7dd      	b.n	15ca <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    160e:	4c0d      	ldr	r4, [pc, #52]	; (1644 <_system_pinmux_config+0xa4>)
    1610:	4023      	ands	r3, r4
    1612:	e7df      	b.n	15d4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1614:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1616:	040c      	lsls	r4, r1, #16
    1618:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    161a:	23a0      	movs	r3, #160	; 0xa0
    161c:	05db      	lsls	r3, r3, #23
    161e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1620:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1622:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1624:	23d0      	movs	r3, #208	; 0xd0
    1626:	061b      	lsls	r3, r3, #24
    1628:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    162a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    162c:	78d3      	ldrb	r3, [r2, #3]
    162e:	2b00      	cmp	r3, #0
    1630:	d103      	bne.n	163a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1632:	7853      	ldrb	r3, [r2, #1]
    1634:	3b01      	subs	r3, #1
    1636:	2b01      	cmp	r3, #1
    1638:	d902      	bls.n	1640 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    163a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    163c:	6181      	str	r1, [r0, #24]
    163e:	e7f8      	b.n	1632 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1640:	6081      	str	r1, [r0, #8]
}
    1642:	e7fa      	b.n	163a <_system_pinmux_config+0x9a>
    1644:	fffbffff 	.word	0xfffbffff

00001648 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1648:	b510      	push	{r4, lr}
    164a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    164c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    164e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1650:	2900      	cmp	r1, #0
    1652:	d105      	bne.n	1660 <system_pinmux_pin_set_config+0x18>
		return &(ports[port_index]->Group[group_index]);
    1654:	0943      	lsrs	r3, r0, #5
    1656:	01db      	lsls	r3, r3, #7
    1658:	2182      	movs	r1, #130	; 0x82
    165a:	05c9      	lsls	r1, r1, #23
    165c:	468c      	mov	ip, r1
    165e:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1660:	241f      	movs	r4, #31
    1662:	4020      	ands	r0, r4
    1664:	2101      	movs	r1, #1
    1666:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1668:	0018      	movs	r0, r3
    166a:	4b01      	ldr	r3, [pc, #4]	; (1670 <system_pinmux_pin_set_config+0x28>)
    166c:	4798      	blx	r3
}
    166e:	bd10      	pop	{r4, pc}
    1670:	000015a1 	.word	0x000015a1

00001674 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1674:	4770      	bx	lr
	...

00001678 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1678:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    167a:	4b05      	ldr	r3, [pc, #20]	; (1690 <system_init+0x18>)
    167c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    167e:	4b05      	ldr	r3, [pc, #20]	; (1694 <system_init+0x1c>)
    1680:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1682:	4b05      	ldr	r3, [pc, #20]	; (1698 <system_init+0x20>)
    1684:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1686:	4b05      	ldr	r3, [pc, #20]	; (169c <system_init+0x24>)
    1688:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    168a:	4b05      	ldr	r3, [pc, #20]	; (16a0 <system_init+0x28>)
    168c:	4798      	blx	r3
}
    168e:	bd10      	pop	{r4, pc}
    1690:	00001225 	.word	0x00001225
    1694:	00000451 	.word	0x00000451
    1698:	000003c1 	.word	0x000003c1
    169c:	00001675 	.word	0x00001675
    16a0:	00001675 	.word	0x00001675

000016a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    16a4:	e7fe      	b.n	16a4 <Dummy_Handler>
	...

000016a8 <Reset_Handler>:
{
    16a8:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    16aa:	4a17      	ldr	r2, [pc, #92]	; (1708 <Reset_Handler+0x60>)
    16ac:	4b17      	ldr	r3, [pc, #92]	; (170c <Reset_Handler+0x64>)
    16ae:	429a      	cmp	r2, r3
    16b0:	d011      	beq.n	16d6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    16b2:	001a      	movs	r2, r3
    16b4:	4b16      	ldr	r3, [pc, #88]	; (1710 <Reset_Handler+0x68>)
    16b6:	429a      	cmp	r2, r3
    16b8:	d20d      	bcs.n	16d6 <Reset_Handler+0x2e>
    16ba:	4a16      	ldr	r2, [pc, #88]	; (1714 <Reset_Handler+0x6c>)
    16bc:	3303      	adds	r3, #3
    16be:	1a9b      	subs	r3, r3, r2
    16c0:	089b      	lsrs	r3, r3, #2
    16c2:	3301      	adds	r3, #1
    16c4:	009b      	lsls	r3, r3, #2
    16c6:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    16c8:	4810      	ldr	r0, [pc, #64]	; (170c <Reset_Handler+0x64>)
    16ca:	490f      	ldr	r1, [pc, #60]	; (1708 <Reset_Handler+0x60>)
    16cc:	588c      	ldr	r4, [r1, r2]
    16ce:	5084      	str	r4, [r0, r2]
    16d0:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    16d2:	429a      	cmp	r2, r3
    16d4:	d1fa      	bne.n	16cc <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    16d6:	4a10      	ldr	r2, [pc, #64]	; (1718 <Reset_Handler+0x70>)
    16d8:	4b10      	ldr	r3, [pc, #64]	; (171c <Reset_Handler+0x74>)
    16da:	429a      	cmp	r2, r3
    16dc:	d20a      	bcs.n	16f4 <Reset_Handler+0x4c>
    16de:	43d3      	mvns	r3, r2
    16e0:	490e      	ldr	r1, [pc, #56]	; (171c <Reset_Handler+0x74>)
    16e2:	185b      	adds	r3, r3, r1
    16e4:	2103      	movs	r1, #3
    16e6:	438b      	bics	r3, r1
    16e8:	3304      	adds	r3, #4
    16ea:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    16ec:	2100      	movs	r1, #0
    16ee:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    16f0:	4293      	cmp	r3, r2
    16f2:	d1fc      	bne.n	16ee <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    16f4:	4a0a      	ldr	r2, [pc, #40]	; (1720 <Reset_Handler+0x78>)
    16f6:	21ff      	movs	r1, #255	; 0xff
    16f8:	4b0a      	ldr	r3, [pc, #40]	; (1724 <Reset_Handler+0x7c>)
    16fa:	438b      	bics	r3, r1
    16fc:	6093      	str	r3, [r2, #8]
        __libc_init_array();
    16fe:	4b0a      	ldr	r3, [pc, #40]	; (1728 <Reset_Handler+0x80>)
    1700:	4798      	blx	r3
        main();
    1702:	4b0a      	ldr	r3, [pc, #40]	; (172c <Reset_Handler+0x84>)
    1704:	4798      	blx	r3
    1706:	e7fe      	b.n	1706 <Reset_Handler+0x5e>
    1708:	00002f8c 	.word	0x00002f8c
    170c:	20000000 	.word	0x20000000
    1710:	2000007c 	.word	0x2000007c
    1714:	20000004 	.word	0x20000004
    1718:	2000007c 	.word	0x2000007c
    171c:	20000200 	.word	0x20000200
    1720:	e000ed00 	.word	0xe000ed00
    1724:	00000000 	.word	0x00000000
    1728:	00001d39 	.word	0x00001d39
    172c:	00001a75 	.word	0x00001a75

00001730 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    1730:	b5f0      	push	{r4, r5, r6, r7, lr}
    1732:	46c6      	mov	lr, r8
    1734:	b500      	push	{lr}
    1736:	000c      	movs	r4, r1
    1738:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    173a:	2800      	cmp	r0, #0
    173c:	d10f      	bne.n	175e <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    173e:	2a00      	cmp	r2, #0
    1740:	dd11      	ble.n	1766 <_read+0x36>
    1742:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1744:	4e09      	ldr	r6, [pc, #36]	; (176c <_read+0x3c>)
    1746:	4d0a      	ldr	r5, [pc, #40]	; (1770 <_read+0x40>)
    1748:	6830      	ldr	r0, [r6, #0]
    174a:	0021      	movs	r1, r4
    174c:	682b      	ldr	r3, [r5, #0]
    174e:	4798      	blx	r3
		ptr++;
    1750:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    1752:	42bc      	cmp	r4, r7
    1754:	d1f8      	bne.n	1748 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    1756:	4640      	mov	r0, r8
    1758:	bc04      	pop	{r2}
    175a:	4690      	mov	r8, r2
    175c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    175e:	2301      	movs	r3, #1
    1760:	425b      	negs	r3, r3
    1762:	4698      	mov	r8, r3
    1764:	e7f7      	b.n	1756 <_read+0x26>
	for (; len > 0; --len) {
    1766:	4680      	mov	r8, r0
    1768:	e7f5      	b.n	1756 <_read+0x26>
    176a:	46c0      	nop			; (mov r8, r8)
    176c:	200001e4 	.word	0x200001e4
    1770:	200001dc 	.word	0x200001dc

00001774 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1774:	b5f0      	push	{r4, r5, r6, r7, lr}
    1776:	46c6      	mov	lr, r8
    1778:	b500      	push	{lr}
    177a:	000e      	movs	r6, r1
    177c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    177e:	3801      	subs	r0, #1
    1780:	2802      	cmp	r0, #2
    1782:	d810      	bhi.n	17a6 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1784:	2a00      	cmp	r2, #0
    1786:	d011      	beq.n	17ac <_write+0x38>
    1788:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    178a:	4b0c      	ldr	r3, [pc, #48]	; (17bc <_write+0x48>)
    178c:	4698      	mov	r8, r3
    178e:	4f0c      	ldr	r7, [pc, #48]	; (17c0 <_write+0x4c>)
    1790:	4643      	mov	r3, r8
    1792:	6818      	ldr	r0, [r3, #0]
    1794:	5d31      	ldrb	r1, [r6, r4]
    1796:	683b      	ldr	r3, [r7, #0]
    1798:	4798      	blx	r3
    179a:	2800      	cmp	r0, #0
    179c:	db08      	blt.n	17b0 <_write+0x3c>
			return -1;
		}
		++nChars;
    179e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    17a0:	42a5      	cmp	r5, r4
    17a2:	d1f5      	bne.n	1790 <_write+0x1c>
    17a4:	e006      	b.n	17b4 <_write+0x40>
		return -1;
    17a6:	2401      	movs	r4, #1
    17a8:	4264      	negs	r4, r4
    17aa:	e003      	b.n	17b4 <_write+0x40>
	for (; len != 0; --len) {
    17ac:	0014      	movs	r4, r2
    17ae:	e001      	b.n	17b4 <_write+0x40>
			return -1;
    17b0:	2401      	movs	r4, #1
    17b2:	4264      	negs	r4, r4
	}
	return nChars;
}
    17b4:	0020      	movs	r0, r4
    17b6:	bc04      	pop	{r2}
    17b8:	4690      	mov	r8, r2
    17ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    17bc:	200001e4 	.word	0x200001e4
    17c0:	200001e0 	.word	0x200001e0

000017c4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    17c4:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    17c6:	4a06      	ldr	r2, [pc, #24]	; (17e0 <_sbrk+0x1c>)
    17c8:	6812      	ldr	r2, [r2, #0]
    17ca:	2a00      	cmp	r2, #0
    17cc:	d004      	beq.n	17d8 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    17ce:	4a04      	ldr	r2, [pc, #16]	; (17e0 <_sbrk+0x1c>)
    17d0:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    17d2:	18c3      	adds	r3, r0, r3
    17d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    17d6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    17d8:	4902      	ldr	r1, [pc, #8]	; (17e4 <_sbrk+0x20>)
    17da:	4a01      	ldr	r2, [pc, #4]	; (17e0 <_sbrk+0x1c>)
    17dc:	6011      	str	r1, [r2, #0]
    17de:	e7f6      	b.n	17ce <_sbrk+0xa>
    17e0:	200000c8 	.word	0x200000c8
    17e4:	20002200 	.word	0x20002200

000017e8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    17e8:	2001      	movs	r0, #1
    17ea:	4240      	negs	r0, r0
    17ec:	4770      	bx	lr

000017ee <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    17ee:	2380      	movs	r3, #128	; 0x80
    17f0:	019b      	lsls	r3, r3, #6
    17f2:	604b      	str	r3, [r1, #4]

	return 0;
}
    17f4:	2000      	movs	r0, #0
    17f6:	4770      	bx	lr

000017f8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    17f8:	2001      	movs	r0, #1
    17fa:	4770      	bx	lr

000017fc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    17fc:	2000      	movs	r0, #0
    17fe:	4770      	bx	lr

00001800 <usart_write_callback>:


void usart_write_callback(struct usart_module *const usart_module)
{
	//port_pin_toggle_output_level(LED_0_PIN);
}
    1800:	4770      	bx	lr
	...

00001804 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1804:	b570      	push	{r4, r5, r6, lr}
    1806:	b082      	sub	sp, #8
    1808:	0005      	movs	r5, r0
    180a:	000e      	movs	r6, r1
	uint16_t temp = 0;
    180c:	2200      	movs	r2, #0
    180e:	466b      	mov	r3, sp
    1810:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1812:	4c06      	ldr	r4, [pc, #24]	; (182c <usart_serial_getchar+0x28>)
    1814:	466b      	mov	r3, sp
    1816:	1d99      	adds	r1, r3, #6
    1818:	0028      	movs	r0, r5
    181a:	47a0      	blx	r4
    181c:	2800      	cmp	r0, #0
    181e:	d1f9      	bne.n	1814 <usart_serial_getchar+0x10>

	*c = temp;
    1820:	466b      	mov	r3, sp
    1822:	3306      	adds	r3, #6
    1824:	881b      	ldrh	r3, [r3, #0]
    1826:	7033      	strb	r3, [r6, #0]
}
    1828:	b002      	add	sp, #8
    182a:	bd70      	pop	{r4, r5, r6, pc}
    182c:	00000d45 	.word	0x00000d45

00001830 <usart_serial_putchar>:
{
    1830:	b570      	push	{r4, r5, r6, lr}
    1832:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1834:	b28c      	uxth	r4, r1
    1836:	4e03      	ldr	r6, [pc, #12]	; (1844 <usart_serial_putchar+0x14>)
    1838:	0021      	movs	r1, r4
    183a:	0028      	movs	r0, r5
    183c:	47b0      	blx	r6
    183e:	2800      	cmp	r0, #0
    1840:	d1fa      	bne.n	1838 <usart_serial_putchar+0x8>
}
    1842:	bd70      	pop	{r4, r5, r6, pc}
    1844:	00000d19 	.word	0x00000d19

00001848 <clear_rx_buffer>:
void clear_rx_buffer(){
    1848:	b510      	push	{r4, lr}
	memset(rx_buffer, 0, MAX_RX_BUFFER_LENGTH);
    184a:	2214      	movs	r2, #20
    184c:	2100      	movs	r1, #0
    184e:	4802      	ldr	r0, [pc, #8]	; (1858 <clear_rx_buffer+0x10>)
    1850:	4b02      	ldr	r3, [pc, #8]	; (185c <clear_rx_buffer+0x14>)
    1852:	4798      	blx	r3
}
    1854:	bd10      	pop	{r4, pc}
    1856:	46c0      	nop			; (mov r8, r8)
    1858:	200001e8 	.word	0x200001e8
    185c:	00001d81 	.word	0x00001d81

00001860 <clear_cmd_buffer>:
void clear_cmd_buffer(){
    1860:	b510      	push	{r4, lr}
	memset(command_buffer, 0, MAX_CMD_LENGTH);
    1862:	2264      	movs	r2, #100	; 0x64
    1864:	2100      	movs	r1, #0
    1866:	4802      	ldr	r0, [pc, #8]	; (1870 <clear_cmd_buffer+0x10>)
    1868:	4b02      	ldr	r3, [pc, #8]	; (1874 <clear_cmd_buffer+0x14>)
    186a:	4798      	blx	r3
}
    186c:	bd10      	pop	{r4, pc}
    186e:	46c0      	nop			; (mov r8, r8)
    1870:	20000108 	.word	0x20000108
    1874:	00001d81 	.word	0x00001d81

00001878 <usart_read_callback>:
{
    1878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    187a:	46de      	mov	lr, fp
    187c:	4647      	mov	r7, r8
    187e:	b580      	push	{r7, lr}
	for (int i = 0; i < MAX_RX_BUFFER_LENGTH; i++) {
    1880:	2700      	movs	r7, #0
		uint8_t data = rx_buffer[i];
    1882:	4b2d      	ldr	r3, [pc, #180]	; (1938 <usart_read_callback+0xc0>)
    1884:	469b      	mov	fp, r3
		printf("_%X_", data);
    1886:	4b2d      	ldr	r3, [pc, #180]	; (193c <usart_read_callback+0xc4>)
    1888:	4698      	mov	r8, r3
    188a:	e015      	b.n	18b8 <usart_read_callback+0x40>
		if (data == 0x68 && buffer_index < 9) {
    188c:	4b2c      	ldr	r3, [pc, #176]	; (1940 <usart_read_callback+0xc8>)
    188e:	781b      	ldrb	r3, [r3, #0]
    1890:	2b08      	cmp	r3, #8
    1892:	d819      	bhi.n	18c8 <usart_read_callback+0x50>
			cmd_start = true; 
    1894:	2201      	movs	r2, #1
    1896:	4b2b      	ldr	r3, [pc, #172]	; (1944 <usart_read_callback+0xcc>)
    1898:	701a      	strb	r2, [r3, #0]
			cmd_received = false; 
    189a:	2500      	movs	r5, #0
    189c:	4b2a      	ldr	r3, [pc, #168]	; (1948 <usart_read_callback+0xd0>)
    189e:	701d      	strb	r5, [r3, #0]
			clear_cmd_buffer();
    18a0:	4b2a      	ldr	r3, [pc, #168]	; (194c <usart_read_callback+0xd4>)
    18a2:	4798      	blx	r3
			buffer_index=0;
    18a4:	4b26      	ldr	r3, [pc, #152]	; (1940 <usart_read_callback+0xc8>)
    18a6:	701d      	strb	r5, [r3, #0]
    18a8:	e00e      	b.n	18c8 <usart_read_callback+0x50>
		if (cmd_received == true) {
    18aa:	4b27      	ldr	r3, [pc, #156]	; (1948 <usart_read_callback+0xd0>)
    18ac:	781b      	ldrb	r3, [r3, #0]
    18ae:	2b01      	cmp	r3, #1
    18b0:	d021      	beq.n	18f6 <usart_read_callback+0x7e>
	for (int i = 0; i < MAX_RX_BUFFER_LENGTH; i++) {
    18b2:	3701      	adds	r7, #1
    18b4:	2f14      	cmp	r7, #20
    18b6:	d039      	beq.n	192c <usart_read_callback+0xb4>
		uint8_t data = rx_buffer[i];
    18b8:	465b      	mov	r3, fp
    18ba:	5ddc      	ldrb	r4, [r3, r7]
    18bc:	b2e4      	uxtb	r4, r4
		printf("_%X_", data);
    18be:	0021      	movs	r1, r4
    18c0:	4823      	ldr	r0, [pc, #140]	; (1950 <usart_read_callback+0xd8>)
    18c2:	47c0      	blx	r8
		if (data == 0x68 && buffer_index < 9) {
    18c4:	2c68      	cmp	r4, #104	; 0x68
    18c6:	d0e1      	beq.n	188c <usart_read_callback+0x14>
		if (cmd_start) { 
    18c8:	4b1e      	ldr	r3, [pc, #120]	; (1944 <usart_read_callback+0xcc>)
    18ca:	781b      	ldrb	r3, [r3, #0]
    18cc:	2b00      	cmp	r3, #0
    18ce:	d0ec      	beq.n	18aa <usart_read_callback+0x32>
			command_buffer[buffer_index++] = data;
    18d0:	491b      	ldr	r1, [pc, #108]	; (1940 <usart_read_callback+0xc8>)
    18d2:	780a      	ldrb	r2, [r1, #0]
    18d4:	1c53      	adds	r3, r2, #1
    18d6:	b2db      	uxtb	r3, r3
    18d8:	700b      	strb	r3, [r1, #0]
    18da:	491e      	ldr	r1, [pc, #120]	; (1954 <usart_read_callback+0xdc>)
    18dc:	548c      	strb	r4, [r1, r2]
			if (data == 0x16) {
    18de:	2c16      	cmp	r4, #22
    18e0:	d1e3      	bne.n	18aa <usart_read_callback+0x32>
				cmd_start = false;
    18e2:	2200      	movs	r2, #0
    18e4:	4917      	ldr	r1, [pc, #92]	; (1944 <usart_read_callback+0xcc>)
    18e6:	700a      	strb	r2, [r1, #0]
				cmd_received = true;
    18e8:	2001      	movs	r0, #1
    18ea:	4917      	ldr	r1, [pc, #92]	; (1948 <usart_read_callback+0xd0>)
    18ec:	7008      	strb	r0, [r1, #0]
				cmd_length = buffer_index;
    18ee:	491a      	ldr	r1, [pc, #104]	; (1958 <usart_read_callback+0xe0>)
    18f0:	700b      	strb	r3, [r1, #0]
				buffer_index=0;
    18f2:	4b13      	ldr	r3, [pc, #76]	; (1940 <usart_read_callback+0xc8>)
    18f4:	701a      	strb	r2, [r3, #0]
			printf("\n\n");
    18f6:	4819      	ldr	r0, [pc, #100]	; (195c <usart_read_callback+0xe4>)
    18f8:	4b19      	ldr	r3, [pc, #100]	; (1960 <usart_read_callback+0xe8>)
    18fa:	4798      	blx	r3
			for (int i = 0; i < cmd_length; i++) {
    18fc:	4b16      	ldr	r3, [pc, #88]	; (1958 <usart_read_callback+0xe0>)
    18fe:	781b      	ldrb	r3, [r3, #0]
    1900:	2b00      	cmp	r3, #0
    1902:	dd0a      	ble.n	191a <usart_read_callback+0xa2>
    1904:	2400      	movs	r4, #0
				printf("%X ", command_buffer[i]);
    1906:	4e13      	ldr	r6, [pc, #76]	; (1954 <usart_read_callback+0xdc>)
    1908:	4d0c      	ldr	r5, [pc, #48]	; (193c <usart_read_callback+0xc4>)
    190a:	5da1      	ldrb	r1, [r4, r6]
    190c:	4815      	ldr	r0, [pc, #84]	; (1964 <usart_read_callback+0xec>)
    190e:	47a8      	blx	r5
			for (int i = 0; i < cmd_length; i++) {
    1910:	3401      	adds	r4, #1
    1912:	4b11      	ldr	r3, [pc, #68]	; (1958 <usart_read_callback+0xe0>)
    1914:	781b      	ldrb	r3, [r3, #0]
    1916:	42a3      	cmp	r3, r4
    1918:	dcf7      	bgt.n	190a <usart_read_callback+0x92>
			printf("\n\n");
    191a:	4810      	ldr	r0, [pc, #64]	; (195c <usart_read_callback+0xe4>)
    191c:	4b10      	ldr	r3, [pc, #64]	; (1960 <usart_read_callback+0xe8>)
    191e:	4798      	blx	r3
			cmd_received = false;
    1920:	2200      	movs	r2, #0
    1922:	4b09      	ldr	r3, [pc, #36]	; (1948 <usart_read_callback+0xd0>)
    1924:	701a      	strb	r2, [r3, #0]
			clear_cmd_buffer();
    1926:	4b09      	ldr	r3, [pc, #36]	; (194c <usart_read_callback+0xd4>)
    1928:	4798      	blx	r3
    192a:	e7c2      	b.n	18b2 <usart_read_callback+0x3a>
	clear_rx_buffer();
    192c:	4b0e      	ldr	r3, [pc, #56]	; (1968 <usart_read_callback+0xf0>)
    192e:	4798      	blx	r3
}
    1930:	bc0c      	pop	{r2, r3}
    1932:	4690      	mov	r8, r2
    1934:	469b      	mov	fp, r3
    1936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1938:	200001e8 	.word	0x200001e8
    193c:	00001d91 	.word	0x00001d91
    1940:	200000cc 	.word	0x200000cc
    1944:	20000106 	.word	0x20000106
    1948:	20000105 	.word	0x20000105
    194c:	00001861 	.word	0x00001861
    1950:	00002ec4 	.word	0x00002ec4
    1954:	20000108 	.word	0x20000108
    1958:	20000104 	.word	0x20000104
    195c:	00002ecc 	.word	0x00002ecc
    1960:	00001e85 	.word	0x00001e85
    1964:	00002ed0 	.word	0x00002ed0
    1968:	00001849 	.word	0x00001849

0000196c <configure_usart_callbacks>:
//#define EXT1_UART_SERCOM_PINMUX_PAD3  PINMUX_UNUSED
//#define EXT1_UART_SERCOM_DMAC_ID_TX   SERCOM3_DMAC_ID_TX
//#define EXT1_UART_SERCOM_DMAC_ID_RX   SERCOM3_DMAC_ID_RX

void configure_usart_callbacks(void)
{
    196c:	b570      	push	{r4, r5, r6, lr}
	usart_register_callback(&usart_instance,
    196e:	4c08      	ldr	r4, [pc, #32]	; (1990 <configure_usart_callbacks+0x24>)
    1970:	2200      	movs	r2, #0
    1972:	4908      	ldr	r1, [pc, #32]	; (1994 <configure_usart_callbacks+0x28>)
    1974:	0020      	movs	r0, r4
    1976:	4d08      	ldr	r5, [pc, #32]	; (1998 <configure_usart_callbacks+0x2c>)
    1978:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    197a:	2201      	movs	r2, #1
    197c:	4907      	ldr	r1, [pc, #28]	; (199c <configure_usart_callbacks+0x30>)
    197e:	0020      	movs	r0, r4
    1980:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1982:	2231      	movs	r2, #49	; 0x31
    1984:	5ca3      	ldrb	r3, [r4, r2]
    1986:	2103      	movs	r1, #3
    1988:	430b      	orrs	r3, r1
    198a:	54a3      	strb	r3, [r4, r2]
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    198c:	bd70      	pop	{r4, r5, r6, pc}
    198e:	46c0      	nop			; (mov r8, r8)
    1990:	2000016c 	.word	0x2000016c
    1994:	00001801 	.word	0x00001801
    1998:	00000e05 	.word	0x00000e05
    199c:	00001879 	.word	0x00001879

000019a0 <configure_usart>:


void configure_usart(void)
{
    19a0:	b530      	push	{r4, r5, lr}
    19a2:	b093      	sub	sp, #76	; 0x4c
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    19a4:	2380      	movs	r3, #128	; 0x80
    19a6:	05db      	lsls	r3, r3, #23
    19a8:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    19aa:	2300      	movs	r3, #0
    19ac:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    19ae:	22ff      	movs	r2, #255	; 0xff
    19b0:	4669      	mov	r1, sp
    19b2:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    19b4:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    19b6:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    19b8:	2201      	movs	r2, #1
    19ba:	212c      	movs	r1, #44	; 0x2c
    19bc:	4668      	mov	r0, sp
    19be:	5442      	strb	r2, [r0, r1]
	config->transmitter_enable = true;
    19c0:	3101      	adds	r1, #1
    19c2:	5442      	strb	r2, [r0, r1]
	config->clock_polarity_inverted = false;
    19c4:	322d      	adds	r2, #45	; 0x2d
    19c6:	5483      	strb	r3, [r0, r2]
	config->use_external_clock = false;
    19c8:	3201      	adds	r2, #1
    19ca:	5483      	strb	r3, [r0, r2]
	config->ext_clock_freq   = 0;
    19cc:	930c      	str	r3, [sp, #48]	; 0x30
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    19ce:	3205      	adds	r2, #5
    19d0:	5483      	strb	r3, [r0, r2]
	config->generator_source = GCLK_GENERATOR_0;
    19d2:	3201      	adds	r2, #1
    19d4:	5483      	strb	r3, [r0, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    19d6:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    19d8:	2200      	movs	r2, #0
    19da:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    19dc:	76c2      	strb	r2, [r0, #27]
#endif

#ifdef FEATURE_USART_LIN_MASTER
	config->lin_node = LIN_INVALID_MODE;
    19de:	9307      	str	r3, [sp, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    19e0:	8403      	strh	r3, [r0, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    19e2:	8443      	strh	r3, [r0, #34]	; 0x22
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    19e4:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    19e6:	2324      	movs	r3, #36	; 0x24
    19e8:	54c2      	strb	r2, [r0, r3]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    19ea:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    19ec:	2313      	movs	r3, #19
    19ee:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    19f0:	3313      	adds	r3, #19
    19f2:	54c2      	strb	r2, [r0, r3]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    19f4:	3b01      	subs	r3, #1
    19f6:	54c2      	strb	r2, [r0, r3]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate = 19200;
    19f8:	2396      	movs	r3, #150	; 0x96
    19fa:	01db      	lsls	r3, r3, #7
    19fc:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.mux_setting = EXT1_UART_SERCOM_MUX_SETTING;
    19fe:	2380      	movs	r3, #128	; 0x80
    1a00:	035b      	lsls	r3, r3, #13
    1a02:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EXT1_UART_SERCOM_PINMUX_PAD0;
    1a04:	4b13      	ldr	r3, [pc, #76]	; (1a54 <configure_usart+0xb4>)
    1a06:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad1 = EXT1_UART_SERCOM_PINMUX_PAD1;
    1a08:	4b13      	ldr	r3, [pc, #76]	; (1a58 <configure_usart+0xb8>)
    1a0a:	930f      	str	r3, [sp, #60]	; 0x3c
	config_usart.pinmux_pad2 = EXT1_UART_SERCOM_PINMUX_PAD2;
    1a0c:	2301      	movs	r3, #1
    1a0e:	425b      	negs	r3, r3
    1a10:	9310      	str	r3, [sp, #64]	; 0x40
	config_usart.pinmux_pad3 = EXT1_UART_SERCOM_PINMUX_PAD3;
    1a12:	9311      	str	r3, [sp, #68]	; 0x44
	while (usart_init(&usart_instance, EXT1_UART_MODULE, &config_usart) != STATUS_OK) {
    1a14:	4d11      	ldr	r5, [pc, #68]	; (1a5c <configure_usart+0xbc>)
    1a16:	4c12      	ldr	r4, [pc, #72]	; (1a60 <configure_usart+0xc0>)
    1a18:	466a      	mov	r2, sp
    1a1a:	4912      	ldr	r1, [pc, #72]	; (1a64 <configure_usart+0xc4>)
    1a1c:	0028      	movs	r0, r5
    1a1e:	47a0      	blx	r4
    1a20:	2800      	cmp	r0, #0
    1a22:	d1f9      	bne.n	1a18 <configure_usart+0x78>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a24:	4d0d      	ldr	r5, [pc, #52]	; (1a5c <configure_usart+0xbc>)
    1a26:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1a28:	0020      	movs	r0, r4
    1a2a:	4b0f      	ldr	r3, [pc, #60]	; (1a68 <configure_usart+0xc8>)
    1a2c:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1a2e:	231f      	movs	r3, #31
    1a30:	4018      	ands	r0, r3
    1a32:	3b1e      	subs	r3, #30
    1a34:	4083      	lsls	r3, r0
    1a36:	4a0d      	ldr	r2, [pc, #52]	; (1a6c <configure_usart+0xcc>)
    1a38:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1a3a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1a3c:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    1a3e:	2b00      	cmp	r3, #0
    1a40:	d1fc      	bne.n	1a3c <configure_usart+0x9c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1a42:	6823      	ldr	r3, [r4, #0]
    1a44:	2202      	movs	r2, #2
    1a46:	4313      	orrs	r3, r2
    1a48:	6023      	str	r3, [r4, #0]
	}
	usart_enable(&usart_instance);
	configure_usart_callbacks();
    1a4a:	4b09      	ldr	r3, [pc, #36]	; (1a70 <configure_usart+0xd0>)
    1a4c:	4798      	blx	r3
}
    1a4e:	b013      	add	sp, #76	; 0x4c
    1a50:	bd30      	pop	{r4, r5, pc}
    1a52:	46c0      	nop			; (mov r8, r8)
    1a54:	00160002 	.word	0x00160002
    1a58:	00170002 	.word	0x00170002
    1a5c:	2000016c 	.word	0x2000016c
    1a60:	00000971 	.word	0x00000971
    1a64:	42001000 	.word	0x42001000
    1a68:	000008e1 	.word	0x000008e1
    1a6c:	e000e100 	.word	0xe000e100
    1a70:	0000196d 	.word	0x0000196d

00001a74 <main>:
}
//! [cdc_setup]
//******************************************* UART CONFIG END *******************************************

int main(void)
{
    1a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a76:	b093      	sub	sp, #76	; 0x4c

//! [setup_init]
	system_init();
    1a78:	4b3f      	ldr	r3, [pc, #252]	; (1b78 <main+0x104>)
    1a7a:	4798      	blx	r3
	cpu_irq_enable();
    1a7c:	2401      	movs	r4, #1
    1a7e:	4b3f      	ldr	r3, [pc, #252]	; (1b7c <main+0x108>)
    1a80:	701c      	strb	r4, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1a82:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1a86:	b662      	cpsie	i
	config->data_order       = USART_DATAORDER_LSB;
    1a88:	2380      	movs	r3, #128	; 0x80
    1a8a:	05db      	lsls	r3, r3, #23
    1a8c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1a8e:	2300      	movs	r3, #0
    1a90:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    1a92:	22ff      	movs	r2, #255	; 0xff
    1a94:	4669      	mov	r1, sp
    1a96:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1a98:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1a9a:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
    1a9c:	2296      	movs	r2, #150	; 0x96
    1a9e:	0192      	lsls	r2, r2, #6
    1aa0:	920a      	str	r2, [sp, #40]	; 0x28
	config->receiver_enable  = true;
    1aa2:	222c      	movs	r2, #44	; 0x2c
    1aa4:	548c      	strb	r4, [r1, r2]
	config->transmitter_enable = true;
    1aa6:	3201      	adds	r2, #1
    1aa8:	548c      	strb	r4, [r1, r2]
	config->clock_polarity_inverted = false;
    1aaa:	3201      	adds	r2, #1
    1aac:	548b      	strb	r3, [r1, r2]
	config->use_external_clock = false;
    1aae:	3201      	adds	r2, #1
    1ab0:	548b      	strb	r3, [r1, r2]
	config->ext_clock_freq   = 0;
    1ab2:	930c      	str	r3, [sp, #48]	; 0x30
	config->run_in_standby   = false;
    1ab4:	3205      	adds	r2, #5
    1ab6:	548b      	strb	r3, [r1, r2]
	config->generator_source = GCLK_GENERATOR_0;
    1ab8:	3201      	adds	r2, #1
    1aba:	548b      	strb	r3, [r1, r2]
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1abc:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1abe:	2200      	movs	r2, #0
    1ac0:	820b      	strh	r3, [r1, #16]
	config->lin_slave_enable      = false;
    1ac2:	76ca      	strb	r2, [r1, #27]
	config->lin_node = LIN_INVALID_MODE;
    1ac4:	9307      	str	r3, [sp, #28]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
    1ac6:	840b      	strh	r3, [r1, #32]
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
    1ac8:	844b      	strh	r3, [r1, #34]	; 0x22
	config->immediate_buffer_overflow_notification  = false;
    1aca:	760a      	strb	r2, [r1, #24]
	config->start_frame_detection_enable            = false;
    1acc:	2324      	movs	r3, #36	; 0x24
    1ace:	54ca      	strb	r2, [r1, r3]
	config->encoding_format_enable                  = false;
    1ad0:	764a      	strb	r2, [r1, #25]
	config->receive_pulse_length                    = 19;
    1ad2:	2313      	movs	r3, #19
    1ad4:	768b      	strb	r3, [r1, #26]
	config->collision_detection_enable              = false;
    1ad6:	3313      	adds	r3, #19
    1ad8:	54ca      	strb	r2, [r1, r3]
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
    1ada:	3b01      	subs	r3, #1
    1adc:	54ca      	strb	r2, [r1, r3]
	config_cdc.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    1ade:	23c4      	movs	r3, #196	; 0xc4
    1ae0:	039b      	lsls	r3, r3, #14
    1ae2:	9303      	str	r3, [sp, #12]
	config_cdc.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1ae4:	2301      	movs	r3, #1
    1ae6:	425b      	negs	r3, r3
    1ae8:	930e      	str	r3, [sp, #56]	; 0x38
	config_cdc.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1aea:	930f      	str	r3, [sp, #60]	; 0x3c
	config_cdc.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1aec:	4b24      	ldr	r3, [pc, #144]	; (1b80 <main+0x10c>)
    1aee:	9310      	str	r3, [sp, #64]	; 0x40
	config_cdc.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1af0:	4b24      	ldr	r3, [pc, #144]	; (1b84 <main+0x110>)
    1af2:	9311      	str	r3, [sp, #68]	; 0x44
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1af4:	4d24      	ldr	r5, [pc, #144]	; (1b88 <main+0x114>)
    1af6:	4b25      	ldr	r3, [pc, #148]	; (1b8c <main+0x118>)
    1af8:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1afa:	4a25      	ldr	r2, [pc, #148]	; (1b90 <main+0x11c>)
    1afc:	4b25      	ldr	r3, [pc, #148]	; (1b94 <main+0x120>)
    1afe:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    1b00:	4a25      	ldr	r2, [pc, #148]	; (1b98 <main+0x124>)
    1b02:	4b26      	ldr	r3, [pc, #152]	; (1b9c <main+0x128>)
    1b04:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1b06:	466a      	mov	r2, sp
    1b08:	4925      	ldr	r1, [pc, #148]	; (1ba0 <main+0x12c>)
    1b0a:	0028      	movs	r0, r5
    1b0c:	4b25      	ldr	r3, [pc, #148]	; (1ba4 <main+0x130>)
    1b0e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    1b10:	4f25      	ldr	r7, [pc, #148]	; (1ba8 <main+0x134>)
    1b12:	683b      	ldr	r3, [r7, #0]
    1b14:	6898      	ldr	r0, [r3, #8]
    1b16:	2100      	movs	r1, #0
    1b18:	4e24      	ldr	r6, [pc, #144]	; (1bac <main+0x138>)
    1b1a:	47b0      	blx	r6
	setbuf(stdin, NULL);
    1b1c:	683b      	ldr	r3, [r7, #0]
    1b1e:	6858      	ldr	r0, [r3, #4]
    1b20:	2100      	movs	r1, #0
    1b22:	47b0      	blx	r6
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b24:	682e      	ldr	r6, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1b26:	0030      	movs	r0, r6
    1b28:	4b21      	ldr	r3, [pc, #132]	; (1bb0 <main+0x13c>)
    1b2a:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1b2c:	231f      	movs	r3, #31
    1b2e:	4018      	ands	r0, r3
    1b30:	4084      	lsls	r4, r0
    1b32:	4b20      	ldr	r3, [pc, #128]	; (1bb4 <main+0x140>)
    1b34:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1b36:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1b38:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1b3a:	2a00      	cmp	r2, #0
    1b3c:	d1fc      	bne.n	1b38 <main+0xc4>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1b3e:	6833      	ldr	r3, [r6, #0]
    1b40:	3202      	adds	r2, #2
    1b42:	4313      	orrs	r3, r2
    1b44:	6033      	str	r3, [r6, #0]
	system_interrupt_enable_global();
	
//! setup USART
	configure_usart_cdc();
	configure_usart();
    1b46:	4b1c      	ldr	r3, [pc, #112]	; (1bb8 <main+0x144>)
    1b48:	4798      	blx	r3
	//usart_write_buffer_wait(&usart_instance, string, sizeof(string));

	
//! [main_loop]
	while(1) {
		port_pin_set_output_level(LED_0_PIN, cmd_received);
    1b4a:	4e1c      	ldr	r6, [pc, #112]	; (1bbc <main+0x148>)
		usart_read_buffer_job(&usart_instance,(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
    1b4c:	4d1c      	ldr	r5, [pc, #112]	; (1bc0 <main+0x14c>)
    1b4e:	4c1d      	ldr	r4, [pc, #116]	; (1bc4 <main+0x150>)
    1b50:	e009      	b.n	1b66 <main+0xf2>

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1b52:	2280      	movs	r2, #128	; 0x80
    1b54:	0212      	lsls	r2, r2, #8
    1b56:	2382      	movs	r3, #130	; 0x82
    1b58:	05db      	lsls	r3, r3, #23
    1b5a:	615a      	str	r2, [r3, #20]
    1b5c:	2214      	movs	r2, #20
    1b5e:	0029      	movs	r1, r5
    1b60:	0020      	movs	r0, r4
    1b62:	4b19      	ldr	r3, [pc, #100]	; (1bc8 <main+0x154>)
    1b64:	4798      	blx	r3
	if (level) {
    1b66:	7833      	ldrb	r3, [r6, #0]
    1b68:	2b00      	cmp	r3, #0
    1b6a:	d0f2      	beq.n	1b52 <main+0xde>
		port_base->OUTSET.reg = pin_mask;
    1b6c:	2280      	movs	r2, #128	; 0x80
    1b6e:	0212      	lsls	r2, r2, #8
    1b70:	2382      	movs	r3, #130	; 0x82
    1b72:	05db      	lsls	r3, r3, #23
    1b74:	619a      	str	r2, [r3, #24]
    1b76:	e7f1      	b.n	1b5c <main+0xe8>
    1b78:	00001679 	.word	0x00001679
    1b7c:	20000014 	.word	0x20000014
    1b80:	002a0003 	.word	0x002a0003
    1b84:	002b0003 	.word	0x002b0003
    1b88:	200000d0 	.word	0x200000d0
    1b8c:	200001e4 	.word	0x200001e4
    1b90:	00001831 	.word	0x00001831
    1b94:	200001e0 	.word	0x200001e0
    1b98:	00001805 	.word	0x00001805
    1b9c:	200001dc 	.word	0x200001dc
    1ba0:	42001400 	.word	0x42001400
    1ba4:	00000971 	.word	0x00000971
    1ba8:	20000018 	.word	0x20000018
    1bac:	00001e99 	.word	0x00001e99
    1bb0:	000008e1 	.word	0x000008e1
    1bb4:	e000e100 	.word	0xe000e100
    1bb8:	000019a1 	.word	0x000019a1
    1bbc:	20000105 	.word	0x20000105
    1bc0:	200001e8 	.word	0x200001e8
    1bc4:	2000016c 	.word	0x2000016c
    1bc8:	00000e1d 	.word	0x00000e1d

00001bcc <__udivsi3>:
    1bcc:	2200      	movs	r2, #0
    1bce:	0843      	lsrs	r3, r0, #1
    1bd0:	428b      	cmp	r3, r1
    1bd2:	d374      	bcc.n	1cbe <__udivsi3+0xf2>
    1bd4:	0903      	lsrs	r3, r0, #4
    1bd6:	428b      	cmp	r3, r1
    1bd8:	d35f      	bcc.n	1c9a <__udivsi3+0xce>
    1bda:	0a03      	lsrs	r3, r0, #8
    1bdc:	428b      	cmp	r3, r1
    1bde:	d344      	bcc.n	1c6a <__udivsi3+0x9e>
    1be0:	0b03      	lsrs	r3, r0, #12
    1be2:	428b      	cmp	r3, r1
    1be4:	d328      	bcc.n	1c38 <__udivsi3+0x6c>
    1be6:	0c03      	lsrs	r3, r0, #16
    1be8:	428b      	cmp	r3, r1
    1bea:	d30d      	bcc.n	1c08 <__udivsi3+0x3c>
    1bec:	22ff      	movs	r2, #255	; 0xff
    1bee:	0209      	lsls	r1, r1, #8
    1bf0:	ba12      	rev	r2, r2
    1bf2:	0c03      	lsrs	r3, r0, #16
    1bf4:	428b      	cmp	r3, r1
    1bf6:	d302      	bcc.n	1bfe <__udivsi3+0x32>
    1bf8:	1212      	asrs	r2, r2, #8
    1bfa:	0209      	lsls	r1, r1, #8
    1bfc:	d065      	beq.n	1cca <__udivsi3+0xfe>
    1bfe:	0b03      	lsrs	r3, r0, #12
    1c00:	428b      	cmp	r3, r1
    1c02:	d319      	bcc.n	1c38 <__udivsi3+0x6c>
    1c04:	e000      	b.n	1c08 <__udivsi3+0x3c>
    1c06:	0a09      	lsrs	r1, r1, #8
    1c08:	0bc3      	lsrs	r3, r0, #15
    1c0a:	428b      	cmp	r3, r1
    1c0c:	d301      	bcc.n	1c12 <__udivsi3+0x46>
    1c0e:	03cb      	lsls	r3, r1, #15
    1c10:	1ac0      	subs	r0, r0, r3
    1c12:	4152      	adcs	r2, r2
    1c14:	0b83      	lsrs	r3, r0, #14
    1c16:	428b      	cmp	r3, r1
    1c18:	d301      	bcc.n	1c1e <__udivsi3+0x52>
    1c1a:	038b      	lsls	r3, r1, #14
    1c1c:	1ac0      	subs	r0, r0, r3
    1c1e:	4152      	adcs	r2, r2
    1c20:	0b43      	lsrs	r3, r0, #13
    1c22:	428b      	cmp	r3, r1
    1c24:	d301      	bcc.n	1c2a <__udivsi3+0x5e>
    1c26:	034b      	lsls	r3, r1, #13
    1c28:	1ac0      	subs	r0, r0, r3
    1c2a:	4152      	adcs	r2, r2
    1c2c:	0b03      	lsrs	r3, r0, #12
    1c2e:	428b      	cmp	r3, r1
    1c30:	d301      	bcc.n	1c36 <__udivsi3+0x6a>
    1c32:	030b      	lsls	r3, r1, #12
    1c34:	1ac0      	subs	r0, r0, r3
    1c36:	4152      	adcs	r2, r2
    1c38:	0ac3      	lsrs	r3, r0, #11
    1c3a:	428b      	cmp	r3, r1
    1c3c:	d301      	bcc.n	1c42 <__udivsi3+0x76>
    1c3e:	02cb      	lsls	r3, r1, #11
    1c40:	1ac0      	subs	r0, r0, r3
    1c42:	4152      	adcs	r2, r2
    1c44:	0a83      	lsrs	r3, r0, #10
    1c46:	428b      	cmp	r3, r1
    1c48:	d301      	bcc.n	1c4e <__udivsi3+0x82>
    1c4a:	028b      	lsls	r3, r1, #10
    1c4c:	1ac0      	subs	r0, r0, r3
    1c4e:	4152      	adcs	r2, r2
    1c50:	0a43      	lsrs	r3, r0, #9
    1c52:	428b      	cmp	r3, r1
    1c54:	d301      	bcc.n	1c5a <__udivsi3+0x8e>
    1c56:	024b      	lsls	r3, r1, #9
    1c58:	1ac0      	subs	r0, r0, r3
    1c5a:	4152      	adcs	r2, r2
    1c5c:	0a03      	lsrs	r3, r0, #8
    1c5e:	428b      	cmp	r3, r1
    1c60:	d301      	bcc.n	1c66 <__udivsi3+0x9a>
    1c62:	020b      	lsls	r3, r1, #8
    1c64:	1ac0      	subs	r0, r0, r3
    1c66:	4152      	adcs	r2, r2
    1c68:	d2cd      	bcs.n	1c06 <__udivsi3+0x3a>
    1c6a:	09c3      	lsrs	r3, r0, #7
    1c6c:	428b      	cmp	r3, r1
    1c6e:	d301      	bcc.n	1c74 <__udivsi3+0xa8>
    1c70:	01cb      	lsls	r3, r1, #7
    1c72:	1ac0      	subs	r0, r0, r3
    1c74:	4152      	adcs	r2, r2
    1c76:	0983      	lsrs	r3, r0, #6
    1c78:	428b      	cmp	r3, r1
    1c7a:	d301      	bcc.n	1c80 <__udivsi3+0xb4>
    1c7c:	018b      	lsls	r3, r1, #6
    1c7e:	1ac0      	subs	r0, r0, r3
    1c80:	4152      	adcs	r2, r2
    1c82:	0943      	lsrs	r3, r0, #5
    1c84:	428b      	cmp	r3, r1
    1c86:	d301      	bcc.n	1c8c <__udivsi3+0xc0>
    1c88:	014b      	lsls	r3, r1, #5
    1c8a:	1ac0      	subs	r0, r0, r3
    1c8c:	4152      	adcs	r2, r2
    1c8e:	0903      	lsrs	r3, r0, #4
    1c90:	428b      	cmp	r3, r1
    1c92:	d301      	bcc.n	1c98 <__udivsi3+0xcc>
    1c94:	010b      	lsls	r3, r1, #4
    1c96:	1ac0      	subs	r0, r0, r3
    1c98:	4152      	adcs	r2, r2
    1c9a:	08c3      	lsrs	r3, r0, #3
    1c9c:	428b      	cmp	r3, r1
    1c9e:	d301      	bcc.n	1ca4 <__udivsi3+0xd8>
    1ca0:	00cb      	lsls	r3, r1, #3
    1ca2:	1ac0      	subs	r0, r0, r3
    1ca4:	4152      	adcs	r2, r2
    1ca6:	0883      	lsrs	r3, r0, #2
    1ca8:	428b      	cmp	r3, r1
    1caa:	d301      	bcc.n	1cb0 <__udivsi3+0xe4>
    1cac:	008b      	lsls	r3, r1, #2
    1cae:	1ac0      	subs	r0, r0, r3
    1cb0:	4152      	adcs	r2, r2
    1cb2:	0843      	lsrs	r3, r0, #1
    1cb4:	428b      	cmp	r3, r1
    1cb6:	d301      	bcc.n	1cbc <__udivsi3+0xf0>
    1cb8:	004b      	lsls	r3, r1, #1
    1cba:	1ac0      	subs	r0, r0, r3
    1cbc:	4152      	adcs	r2, r2
    1cbe:	1a41      	subs	r1, r0, r1
    1cc0:	d200      	bcs.n	1cc4 <__udivsi3+0xf8>
    1cc2:	4601      	mov	r1, r0
    1cc4:	4152      	adcs	r2, r2
    1cc6:	4610      	mov	r0, r2
    1cc8:	4770      	bx	lr
    1cca:	e7ff      	b.n	1ccc <__udivsi3+0x100>
    1ccc:	b501      	push	{r0, lr}
    1cce:	2000      	movs	r0, #0
    1cd0:	f000 f806 	bl	1ce0 <__aeabi_idiv0>
    1cd4:	bd02      	pop	{r1, pc}
    1cd6:	46c0      	nop			; (mov r8, r8)

00001cd8 <__aeabi_uidivmod>:
    1cd8:	2900      	cmp	r1, #0
    1cda:	d0f7      	beq.n	1ccc <__udivsi3+0x100>
    1cdc:	e776      	b.n	1bcc <__udivsi3>
    1cde:	4770      	bx	lr

00001ce0 <__aeabi_idiv0>:
    1ce0:	4770      	bx	lr
    1ce2:	46c0      	nop			; (mov r8, r8)

00001ce4 <__aeabi_lmul>:
    1ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ce6:	46ce      	mov	lr, r9
    1ce8:	4647      	mov	r7, r8
    1cea:	0415      	lsls	r5, r2, #16
    1cec:	0c2d      	lsrs	r5, r5, #16
    1cee:	002e      	movs	r6, r5
    1cf0:	b580      	push	{r7, lr}
    1cf2:	0407      	lsls	r7, r0, #16
    1cf4:	0c14      	lsrs	r4, r2, #16
    1cf6:	0c3f      	lsrs	r7, r7, #16
    1cf8:	4699      	mov	r9, r3
    1cfa:	0c03      	lsrs	r3, r0, #16
    1cfc:	437e      	muls	r6, r7
    1cfe:	435d      	muls	r5, r3
    1d00:	4367      	muls	r7, r4
    1d02:	4363      	muls	r3, r4
    1d04:	197f      	adds	r7, r7, r5
    1d06:	0c34      	lsrs	r4, r6, #16
    1d08:	19e4      	adds	r4, r4, r7
    1d0a:	469c      	mov	ip, r3
    1d0c:	42a5      	cmp	r5, r4
    1d0e:	d903      	bls.n	1d18 <__aeabi_lmul+0x34>
    1d10:	2380      	movs	r3, #128	; 0x80
    1d12:	025b      	lsls	r3, r3, #9
    1d14:	4698      	mov	r8, r3
    1d16:	44c4      	add	ip, r8
    1d18:	464b      	mov	r3, r9
    1d1a:	4351      	muls	r1, r2
    1d1c:	4343      	muls	r3, r0
    1d1e:	0436      	lsls	r6, r6, #16
    1d20:	0c36      	lsrs	r6, r6, #16
    1d22:	0c25      	lsrs	r5, r4, #16
    1d24:	0424      	lsls	r4, r4, #16
    1d26:	4465      	add	r5, ip
    1d28:	19a4      	adds	r4, r4, r6
    1d2a:	1859      	adds	r1, r3, r1
    1d2c:	1949      	adds	r1, r1, r5
    1d2e:	0020      	movs	r0, r4
    1d30:	bc0c      	pop	{r2, r3}
    1d32:	4690      	mov	r8, r2
    1d34:	4699      	mov	r9, r3
    1d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d38 <__libc_init_array>:
    1d38:	b570      	push	{r4, r5, r6, lr}
    1d3a:	2600      	movs	r6, #0
    1d3c:	4d0c      	ldr	r5, [pc, #48]	; (1d70 <__libc_init_array+0x38>)
    1d3e:	4c0d      	ldr	r4, [pc, #52]	; (1d74 <__libc_init_array+0x3c>)
    1d40:	1b64      	subs	r4, r4, r5
    1d42:	10a4      	asrs	r4, r4, #2
    1d44:	42a6      	cmp	r6, r4
    1d46:	d109      	bne.n	1d5c <__libc_init_array+0x24>
    1d48:	2600      	movs	r6, #0
    1d4a:	f001 f90f 	bl	2f6c <_init>
    1d4e:	4d0a      	ldr	r5, [pc, #40]	; (1d78 <__libc_init_array+0x40>)
    1d50:	4c0a      	ldr	r4, [pc, #40]	; (1d7c <__libc_init_array+0x44>)
    1d52:	1b64      	subs	r4, r4, r5
    1d54:	10a4      	asrs	r4, r4, #2
    1d56:	42a6      	cmp	r6, r4
    1d58:	d105      	bne.n	1d66 <__libc_init_array+0x2e>
    1d5a:	bd70      	pop	{r4, r5, r6, pc}
    1d5c:	00b3      	lsls	r3, r6, #2
    1d5e:	58eb      	ldr	r3, [r5, r3]
    1d60:	4798      	blx	r3
    1d62:	3601      	adds	r6, #1
    1d64:	e7ee      	b.n	1d44 <__libc_init_array+0xc>
    1d66:	00b3      	lsls	r3, r6, #2
    1d68:	58eb      	ldr	r3, [r5, r3]
    1d6a:	4798      	blx	r3
    1d6c:	3601      	adds	r6, #1
    1d6e:	e7f2      	b.n	1d56 <__libc_init_array+0x1e>
    1d70:	00002f78 	.word	0x00002f78
    1d74:	00002f78 	.word	0x00002f78
    1d78:	00002f78 	.word	0x00002f78
    1d7c:	00002f7c 	.word	0x00002f7c

00001d80 <memset>:
    1d80:	0003      	movs	r3, r0
    1d82:	1882      	adds	r2, r0, r2
    1d84:	4293      	cmp	r3, r2
    1d86:	d100      	bne.n	1d8a <memset+0xa>
    1d88:	4770      	bx	lr
    1d8a:	7019      	strb	r1, [r3, #0]
    1d8c:	3301      	adds	r3, #1
    1d8e:	e7f9      	b.n	1d84 <memset+0x4>

00001d90 <iprintf>:
    1d90:	b40f      	push	{r0, r1, r2, r3}
    1d92:	4b0b      	ldr	r3, [pc, #44]	; (1dc0 <iprintf+0x30>)
    1d94:	b513      	push	{r0, r1, r4, lr}
    1d96:	681c      	ldr	r4, [r3, #0]
    1d98:	2c00      	cmp	r4, #0
    1d9a:	d005      	beq.n	1da8 <iprintf+0x18>
    1d9c:	69a3      	ldr	r3, [r4, #24]
    1d9e:	2b00      	cmp	r3, #0
    1da0:	d102      	bne.n	1da8 <iprintf+0x18>
    1da2:	0020      	movs	r0, r4
    1da4:	f000 faf2 	bl	238c <__sinit>
    1da8:	ab05      	add	r3, sp, #20
    1daa:	9a04      	ldr	r2, [sp, #16]
    1dac:	68a1      	ldr	r1, [r4, #8]
    1dae:	0020      	movs	r0, r4
    1db0:	9301      	str	r3, [sp, #4]
    1db2:	f000 fcc1 	bl	2738 <_vfiprintf_r>
    1db6:	bc16      	pop	{r1, r2, r4}
    1db8:	bc08      	pop	{r3}
    1dba:	b004      	add	sp, #16
    1dbc:	4718      	bx	r3
    1dbe:	46c0      	nop			; (mov r8, r8)
    1dc0:	20000018 	.word	0x20000018

00001dc4 <_puts_r>:
    1dc4:	b570      	push	{r4, r5, r6, lr}
    1dc6:	0005      	movs	r5, r0
    1dc8:	000e      	movs	r6, r1
    1dca:	2800      	cmp	r0, #0
    1dcc:	d004      	beq.n	1dd8 <_puts_r+0x14>
    1dce:	6983      	ldr	r3, [r0, #24]
    1dd0:	2b00      	cmp	r3, #0
    1dd2:	d101      	bne.n	1dd8 <_puts_r+0x14>
    1dd4:	f000 fada 	bl	238c <__sinit>
    1dd8:	69ab      	ldr	r3, [r5, #24]
    1dda:	68ac      	ldr	r4, [r5, #8]
    1ddc:	2b00      	cmp	r3, #0
    1dde:	d102      	bne.n	1de6 <_puts_r+0x22>
    1de0:	0028      	movs	r0, r5
    1de2:	f000 fad3 	bl	238c <__sinit>
    1de6:	4b24      	ldr	r3, [pc, #144]	; (1e78 <_puts_r+0xb4>)
    1de8:	429c      	cmp	r4, r3
    1dea:	d10f      	bne.n	1e0c <_puts_r+0x48>
    1dec:	686c      	ldr	r4, [r5, #4]
    1dee:	89a3      	ldrh	r3, [r4, #12]
    1df0:	071b      	lsls	r3, r3, #28
    1df2:	d502      	bpl.n	1dfa <_puts_r+0x36>
    1df4:	6923      	ldr	r3, [r4, #16]
    1df6:	2b00      	cmp	r3, #0
    1df8:	d120      	bne.n	1e3c <_puts_r+0x78>
    1dfa:	0021      	movs	r1, r4
    1dfc:	0028      	movs	r0, r5
    1dfe:	f000 f957 	bl	20b0 <__swsetup_r>
    1e02:	2800      	cmp	r0, #0
    1e04:	d01a      	beq.n	1e3c <_puts_r+0x78>
    1e06:	2001      	movs	r0, #1
    1e08:	4240      	negs	r0, r0
    1e0a:	bd70      	pop	{r4, r5, r6, pc}
    1e0c:	4b1b      	ldr	r3, [pc, #108]	; (1e7c <_puts_r+0xb8>)
    1e0e:	429c      	cmp	r4, r3
    1e10:	d101      	bne.n	1e16 <_puts_r+0x52>
    1e12:	68ac      	ldr	r4, [r5, #8]
    1e14:	e7eb      	b.n	1dee <_puts_r+0x2a>
    1e16:	4b1a      	ldr	r3, [pc, #104]	; (1e80 <_puts_r+0xbc>)
    1e18:	429c      	cmp	r4, r3
    1e1a:	d1e8      	bne.n	1dee <_puts_r+0x2a>
    1e1c:	68ec      	ldr	r4, [r5, #12]
    1e1e:	e7e6      	b.n	1dee <_puts_r+0x2a>
    1e20:	3b01      	subs	r3, #1
    1e22:	3601      	adds	r6, #1
    1e24:	60a3      	str	r3, [r4, #8]
    1e26:	2b00      	cmp	r3, #0
    1e28:	da04      	bge.n	1e34 <_puts_r+0x70>
    1e2a:	69a2      	ldr	r2, [r4, #24]
    1e2c:	4293      	cmp	r3, r2
    1e2e:	db16      	blt.n	1e5e <_puts_r+0x9a>
    1e30:	290a      	cmp	r1, #10
    1e32:	d014      	beq.n	1e5e <_puts_r+0x9a>
    1e34:	6823      	ldr	r3, [r4, #0]
    1e36:	1c5a      	adds	r2, r3, #1
    1e38:	6022      	str	r2, [r4, #0]
    1e3a:	7019      	strb	r1, [r3, #0]
    1e3c:	7831      	ldrb	r1, [r6, #0]
    1e3e:	68a3      	ldr	r3, [r4, #8]
    1e40:	2900      	cmp	r1, #0
    1e42:	d1ed      	bne.n	1e20 <_puts_r+0x5c>
    1e44:	3b01      	subs	r3, #1
    1e46:	60a3      	str	r3, [r4, #8]
    1e48:	2b00      	cmp	r3, #0
    1e4a:	da0f      	bge.n	1e6c <_puts_r+0xa8>
    1e4c:	0022      	movs	r2, r4
    1e4e:	310a      	adds	r1, #10
    1e50:	0028      	movs	r0, r5
    1e52:	f000 f8d7 	bl	2004 <__swbuf_r>
    1e56:	1c43      	adds	r3, r0, #1
    1e58:	d0d5      	beq.n	1e06 <_puts_r+0x42>
    1e5a:	200a      	movs	r0, #10
    1e5c:	e7d5      	b.n	1e0a <_puts_r+0x46>
    1e5e:	0022      	movs	r2, r4
    1e60:	0028      	movs	r0, r5
    1e62:	f000 f8cf 	bl	2004 <__swbuf_r>
    1e66:	1c43      	adds	r3, r0, #1
    1e68:	d1e8      	bne.n	1e3c <_puts_r+0x78>
    1e6a:	e7cc      	b.n	1e06 <_puts_r+0x42>
    1e6c:	200a      	movs	r0, #10
    1e6e:	6823      	ldr	r3, [r4, #0]
    1e70:	1c5a      	adds	r2, r3, #1
    1e72:	6022      	str	r2, [r4, #0]
    1e74:	7018      	strb	r0, [r3, #0]
    1e76:	e7c8      	b.n	1e0a <_puts_r+0x46>
    1e78:	00002ef8 	.word	0x00002ef8
    1e7c:	00002f18 	.word	0x00002f18
    1e80:	00002ed8 	.word	0x00002ed8

00001e84 <puts>:
    1e84:	b510      	push	{r4, lr}
    1e86:	4b03      	ldr	r3, [pc, #12]	; (1e94 <puts+0x10>)
    1e88:	0001      	movs	r1, r0
    1e8a:	6818      	ldr	r0, [r3, #0]
    1e8c:	f7ff ff9a 	bl	1dc4 <_puts_r>
    1e90:	bd10      	pop	{r4, pc}
    1e92:	46c0      	nop			; (mov r8, r8)
    1e94:	20000018 	.word	0x20000018

00001e98 <setbuf>:
    1e98:	424a      	negs	r2, r1
    1e9a:	414a      	adcs	r2, r1
    1e9c:	2380      	movs	r3, #128	; 0x80
    1e9e:	b510      	push	{r4, lr}
    1ea0:	0052      	lsls	r2, r2, #1
    1ea2:	00db      	lsls	r3, r3, #3
    1ea4:	f000 f802 	bl	1eac <setvbuf>
    1ea8:	bd10      	pop	{r4, pc}
	...

00001eac <setvbuf>:
    1eac:	b5f0      	push	{r4, r5, r6, r7, lr}
    1eae:	001d      	movs	r5, r3
    1eb0:	4b4f      	ldr	r3, [pc, #316]	; (1ff0 <setvbuf+0x144>)
    1eb2:	b085      	sub	sp, #20
    1eb4:	681e      	ldr	r6, [r3, #0]
    1eb6:	0004      	movs	r4, r0
    1eb8:	000f      	movs	r7, r1
    1eba:	9200      	str	r2, [sp, #0]
    1ebc:	2e00      	cmp	r6, #0
    1ebe:	d005      	beq.n	1ecc <setvbuf+0x20>
    1ec0:	69b3      	ldr	r3, [r6, #24]
    1ec2:	2b00      	cmp	r3, #0
    1ec4:	d102      	bne.n	1ecc <setvbuf+0x20>
    1ec6:	0030      	movs	r0, r6
    1ec8:	f000 fa60 	bl	238c <__sinit>
    1ecc:	4b49      	ldr	r3, [pc, #292]	; (1ff4 <setvbuf+0x148>)
    1ece:	429c      	cmp	r4, r3
    1ed0:	d150      	bne.n	1f74 <setvbuf+0xc8>
    1ed2:	6874      	ldr	r4, [r6, #4]
    1ed4:	9b00      	ldr	r3, [sp, #0]
    1ed6:	2b02      	cmp	r3, #2
    1ed8:	d005      	beq.n	1ee6 <setvbuf+0x3a>
    1eda:	2b01      	cmp	r3, #1
    1edc:	d900      	bls.n	1ee0 <setvbuf+0x34>
    1ede:	e084      	b.n	1fea <setvbuf+0x13e>
    1ee0:	2d00      	cmp	r5, #0
    1ee2:	da00      	bge.n	1ee6 <setvbuf+0x3a>
    1ee4:	e081      	b.n	1fea <setvbuf+0x13e>
    1ee6:	0021      	movs	r1, r4
    1ee8:	0030      	movs	r0, r6
    1eea:	f000 f9e1 	bl	22b0 <_fflush_r>
    1eee:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1ef0:	2900      	cmp	r1, #0
    1ef2:	d008      	beq.n	1f06 <setvbuf+0x5a>
    1ef4:	0023      	movs	r3, r4
    1ef6:	3344      	adds	r3, #68	; 0x44
    1ef8:	4299      	cmp	r1, r3
    1efa:	d002      	beq.n	1f02 <setvbuf+0x56>
    1efc:	0030      	movs	r0, r6
    1efe:	f000 fb4b 	bl	2598 <_free_r>
    1f02:	2300      	movs	r3, #0
    1f04:	6363      	str	r3, [r4, #52]	; 0x34
    1f06:	2300      	movs	r3, #0
    1f08:	61a3      	str	r3, [r4, #24]
    1f0a:	6063      	str	r3, [r4, #4]
    1f0c:	89a3      	ldrh	r3, [r4, #12]
    1f0e:	061b      	lsls	r3, r3, #24
    1f10:	d503      	bpl.n	1f1a <setvbuf+0x6e>
    1f12:	6921      	ldr	r1, [r4, #16]
    1f14:	0030      	movs	r0, r6
    1f16:	f000 fb3f 	bl	2598 <_free_r>
    1f1a:	89a3      	ldrh	r3, [r4, #12]
    1f1c:	4a36      	ldr	r2, [pc, #216]	; (1ff8 <setvbuf+0x14c>)
    1f1e:	4013      	ands	r3, r2
    1f20:	81a3      	strh	r3, [r4, #12]
    1f22:	9b00      	ldr	r3, [sp, #0]
    1f24:	2b02      	cmp	r3, #2
    1f26:	d05a      	beq.n	1fde <setvbuf+0x132>
    1f28:	ab03      	add	r3, sp, #12
    1f2a:	aa02      	add	r2, sp, #8
    1f2c:	0021      	movs	r1, r4
    1f2e:	0030      	movs	r0, r6
    1f30:	f000 fac2 	bl	24b8 <__swhatbuf_r>
    1f34:	89a3      	ldrh	r3, [r4, #12]
    1f36:	4318      	orrs	r0, r3
    1f38:	81a0      	strh	r0, [r4, #12]
    1f3a:	2d00      	cmp	r5, #0
    1f3c:	d124      	bne.n	1f88 <setvbuf+0xdc>
    1f3e:	9d02      	ldr	r5, [sp, #8]
    1f40:	0028      	movs	r0, r5
    1f42:	f000 fb1f 	bl	2584 <malloc>
    1f46:	9501      	str	r5, [sp, #4]
    1f48:	1e07      	subs	r7, r0, #0
    1f4a:	d142      	bne.n	1fd2 <setvbuf+0x126>
    1f4c:	9b02      	ldr	r3, [sp, #8]
    1f4e:	9301      	str	r3, [sp, #4]
    1f50:	42ab      	cmp	r3, r5
    1f52:	d139      	bne.n	1fc8 <setvbuf+0x11c>
    1f54:	2001      	movs	r0, #1
    1f56:	4240      	negs	r0, r0
    1f58:	2302      	movs	r3, #2
    1f5a:	89a2      	ldrh	r2, [r4, #12]
    1f5c:	4313      	orrs	r3, r2
    1f5e:	81a3      	strh	r3, [r4, #12]
    1f60:	2300      	movs	r3, #0
    1f62:	60a3      	str	r3, [r4, #8]
    1f64:	0023      	movs	r3, r4
    1f66:	3347      	adds	r3, #71	; 0x47
    1f68:	6023      	str	r3, [r4, #0]
    1f6a:	6123      	str	r3, [r4, #16]
    1f6c:	2301      	movs	r3, #1
    1f6e:	6163      	str	r3, [r4, #20]
    1f70:	b005      	add	sp, #20
    1f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f74:	4b21      	ldr	r3, [pc, #132]	; (1ffc <setvbuf+0x150>)
    1f76:	429c      	cmp	r4, r3
    1f78:	d101      	bne.n	1f7e <setvbuf+0xd2>
    1f7a:	68b4      	ldr	r4, [r6, #8]
    1f7c:	e7aa      	b.n	1ed4 <setvbuf+0x28>
    1f7e:	4b20      	ldr	r3, [pc, #128]	; (2000 <STACK_SIZE>)
    1f80:	429c      	cmp	r4, r3
    1f82:	d1a7      	bne.n	1ed4 <setvbuf+0x28>
    1f84:	68f4      	ldr	r4, [r6, #12]
    1f86:	e7a5      	b.n	1ed4 <setvbuf+0x28>
    1f88:	2f00      	cmp	r7, #0
    1f8a:	d0d9      	beq.n	1f40 <setvbuf+0x94>
    1f8c:	69b3      	ldr	r3, [r6, #24]
    1f8e:	2b00      	cmp	r3, #0
    1f90:	d102      	bne.n	1f98 <setvbuf+0xec>
    1f92:	0030      	movs	r0, r6
    1f94:	f000 f9fa 	bl	238c <__sinit>
    1f98:	9b00      	ldr	r3, [sp, #0]
    1f9a:	2b01      	cmp	r3, #1
    1f9c:	d103      	bne.n	1fa6 <setvbuf+0xfa>
    1f9e:	89a3      	ldrh	r3, [r4, #12]
    1fa0:	9a00      	ldr	r2, [sp, #0]
    1fa2:	431a      	orrs	r2, r3
    1fa4:	81a2      	strh	r2, [r4, #12]
    1fa6:	2008      	movs	r0, #8
    1fa8:	89a3      	ldrh	r3, [r4, #12]
    1faa:	6027      	str	r7, [r4, #0]
    1fac:	6127      	str	r7, [r4, #16]
    1fae:	6165      	str	r5, [r4, #20]
    1fb0:	4018      	ands	r0, r3
    1fb2:	d018      	beq.n	1fe6 <setvbuf+0x13a>
    1fb4:	2001      	movs	r0, #1
    1fb6:	4018      	ands	r0, r3
    1fb8:	2300      	movs	r3, #0
    1fba:	4298      	cmp	r0, r3
    1fbc:	d011      	beq.n	1fe2 <setvbuf+0x136>
    1fbe:	426d      	negs	r5, r5
    1fc0:	60a3      	str	r3, [r4, #8]
    1fc2:	61a5      	str	r5, [r4, #24]
    1fc4:	0018      	movs	r0, r3
    1fc6:	e7d3      	b.n	1f70 <setvbuf+0xc4>
    1fc8:	9801      	ldr	r0, [sp, #4]
    1fca:	f000 fadb 	bl	2584 <malloc>
    1fce:	1e07      	subs	r7, r0, #0
    1fd0:	d0c0      	beq.n	1f54 <setvbuf+0xa8>
    1fd2:	2380      	movs	r3, #128	; 0x80
    1fd4:	89a2      	ldrh	r2, [r4, #12]
    1fd6:	9d01      	ldr	r5, [sp, #4]
    1fd8:	4313      	orrs	r3, r2
    1fda:	81a3      	strh	r3, [r4, #12]
    1fdc:	e7d6      	b.n	1f8c <setvbuf+0xe0>
    1fde:	2000      	movs	r0, #0
    1fe0:	e7ba      	b.n	1f58 <setvbuf+0xac>
    1fe2:	60a5      	str	r5, [r4, #8]
    1fe4:	e7c4      	b.n	1f70 <setvbuf+0xc4>
    1fe6:	60a0      	str	r0, [r4, #8]
    1fe8:	e7c2      	b.n	1f70 <setvbuf+0xc4>
    1fea:	2001      	movs	r0, #1
    1fec:	4240      	negs	r0, r0
    1fee:	e7bf      	b.n	1f70 <setvbuf+0xc4>
    1ff0:	20000018 	.word	0x20000018
    1ff4:	00002ef8 	.word	0x00002ef8
    1ff8:	fffff35c 	.word	0xfffff35c
    1ffc:	00002f18 	.word	0x00002f18
    2000:	00002ed8 	.word	0x00002ed8

00002004 <__swbuf_r>:
    2004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2006:	0005      	movs	r5, r0
    2008:	000e      	movs	r6, r1
    200a:	0014      	movs	r4, r2
    200c:	2800      	cmp	r0, #0
    200e:	d004      	beq.n	201a <__swbuf_r+0x16>
    2010:	6983      	ldr	r3, [r0, #24]
    2012:	2b00      	cmp	r3, #0
    2014:	d101      	bne.n	201a <__swbuf_r+0x16>
    2016:	f000 f9b9 	bl	238c <__sinit>
    201a:	4b22      	ldr	r3, [pc, #136]	; (20a4 <__swbuf_r+0xa0>)
    201c:	429c      	cmp	r4, r3
    201e:	d12d      	bne.n	207c <__swbuf_r+0x78>
    2020:	686c      	ldr	r4, [r5, #4]
    2022:	69a3      	ldr	r3, [r4, #24]
    2024:	60a3      	str	r3, [r4, #8]
    2026:	89a3      	ldrh	r3, [r4, #12]
    2028:	071b      	lsls	r3, r3, #28
    202a:	d531      	bpl.n	2090 <__swbuf_r+0x8c>
    202c:	6923      	ldr	r3, [r4, #16]
    202e:	2b00      	cmp	r3, #0
    2030:	d02e      	beq.n	2090 <__swbuf_r+0x8c>
    2032:	6823      	ldr	r3, [r4, #0]
    2034:	6922      	ldr	r2, [r4, #16]
    2036:	b2f7      	uxtb	r7, r6
    2038:	1a98      	subs	r0, r3, r2
    203a:	6963      	ldr	r3, [r4, #20]
    203c:	b2f6      	uxtb	r6, r6
    203e:	4298      	cmp	r0, r3
    2040:	db05      	blt.n	204e <__swbuf_r+0x4a>
    2042:	0021      	movs	r1, r4
    2044:	0028      	movs	r0, r5
    2046:	f000 f933 	bl	22b0 <_fflush_r>
    204a:	2800      	cmp	r0, #0
    204c:	d126      	bne.n	209c <__swbuf_r+0x98>
    204e:	68a3      	ldr	r3, [r4, #8]
    2050:	3001      	adds	r0, #1
    2052:	3b01      	subs	r3, #1
    2054:	60a3      	str	r3, [r4, #8]
    2056:	6823      	ldr	r3, [r4, #0]
    2058:	1c5a      	adds	r2, r3, #1
    205a:	6022      	str	r2, [r4, #0]
    205c:	701f      	strb	r7, [r3, #0]
    205e:	6963      	ldr	r3, [r4, #20]
    2060:	4298      	cmp	r0, r3
    2062:	d004      	beq.n	206e <__swbuf_r+0x6a>
    2064:	89a3      	ldrh	r3, [r4, #12]
    2066:	07db      	lsls	r3, r3, #31
    2068:	d51a      	bpl.n	20a0 <__swbuf_r+0x9c>
    206a:	2e0a      	cmp	r6, #10
    206c:	d118      	bne.n	20a0 <__swbuf_r+0x9c>
    206e:	0021      	movs	r1, r4
    2070:	0028      	movs	r0, r5
    2072:	f000 f91d 	bl	22b0 <_fflush_r>
    2076:	2800      	cmp	r0, #0
    2078:	d012      	beq.n	20a0 <__swbuf_r+0x9c>
    207a:	e00f      	b.n	209c <__swbuf_r+0x98>
    207c:	4b0a      	ldr	r3, [pc, #40]	; (20a8 <__swbuf_r+0xa4>)
    207e:	429c      	cmp	r4, r3
    2080:	d101      	bne.n	2086 <__swbuf_r+0x82>
    2082:	68ac      	ldr	r4, [r5, #8]
    2084:	e7cd      	b.n	2022 <__swbuf_r+0x1e>
    2086:	4b09      	ldr	r3, [pc, #36]	; (20ac <__swbuf_r+0xa8>)
    2088:	429c      	cmp	r4, r3
    208a:	d1ca      	bne.n	2022 <__swbuf_r+0x1e>
    208c:	68ec      	ldr	r4, [r5, #12]
    208e:	e7c8      	b.n	2022 <__swbuf_r+0x1e>
    2090:	0021      	movs	r1, r4
    2092:	0028      	movs	r0, r5
    2094:	f000 f80c 	bl	20b0 <__swsetup_r>
    2098:	2800      	cmp	r0, #0
    209a:	d0ca      	beq.n	2032 <__swbuf_r+0x2e>
    209c:	2601      	movs	r6, #1
    209e:	4276      	negs	r6, r6
    20a0:	0030      	movs	r0, r6
    20a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20a4:	00002ef8 	.word	0x00002ef8
    20a8:	00002f18 	.word	0x00002f18
    20ac:	00002ed8 	.word	0x00002ed8

000020b0 <__swsetup_r>:
    20b0:	4b36      	ldr	r3, [pc, #216]	; (218c <__swsetup_r+0xdc>)
    20b2:	b570      	push	{r4, r5, r6, lr}
    20b4:	681d      	ldr	r5, [r3, #0]
    20b6:	0006      	movs	r6, r0
    20b8:	000c      	movs	r4, r1
    20ba:	2d00      	cmp	r5, #0
    20bc:	d005      	beq.n	20ca <__swsetup_r+0x1a>
    20be:	69ab      	ldr	r3, [r5, #24]
    20c0:	2b00      	cmp	r3, #0
    20c2:	d102      	bne.n	20ca <__swsetup_r+0x1a>
    20c4:	0028      	movs	r0, r5
    20c6:	f000 f961 	bl	238c <__sinit>
    20ca:	4b31      	ldr	r3, [pc, #196]	; (2190 <__swsetup_r+0xe0>)
    20cc:	429c      	cmp	r4, r3
    20ce:	d10f      	bne.n	20f0 <__swsetup_r+0x40>
    20d0:	686c      	ldr	r4, [r5, #4]
    20d2:	230c      	movs	r3, #12
    20d4:	5ee2      	ldrsh	r2, [r4, r3]
    20d6:	b293      	uxth	r3, r2
    20d8:	0719      	lsls	r1, r3, #28
    20da:	d42d      	bmi.n	2138 <__swsetup_r+0x88>
    20dc:	06d9      	lsls	r1, r3, #27
    20de:	d411      	bmi.n	2104 <__swsetup_r+0x54>
    20e0:	2309      	movs	r3, #9
    20e2:	2001      	movs	r0, #1
    20e4:	6033      	str	r3, [r6, #0]
    20e6:	3337      	adds	r3, #55	; 0x37
    20e8:	4313      	orrs	r3, r2
    20ea:	81a3      	strh	r3, [r4, #12]
    20ec:	4240      	negs	r0, r0
    20ee:	bd70      	pop	{r4, r5, r6, pc}
    20f0:	4b28      	ldr	r3, [pc, #160]	; (2194 <__swsetup_r+0xe4>)
    20f2:	429c      	cmp	r4, r3
    20f4:	d101      	bne.n	20fa <__swsetup_r+0x4a>
    20f6:	68ac      	ldr	r4, [r5, #8]
    20f8:	e7eb      	b.n	20d2 <__swsetup_r+0x22>
    20fa:	4b27      	ldr	r3, [pc, #156]	; (2198 <__swsetup_r+0xe8>)
    20fc:	429c      	cmp	r4, r3
    20fe:	d1e8      	bne.n	20d2 <__swsetup_r+0x22>
    2100:	68ec      	ldr	r4, [r5, #12]
    2102:	e7e6      	b.n	20d2 <__swsetup_r+0x22>
    2104:	075b      	lsls	r3, r3, #29
    2106:	d513      	bpl.n	2130 <__swsetup_r+0x80>
    2108:	6b61      	ldr	r1, [r4, #52]	; 0x34
    210a:	2900      	cmp	r1, #0
    210c:	d008      	beq.n	2120 <__swsetup_r+0x70>
    210e:	0023      	movs	r3, r4
    2110:	3344      	adds	r3, #68	; 0x44
    2112:	4299      	cmp	r1, r3
    2114:	d002      	beq.n	211c <__swsetup_r+0x6c>
    2116:	0030      	movs	r0, r6
    2118:	f000 fa3e 	bl	2598 <_free_r>
    211c:	2300      	movs	r3, #0
    211e:	6363      	str	r3, [r4, #52]	; 0x34
    2120:	2224      	movs	r2, #36	; 0x24
    2122:	89a3      	ldrh	r3, [r4, #12]
    2124:	4393      	bics	r3, r2
    2126:	81a3      	strh	r3, [r4, #12]
    2128:	2300      	movs	r3, #0
    212a:	6063      	str	r3, [r4, #4]
    212c:	6923      	ldr	r3, [r4, #16]
    212e:	6023      	str	r3, [r4, #0]
    2130:	2308      	movs	r3, #8
    2132:	89a2      	ldrh	r2, [r4, #12]
    2134:	4313      	orrs	r3, r2
    2136:	81a3      	strh	r3, [r4, #12]
    2138:	6923      	ldr	r3, [r4, #16]
    213a:	2b00      	cmp	r3, #0
    213c:	d10b      	bne.n	2156 <__swsetup_r+0xa6>
    213e:	21a0      	movs	r1, #160	; 0xa0
    2140:	2280      	movs	r2, #128	; 0x80
    2142:	89a3      	ldrh	r3, [r4, #12]
    2144:	0089      	lsls	r1, r1, #2
    2146:	0092      	lsls	r2, r2, #2
    2148:	400b      	ands	r3, r1
    214a:	4293      	cmp	r3, r2
    214c:	d003      	beq.n	2156 <__swsetup_r+0xa6>
    214e:	0021      	movs	r1, r4
    2150:	0030      	movs	r0, r6
    2152:	f000 f9d9 	bl	2508 <__smakebuf_r>
    2156:	2301      	movs	r3, #1
    2158:	89a2      	ldrh	r2, [r4, #12]
    215a:	4013      	ands	r3, r2
    215c:	d011      	beq.n	2182 <__swsetup_r+0xd2>
    215e:	2300      	movs	r3, #0
    2160:	60a3      	str	r3, [r4, #8]
    2162:	6963      	ldr	r3, [r4, #20]
    2164:	425b      	negs	r3, r3
    2166:	61a3      	str	r3, [r4, #24]
    2168:	2000      	movs	r0, #0
    216a:	6923      	ldr	r3, [r4, #16]
    216c:	4283      	cmp	r3, r0
    216e:	d1be      	bne.n	20ee <__swsetup_r+0x3e>
    2170:	230c      	movs	r3, #12
    2172:	5ee2      	ldrsh	r2, [r4, r3]
    2174:	0613      	lsls	r3, r2, #24
    2176:	d5ba      	bpl.n	20ee <__swsetup_r+0x3e>
    2178:	2340      	movs	r3, #64	; 0x40
    217a:	4313      	orrs	r3, r2
    217c:	81a3      	strh	r3, [r4, #12]
    217e:	3801      	subs	r0, #1
    2180:	e7b5      	b.n	20ee <__swsetup_r+0x3e>
    2182:	0792      	lsls	r2, r2, #30
    2184:	d400      	bmi.n	2188 <__swsetup_r+0xd8>
    2186:	6963      	ldr	r3, [r4, #20]
    2188:	60a3      	str	r3, [r4, #8]
    218a:	e7ed      	b.n	2168 <__swsetup_r+0xb8>
    218c:	20000018 	.word	0x20000018
    2190:	00002ef8 	.word	0x00002ef8
    2194:	00002f18 	.word	0x00002f18
    2198:	00002ed8 	.word	0x00002ed8

0000219c <__sflush_r>:
    219c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    219e:	898a      	ldrh	r2, [r1, #12]
    21a0:	0005      	movs	r5, r0
    21a2:	000c      	movs	r4, r1
    21a4:	0713      	lsls	r3, r2, #28
    21a6:	d460      	bmi.n	226a <__sflush_r+0xce>
    21a8:	684b      	ldr	r3, [r1, #4]
    21aa:	2b00      	cmp	r3, #0
    21ac:	dc04      	bgt.n	21b8 <__sflush_r+0x1c>
    21ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    21b0:	2b00      	cmp	r3, #0
    21b2:	dc01      	bgt.n	21b8 <__sflush_r+0x1c>
    21b4:	2000      	movs	r0, #0
    21b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    21b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    21ba:	2f00      	cmp	r7, #0
    21bc:	d0fa      	beq.n	21b4 <__sflush_r+0x18>
    21be:	2300      	movs	r3, #0
    21c0:	682e      	ldr	r6, [r5, #0]
    21c2:	602b      	str	r3, [r5, #0]
    21c4:	2380      	movs	r3, #128	; 0x80
    21c6:	015b      	lsls	r3, r3, #5
    21c8:	401a      	ands	r2, r3
    21ca:	d034      	beq.n	2236 <__sflush_r+0x9a>
    21cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
    21ce:	89a3      	ldrh	r3, [r4, #12]
    21d0:	075b      	lsls	r3, r3, #29
    21d2:	d506      	bpl.n	21e2 <__sflush_r+0x46>
    21d4:	6863      	ldr	r3, [r4, #4]
    21d6:	1ac0      	subs	r0, r0, r3
    21d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    21da:	2b00      	cmp	r3, #0
    21dc:	d001      	beq.n	21e2 <__sflush_r+0x46>
    21de:	6c23      	ldr	r3, [r4, #64]	; 0x40
    21e0:	1ac0      	subs	r0, r0, r3
    21e2:	0002      	movs	r2, r0
    21e4:	6a21      	ldr	r1, [r4, #32]
    21e6:	2300      	movs	r3, #0
    21e8:	0028      	movs	r0, r5
    21ea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    21ec:	47b8      	blx	r7
    21ee:	89a1      	ldrh	r1, [r4, #12]
    21f0:	1c43      	adds	r3, r0, #1
    21f2:	d106      	bne.n	2202 <__sflush_r+0x66>
    21f4:	682b      	ldr	r3, [r5, #0]
    21f6:	2b1d      	cmp	r3, #29
    21f8:	d831      	bhi.n	225e <__sflush_r+0xc2>
    21fa:	4a2c      	ldr	r2, [pc, #176]	; (22ac <__sflush_r+0x110>)
    21fc:	40da      	lsrs	r2, r3
    21fe:	07d3      	lsls	r3, r2, #31
    2200:	d52d      	bpl.n	225e <__sflush_r+0xc2>
    2202:	2300      	movs	r3, #0
    2204:	6063      	str	r3, [r4, #4]
    2206:	6923      	ldr	r3, [r4, #16]
    2208:	6023      	str	r3, [r4, #0]
    220a:	04cb      	lsls	r3, r1, #19
    220c:	d505      	bpl.n	221a <__sflush_r+0x7e>
    220e:	1c43      	adds	r3, r0, #1
    2210:	d102      	bne.n	2218 <__sflush_r+0x7c>
    2212:	682b      	ldr	r3, [r5, #0]
    2214:	2b00      	cmp	r3, #0
    2216:	d100      	bne.n	221a <__sflush_r+0x7e>
    2218:	6560      	str	r0, [r4, #84]	; 0x54
    221a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    221c:	602e      	str	r6, [r5, #0]
    221e:	2900      	cmp	r1, #0
    2220:	d0c8      	beq.n	21b4 <__sflush_r+0x18>
    2222:	0023      	movs	r3, r4
    2224:	3344      	adds	r3, #68	; 0x44
    2226:	4299      	cmp	r1, r3
    2228:	d002      	beq.n	2230 <__sflush_r+0x94>
    222a:	0028      	movs	r0, r5
    222c:	f000 f9b4 	bl	2598 <_free_r>
    2230:	2000      	movs	r0, #0
    2232:	6360      	str	r0, [r4, #52]	; 0x34
    2234:	e7bf      	b.n	21b6 <__sflush_r+0x1a>
    2236:	2301      	movs	r3, #1
    2238:	6a21      	ldr	r1, [r4, #32]
    223a:	0028      	movs	r0, r5
    223c:	47b8      	blx	r7
    223e:	1c43      	adds	r3, r0, #1
    2240:	d1c5      	bne.n	21ce <__sflush_r+0x32>
    2242:	682b      	ldr	r3, [r5, #0]
    2244:	2b00      	cmp	r3, #0
    2246:	d0c2      	beq.n	21ce <__sflush_r+0x32>
    2248:	2b1d      	cmp	r3, #29
    224a:	d001      	beq.n	2250 <__sflush_r+0xb4>
    224c:	2b16      	cmp	r3, #22
    224e:	d101      	bne.n	2254 <__sflush_r+0xb8>
    2250:	602e      	str	r6, [r5, #0]
    2252:	e7af      	b.n	21b4 <__sflush_r+0x18>
    2254:	2340      	movs	r3, #64	; 0x40
    2256:	89a2      	ldrh	r2, [r4, #12]
    2258:	4313      	orrs	r3, r2
    225a:	81a3      	strh	r3, [r4, #12]
    225c:	e7ab      	b.n	21b6 <__sflush_r+0x1a>
    225e:	2340      	movs	r3, #64	; 0x40
    2260:	430b      	orrs	r3, r1
    2262:	2001      	movs	r0, #1
    2264:	81a3      	strh	r3, [r4, #12]
    2266:	4240      	negs	r0, r0
    2268:	e7a5      	b.n	21b6 <__sflush_r+0x1a>
    226a:	690f      	ldr	r7, [r1, #16]
    226c:	2f00      	cmp	r7, #0
    226e:	d0a1      	beq.n	21b4 <__sflush_r+0x18>
    2270:	680b      	ldr	r3, [r1, #0]
    2272:	600f      	str	r7, [r1, #0]
    2274:	1bdb      	subs	r3, r3, r7
    2276:	9301      	str	r3, [sp, #4]
    2278:	2300      	movs	r3, #0
    227a:	0792      	lsls	r2, r2, #30
    227c:	d100      	bne.n	2280 <__sflush_r+0xe4>
    227e:	694b      	ldr	r3, [r1, #20]
    2280:	60a3      	str	r3, [r4, #8]
    2282:	9b01      	ldr	r3, [sp, #4]
    2284:	2b00      	cmp	r3, #0
    2286:	dc00      	bgt.n	228a <__sflush_r+0xee>
    2288:	e794      	b.n	21b4 <__sflush_r+0x18>
    228a:	9b01      	ldr	r3, [sp, #4]
    228c:	003a      	movs	r2, r7
    228e:	6a21      	ldr	r1, [r4, #32]
    2290:	0028      	movs	r0, r5
    2292:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2294:	47b0      	blx	r6
    2296:	2800      	cmp	r0, #0
    2298:	dc03      	bgt.n	22a2 <__sflush_r+0x106>
    229a:	2340      	movs	r3, #64	; 0x40
    229c:	89a2      	ldrh	r2, [r4, #12]
    229e:	4313      	orrs	r3, r2
    22a0:	e7df      	b.n	2262 <__sflush_r+0xc6>
    22a2:	9b01      	ldr	r3, [sp, #4]
    22a4:	183f      	adds	r7, r7, r0
    22a6:	1a1b      	subs	r3, r3, r0
    22a8:	9301      	str	r3, [sp, #4]
    22aa:	e7ea      	b.n	2282 <__sflush_r+0xe6>
    22ac:	20400001 	.word	0x20400001

000022b0 <_fflush_r>:
    22b0:	690b      	ldr	r3, [r1, #16]
    22b2:	b570      	push	{r4, r5, r6, lr}
    22b4:	0005      	movs	r5, r0
    22b6:	000c      	movs	r4, r1
    22b8:	2b00      	cmp	r3, #0
    22ba:	d101      	bne.n	22c0 <_fflush_r+0x10>
    22bc:	2000      	movs	r0, #0
    22be:	bd70      	pop	{r4, r5, r6, pc}
    22c0:	2800      	cmp	r0, #0
    22c2:	d004      	beq.n	22ce <_fflush_r+0x1e>
    22c4:	6983      	ldr	r3, [r0, #24]
    22c6:	2b00      	cmp	r3, #0
    22c8:	d101      	bne.n	22ce <_fflush_r+0x1e>
    22ca:	f000 f85f 	bl	238c <__sinit>
    22ce:	4b0b      	ldr	r3, [pc, #44]	; (22fc <_fflush_r+0x4c>)
    22d0:	429c      	cmp	r4, r3
    22d2:	d109      	bne.n	22e8 <_fflush_r+0x38>
    22d4:	686c      	ldr	r4, [r5, #4]
    22d6:	220c      	movs	r2, #12
    22d8:	5ea3      	ldrsh	r3, [r4, r2]
    22da:	2b00      	cmp	r3, #0
    22dc:	d0ee      	beq.n	22bc <_fflush_r+0xc>
    22de:	0021      	movs	r1, r4
    22e0:	0028      	movs	r0, r5
    22e2:	f7ff ff5b 	bl	219c <__sflush_r>
    22e6:	e7ea      	b.n	22be <_fflush_r+0xe>
    22e8:	4b05      	ldr	r3, [pc, #20]	; (2300 <_fflush_r+0x50>)
    22ea:	429c      	cmp	r4, r3
    22ec:	d101      	bne.n	22f2 <_fflush_r+0x42>
    22ee:	68ac      	ldr	r4, [r5, #8]
    22f0:	e7f1      	b.n	22d6 <_fflush_r+0x26>
    22f2:	4b04      	ldr	r3, [pc, #16]	; (2304 <_fflush_r+0x54>)
    22f4:	429c      	cmp	r4, r3
    22f6:	d1ee      	bne.n	22d6 <_fflush_r+0x26>
    22f8:	68ec      	ldr	r4, [r5, #12]
    22fa:	e7ec      	b.n	22d6 <_fflush_r+0x26>
    22fc:	00002ef8 	.word	0x00002ef8
    2300:	00002f18 	.word	0x00002f18
    2304:	00002ed8 	.word	0x00002ed8

00002308 <_cleanup_r>:
    2308:	b510      	push	{r4, lr}
    230a:	4902      	ldr	r1, [pc, #8]	; (2314 <_cleanup_r+0xc>)
    230c:	f000 f8b2 	bl	2474 <_fwalk_reent>
    2310:	bd10      	pop	{r4, pc}
    2312:	46c0      	nop			; (mov r8, r8)
    2314:	000022b1 	.word	0x000022b1

00002318 <std.isra.0>:
    2318:	2300      	movs	r3, #0
    231a:	b510      	push	{r4, lr}
    231c:	0004      	movs	r4, r0
    231e:	6003      	str	r3, [r0, #0]
    2320:	6043      	str	r3, [r0, #4]
    2322:	6083      	str	r3, [r0, #8]
    2324:	8181      	strh	r1, [r0, #12]
    2326:	6643      	str	r3, [r0, #100]	; 0x64
    2328:	81c2      	strh	r2, [r0, #14]
    232a:	6103      	str	r3, [r0, #16]
    232c:	6143      	str	r3, [r0, #20]
    232e:	6183      	str	r3, [r0, #24]
    2330:	0019      	movs	r1, r3
    2332:	2208      	movs	r2, #8
    2334:	305c      	adds	r0, #92	; 0x5c
    2336:	f7ff fd23 	bl	1d80 <memset>
    233a:	4b05      	ldr	r3, [pc, #20]	; (2350 <std.isra.0+0x38>)
    233c:	6224      	str	r4, [r4, #32]
    233e:	6263      	str	r3, [r4, #36]	; 0x24
    2340:	4b04      	ldr	r3, [pc, #16]	; (2354 <std.isra.0+0x3c>)
    2342:	62a3      	str	r3, [r4, #40]	; 0x28
    2344:	4b04      	ldr	r3, [pc, #16]	; (2358 <std.isra.0+0x40>)
    2346:	62e3      	str	r3, [r4, #44]	; 0x2c
    2348:	4b04      	ldr	r3, [pc, #16]	; (235c <std.isra.0+0x44>)
    234a:	6323      	str	r3, [r4, #48]	; 0x30
    234c:	bd10      	pop	{r4, pc}
    234e:	46c0      	nop			; (mov r8, r8)
    2350:	00002ca5 	.word	0x00002ca5
    2354:	00002ccd 	.word	0x00002ccd
    2358:	00002d05 	.word	0x00002d05
    235c:	00002d31 	.word	0x00002d31

00002360 <__sfmoreglue>:
    2360:	b570      	push	{r4, r5, r6, lr}
    2362:	2568      	movs	r5, #104	; 0x68
    2364:	1e4a      	subs	r2, r1, #1
    2366:	4355      	muls	r5, r2
    2368:	000e      	movs	r6, r1
    236a:	0029      	movs	r1, r5
    236c:	3174      	adds	r1, #116	; 0x74
    236e:	f000 f95d 	bl	262c <_malloc_r>
    2372:	1e04      	subs	r4, r0, #0
    2374:	d008      	beq.n	2388 <__sfmoreglue+0x28>
    2376:	2100      	movs	r1, #0
    2378:	002a      	movs	r2, r5
    237a:	6001      	str	r1, [r0, #0]
    237c:	6046      	str	r6, [r0, #4]
    237e:	300c      	adds	r0, #12
    2380:	60a0      	str	r0, [r4, #8]
    2382:	3268      	adds	r2, #104	; 0x68
    2384:	f7ff fcfc 	bl	1d80 <memset>
    2388:	0020      	movs	r0, r4
    238a:	bd70      	pop	{r4, r5, r6, pc}

0000238c <__sinit>:
    238c:	6983      	ldr	r3, [r0, #24]
    238e:	b513      	push	{r0, r1, r4, lr}
    2390:	0004      	movs	r4, r0
    2392:	2b00      	cmp	r3, #0
    2394:	d128      	bne.n	23e8 <__sinit+0x5c>
    2396:	6483      	str	r3, [r0, #72]	; 0x48
    2398:	64c3      	str	r3, [r0, #76]	; 0x4c
    239a:	6503      	str	r3, [r0, #80]	; 0x50
    239c:	4b13      	ldr	r3, [pc, #76]	; (23ec <__sinit+0x60>)
    239e:	4a14      	ldr	r2, [pc, #80]	; (23f0 <__sinit+0x64>)
    23a0:	681b      	ldr	r3, [r3, #0]
    23a2:	6282      	str	r2, [r0, #40]	; 0x28
    23a4:	9301      	str	r3, [sp, #4]
    23a6:	4298      	cmp	r0, r3
    23a8:	d101      	bne.n	23ae <__sinit+0x22>
    23aa:	2301      	movs	r3, #1
    23ac:	6183      	str	r3, [r0, #24]
    23ae:	0020      	movs	r0, r4
    23b0:	f000 f820 	bl	23f4 <__sfp>
    23b4:	6060      	str	r0, [r4, #4]
    23b6:	0020      	movs	r0, r4
    23b8:	f000 f81c 	bl	23f4 <__sfp>
    23bc:	60a0      	str	r0, [r4, #8]
    23be:	0020      	movs	r0, r4
    23c0:	f000 f818 	bl	23f4 <__sfp>
    23c4:	2200      	movs	r2, #0
    23c6:	60e0      	str	r0, [r4, #12]
    23c8:	2104      	movs	r1, #4
    23ca:	6860      	ldr	r0, [r4, #4]
    23cc:	f7ff ffa4 	bl	2318 <std.isra.0>
    23d0:	2201      	movs	r2, #1
    23d2:	2109      	movs	r1, #9
    23d4:	68a0      	ldr	r0, [r4, #8]
    23d6:	f7ff ff9f 	bl	2318 <std.isra.0>
    23da:	2202      	movs	r2, #2
    23dc:	2112      	movs	r1, #18
    23de:	68e0      	ldr	r0, [r4, #12]
    23e0:	f7ff ff9a 	bl	2318 <std.isra.0>
    23e4:	2301      	movs	r3, #1
    23e6:	61a3      	str	r3, [r4, #24]
    23e8:	bd13      	pop	{r0, r1, r4, pc}
    23ea:	46c0      	nop			; (mov r8, r8)
    23ec:	00002ed4 	.word	0x00002ed4
    23f0:	00002309 	.word	0x00002309

000023f4 <__sfp>:
    23f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23f6:	4b1e      	ldr	r3, [pc, #120]	; (2470 <__sfp+0x7c>)
    23f8:	0007      	movs	r7, r0
    23fa:	681e      	ldr	r6, [r3, #0]
    23fc:	69b3      	ldr	r3, [r6, #24]
    23fe:	2b00      	cmp	r3, #0
    2400:	d102      	bne.n	2408 <__sfp+0x14>
    2402:	0030      	movs	r0, r6
    2404:	f7ff ffc2 	bl	238c <__sinit>
    2408:	3648      	adds	r6, #72	; 0x48
    240a:	68b4      	ldr	r4, [r6, #8]
    240c:	6873      	ldr	r3, [r6, #4]
    240e:	3b01      	subs	r3, #1
    2410:	d504      	bpl.n	241c <__sfp+0x28>
    2412:	6833      	ldr	r3, [r6, #0]
    2414:	2b00      	cmp	r3, #0
    2416:	d007      	beq.n	2428 <__sfp+0x34>
    2418:	6836      	ldr	r6, [r6, #0]
    241a:	e7f6      	b.n	240a <__sfp+0x16>
    241c:	220c      	movs	r2, #12
    241e:	5ea5      	ldrsh	r5, [r4, r2]
    2420:	2d00      	cmp	r5, #0
    2422:	d00d      	beq.n	2440 <__sfp+0x4c>
    2424:	3468      	adds	r4, #104	; 0x68
    2426:	e7f2      	b.n	240e <__sfp+0x1a>
    2428:	2104      	movs	r1, #4
    242a:	0038      	movs	r0, r7
    242c:	f7ff ff98 	bl	2360 <__sfmoreglue>
    2430:	6030      	str	r0, [r6, #0]
    2432:	2800      	cmp	r0, #0
    2434:	d1f0      	bne.n	2418 <__sfp+0x24>
    2436:	230c      	movs	r3, #12
    2438:	0004      	movs	r4, r0
    243a:	603b      	str	r3, [r7, #0]
    243c:	0020      	movs	r0, r4
    243e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2440:	2301      	movs	r3, #1
    2442:	0020      	movs	r0, r4
    2444:	425b      	negs	r3, r3
    2446:	81e3      	strh	r3, [r4, #14]
    2448:	3302      	adds	r3, #2
    244a:	81a3      	strh	r3, [r4, #12]
    244c:	6665      	str	r5, [r4, #100]	; 0x64
    244e:	6025      	str	r5, [r4, #0]
    2450:	60a5      	str	r5, [r4, #8]
    2452:	6065      	str	r5, [r4, #4]
    2454:	6125      	str	r5, [r4, #16]
    2456:	6165      	str	r5, [r4, #20]
    2458:	61a5      	str	r5, [r4, #24]
    245a:	2208      	movs	r2, #8
    245c:	0029      	movs	r1, r5
    245e:	305c      	adds	r0, #92	; 0x5c
    2460:	f7ff fc8e 	bl	1d80 <memset>
    2464:	6365      	str	r5, [r4, #52]	; 0x34
    2466:	63a5      	str	r5, [r4, #56]	; 0x38
    2468:	64a5      	str	r5, [r4, #72]	; 0x48
    246a:	64e5      	str	r5, [r4, #76]	; 0x4c
    246c:	e7e6      	b.n	243c <__sfp+0x48>
    246e:	46c0      	nop			; (mov r8, r8)
    2470:	00002ed4 	.word	0x00002ed4

00002474 <_fwalk_reent>:
    2474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2476:	0004      	movs	r4, r0
    2478:	0007      	movs	r7, r0
    247a:	2600      	movs	r6, #0
    247c:	9101      	str	r1, [sp, #4]
    247e:	3448      	adds	r4, #72	; 0x48
    2480:	2c00      	cmp	r4, #0
    2482:	d101      	bne.n	2488 <_fwalk_reent+0x14>
    2484:	0030      	movs	r0, r6
    2486:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2488:	6863      	ldr	r3, [r4, #4]
    248a:	68a5      	ldr	r5, [r4, #8]
    248c:	9300      	str	r3, [sp, #0]
    248e:	9b00      	ldr	r3, [sp, #0]
    2490:	3b01      	subs	r3, #1
    2492:	9300      	str	r3, [sp, #0]
    2494:	d501      	bpl.n	249a <_fwalk_reent+0x26>
    2496:	6824      	ldr	r4, [r4, #0]
    2498:	e7f2      	b.n	2480 <_fwalk_reent+0xc>
    249a:	89ab      	ldrh	r3, [r5, #12]
    249c:	2b01      	cmp	r3, #1
    249e:	d908      	bls.n	24b2 <_fwalk_reent+0x3e>
    24a0:	220e      	movs	r2, #14
    24a2:	5eab      	ldrsh	r3, [r5, r2]
    24a4:	3301      	adds	r3, #1
    24a6:	d004      	beq.n	24b2 <_fwalk_reent+0x3e>
    24a8:	0029      	movs	r1, r5
    24aa:	0038      	movs	r0, r7
    24ac:	9b01      	ldr	r3, [sp, #4]
    24ae:	4798      	blx	r3
    24b0:	4306      	orrs	r6, r0
    24b2:	3568      	adds	r5, #104	; 0x68
    24b4:	e7eb      	b.n	248e <_fwalk_reent+0x1a>
	...

000024b8 <__swhatbuf_r>:
    24b8:	b570      	push	{r4, r5, r6, lr}
    24ba:	000e      	movs	r6, r1
    24bc:	001d      	movs	r5, r3
    24be:	230e      	movs	r3, #14
    24c0:	5ec9      	ldrsh	r1, [r1, r3]
    24c2:	b090      	sub	sp, #64	; 0x40
    24c4:	0014      	movs	r4, r2
    24c6:	2900      	cmp	r1, #0
    24c8:	da07      	bge.n	24da <__swhatbuf_r+0x22>
    24ca:	2300      	movs	r3, #0
    24cc:	602b      	str	r3, [r5, #0]
    24ce:	89b3      	ldrh	r3, [r6, #12]
    24d0:	061b      	lsls	r3, r3, #24
    24d2:	d411      	bmi.n	24f8 <__swhatbuf_r+0x40>
    24d4:	2380      	movs	r3, #128	; 0x80
    24d6:	00db      	lsls	r3, r3, #3
    24d8:	e00f      	b.n	24fa <__swhatbuf_r+0x42>
    24da:	aa01      	add	r2, sp, #4
    24dc:	f000 fc54 	bl	2d88 <_fstat_r>
    24e0:	2800      	cmp	r0, #0
    24e2:	dbf2      	blt.n	24ca <__swhatbuf_r+0x12>
    24e4:	22f0      	movs	r2, #240	; 0xf0
    24e6:	9b02      	ldr	r3, [sp, #8]
    24e8:	0212      	lsls	r2, r2, #8
    24ea:	4013      	ands	r3, r2
    24ec:	4a05      	ldr	r2, [pc, #20]	; (2504 <__swhatbuf_r+0x4c>)
    24ee:	189b      	adds	r3, r3, r2
    24f0:	425a      	negs	r2, r3
    24f2:	4153      	adcs	r3, r2
    24f4:	602b      	str	r3, [r5, #0]
    24f6:	e7ed      	b.n	24d4 <__swhatbuf_r+0x1c>
    24f8:	2340      	movs	r3, #64	; 0x40
    24fa:	2000      	movs	r0, #0
    24fc:	6023      	str	r3, [r4, #0]
    24fe:	b010      	add	sp, #64	; 0x40
    2500:	bd70      	pop	{r4, r5, r6, pc}
    2502:	46c0      	nop			; (mov r8, r8)
    2504:	ffffe000 	.word	0xffffe000

00002508 <__smakebuf_r>:
    2508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    250a:	2602      	movs	r6, #2
    250c:	898b      	ldrh	r3, [r1, #12]
    250e:	0005      	movs	r5, r0
    2510:	000c      	movs	r4, r1
    2512:	4233      	tst	r3, r6
    2514:	d006      	beq.n	2524 <__smakebuf_r+0x1c>
    2516:	0023      	movs	r3, r4
    2518:	3347      	adds	r3, #71	; 0x47
    251a:	6023      	str	r3, [r4, #0]
    251c:	6123      	str	r3, [r4, #16]
    251e:	2301      	movs	r3, #1
    2520:	6163      	str	r3, [r4, #20]
    2522:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2524:	ab01      	add	r3, sp, #4
    2526:	466a      	mov	r2, sp
    2528:	f7ff ffc6 	bl	24b8 <__swhatbuf_r>
    252c:	9900      	ldr	r1, [sp, #0]
    252e:	0007      	movs	r7, r0
    2530:	0028      	movs	r0, r5
    2532:	f000 f87b 	bl	262c <_malloc_r>
    2536:	2800      	cmp	r0, #0
    2538:	d106      	bne.n	2548 <__smakebuf_r+0x40>
    253a:	220c      	movs	r2, #12
    253c:	5ea3      	ldrsh	r3, [r4, r2]
    253e:	059a      	lsls	r2, r3, #22
    2540:	d4ef      	bmi.n	2522 <__smakebuf_r+0x1a>
    2542:	431e      	orrs	r6, r3
    2544:	81a6      	strh	r6, [r4, #12]
    2546:	e7e6      	b.n	2516 <__smakebuf_r+0xe>
    2548:	4b0d      	ldr	r3, [pc, #52]	; (2580 <__smakebuf_r+0x78>)
    254a:	62ab      	str	r3, [r5, #40]	; 0x28
    254c:	2380      	movs	r3, #128	; 0x80
    254e:	89a2      	ldrh	r2, [r4, #12]
    2550:	6020      	str	r0, [r4, #0]
    2552:	4313      	orrs	r3, r2
    2554:	81a3      	strh	r3, [r4, #12]
    2556:	9b00      	ldr	r3, [sp, #0]
    2558:	6120      	str	r0, [r4, #16]
    255a:	6163      	str	r3, [r4, #20]
    255c:	9b01      	ldr	r3, [sp, #4]
    255e:	2b00      	cmp	r3, #0
    2560:	d00a      	beq.n	2578 <__smakebuf_r+0x70>
    2562:	230e      	movs	r3, #14
    2564:	5ee1      	ldrsh	r1, [r4, r3]
    2566:	0028      	movs	r0, r5
    2568:	f000 fc20 	bl	2dac <_isatty_r>
    256c:	2800      	cmp	r0, #0
    256e:	d003      	beq.n	2578 <__smakebuf_r+0x70>
    2570:	2301      	movs	r3, #1
    2572:	89a2      	ldrh	r2, [r4, #12]
    2574:	4313      	orrs	r3, r2
    2576:	81a3      	strh	r3, [r4, #12]
    2578:	89a0      	ldrh	r0, [r4, #12]
    257a:	4338      	orrs	r0, r7
    257c:	81a0      	strh	r0, [r4, #12]
    257e:	e7d0      	b.n	2522 <__smakebuf_r+0x1a>
    2580:	00002309 	.word	0x00002309

00002584 <malloc>:
    2584:	b510      	push	{r4, lr}
    2586:	4b03      	ldr	r3, [pc, #12]	; (2594 <malloc+0x10>)
    2588:	0001      	movs	r1, r0
    258a:	6818      	ldr	r0, [r3, #0]
    258c:	f000 f84e 	bl	262c <_malloc_r>
    2590:	bd10      	pop	{r4, pc}
    2592:	46c0      	nop			; (mov r8, r8)
    2594:	20000018 	.word	0x20000018

00002598 <_free_r>:
    2598:	b570      	push	{r4, r5, r6, lr}
    259a:	0005      	movs	r5, r0
    259c:	2900      	cmp	r1, #0
    259e:	d010      	beq.n	25c2 <_free_r+0x2a>
    25a0:	1f0c      	subs	r4, r1, #4
    25a2:	6823      	ldr	r3, [r4, #0]
    25a4:	2b00      	cmp	r3, #0
    25a6:	da00      	bge.n	25aa <_free_r+0x12>
    25a8:	18e4      	adds	r4, r4, r3
    25aa:	0028      	movs	r0, r5
    25ac:	f000 fc2f 	bl	2e0e <__malloc_lock>
    25b0:	4a1d      	ldr	r2, [pc, #116]	; (2628 <_free_r+0x90>)
    25b2:	6813      	ldr	r3, [r2, #0]
    25b4:	2b00      	cmp	r3, #0
    25b6:	d105      	bne.n	25c4 <_free_r+0x2c>
    25b8:	6063      	str	r3, [r4, #4]
    25ba:	6014      	str	r4, [r2, #0]
    25bc:	0028      	movs	r0, r5
    25be:	f000 fc27 	bl	2e10 <__malloc_unlock>
    25c2:	bd70      	pop	{r4, r5, r6, pc}
    25c4:	42a3      	cmp	r3, r4
    25c6:	d909      	bls.n	25dc <_free_r+0x44>
    25c8:	6821      	ldr	r1, [r4, #0]
    25ca:	1860      	adds	r0, r4, r1
    25cc:	4283      	cmp	r3, r0
    25ce:	d1f3      	bne.n	25b8 <_free_r+0x20>
    25d0:	6818      	ldr	r0, [r3, #0]
    25d2:	685b      	ldr	r3, [r3, #4]
    25d4:	1841      	adds	r1, r0, r1
    25d6:	6021      	str	r1, [r4, #0]
    25d8:	e7ee      	b.n	25b8 <_free_r+0x20>
    25da:	0013      	movs	r3, r2
    25dc:	685a      	ldr	r2, [r3, #4]
    25de:	2a00      	cmp	r2, #0
    25e0:	d001      	beq.n	25e6 <_free_r+0x4e>
    25e2:	42a2      	cmp	r2, r4
    25e4:	d9f9      	bls.n	25da <_free_r+0x42>
    25e6:	6819      	ldr	r1, [r3, #0]
    25e8:	1858      	adds	r0, r3, r1
    25ea:	42a0      	cmp	r0, r4
    25ec:	d10b      	bne.n	2606 <_free_r+0x6e>
    25ee:	6820      	ldr	r0, [r4, #0]
    25f0:	1809      	adds	r1, r1, r0
    25f2:	1858      	adds	r0, r3, r1
    25f4:	6019      	str	r1, [r3, #0]
    25f6:	4282      	cmp	r2, r0
    25f8:	d1e0      	bne.n	25bc <_free_r+0x24>
    25fa:	6810      	ldr	r0, [r2, #0]
    25fc:	6852      	ldr	r2, [r2, #4]
    25fe:	1841      	adds	r1, r0, r1
    2600:	6019      	str	r1, [r3, #0]
    2602:	605a      	str	r2, [r3, #4]
    2604:	e7da      	b.n	25bc <_free_r+0x24>
    2606:	42a0      	cmp	r0, r4
    2608:	d902      	bls.n	2610 <_free_r+0x78>
    260a:	230c      	movs	r3, #12
    260c:	602b      	str	r3, [r5, #0]
    260e:	e7d5      	b.n	25bc <_free_r+0x24>
    2610:	6821      	ldr	r1, [r4, #0]
    2612:	1860      	adds	r0, r4, r1
    2614:	4282      	cmp	r2, r0
    2616:	d103      	bne.n	2620 <_free_r+0x88>
    2618:	6810      	ldr	r0, [r2, #0]
    261a:	6852      	ldr	r2, [r2, #4]
    261c:	1841      	adds	r1, r0, r1
    261e:	6021      	str	r1, [r4, #0]
    2620:	6062      	str	r2, [r4, #4]
    2622:	605c      	str	r4, [r3, #4]
    2624:	e7ca      	b.n	25bc <_free_r+0x24>
    2626:	46c0      	nop			; (mov r8, r8)
    2628:	200001a0 	.word	0x200001a0

0000262c <_malloc_r>:
    262c:	2303      	movs	r3, #3
    262e:	b570      	push	{r4, r5, r6, lr}
    2630:	1ccd      	adds	r5, r1, #3
    2632:	439d      	bics	r5, r3
    2634:	3508      	adds	r5, #8
    2636:	0006      	movs	r6, r0
    2638:	2d0c      	cmp	r5, #12
    263a:	d21e      	bcs.n	267a <_malloc_r+0x4e>
    263c:	250c      	movs	r5, #12
    263e:	42a9      	cmp	r1, r5
    2640:	d81d      	bhi.n	267e <_malloc_r+0x52>
    2642:	0030      	movs	r0, r6
    2644:	f000 fbe3 	bl	2e0e <__malloc_lock>
    2648:	4a25      	ldr	r2, [pc, #148]	; (26e0 <_malloc_r+0xb4>)
    264a:	6814      	ldr	r4, [r2, #0]
    264c:	0021      	movs	r1, r4
    264e:	2900      	cmp	r1, #0
    2650:	d119      	bne.n	2686 <_malloc_r+0x5a>
    2652:	4c24      	ldr	r4, [pc, #144]	; (26e4 <_malloc_r+0xb8>)
    2654:	6823      	ldr	r3, [r4, #0]
    2656:	2b00      	cmp	r3, #0
    2658:	d103      	bne.n	2662 <_malloc_r+0x36>
    265a:	0030      	movs	r0, r6
    265c:	f000 fb10 	bl	2c80 <_sbrk_r>
    2660:	6020      	str	r0, [r4, #0]
    2662:	0029      	movs	r1, r5
    2664:	0030      	movs	r0, r6
    2666:	f000 fb0b 	bl	2c80 <_sbrk_r>
    266a:	1c43      	adds	r3, r0, #1
    266c:	d12c      	bne.n	26c8 <_malloc_r+0x9c>
    266e:	230c      	movs	r3, #12
    2670:	0030      	movs	r0, r6
    2672:	6033      	str	r3, [r6, #0]
    2674:	f000 fbcc 	bl	2e10 <__malloc_unlock>
    2678:	e003      	b.n	2682 <_malloc_r+0x56>
    267a:	2d00      	cmp	r5, #0
    267c:	dadf      	bge.n	263e <_malloc_r+0x12>
    267e:	230c      	movs	r3, #12
    2680:	6033      	str	r3, [r6, #0]
    2682:	2000      	movs	r0, #0
    2684:	bd70      	pop	{r4, r5, r6, pc}
    2686:	680b      	ldr	r3, [r1, #0]
    2688:	1b5b      	subs	r3, r3, r5
    268a:	d41a      	bmi.n	26c2 <_malloc_r+0x96>
    268c:	2b0b      	cmp	r3, #11
    268e:	d903      	bls.n	2698 <_malloc_r+0x6c>
    2690:	600b      	str	r3, [r1, #0]
    2692:	18cc      	adds	r4, r1, r3
    2694:	6025      	str	r5, [r4, #0]
    2696:	e003      	b.n	26a0 <_malloc_r+0x74>
    2698:	428c      	cmp	r4, r1
    269a:	d10e      	bne.n	26ba <_malloc_r+0x8e>
    269c:	6863      	ldr	r3, [r4, #4]
    269e:	6013      	str	r3, [r2, #0]
    26a0:	0030      	movs	r0, r6
    26a2:	f000 fbb5 	bl	2e10 <__malloc_unlock>
    26a6:	0020      	movs	r0, r4
    26a8:	2207      	movs	r2, #7
    26aa:	300b      	adds	r0, #11
    26ac:	1d23      	adds	r3, r4, #4
    26ae:	4390      	bics	r0, r2
    26b0:	1ac3      	subs	r3, r0, r3
    26b2:	d0e7      	beq.n	2684 <_malloc_r+0x58>
    26b4:	425a      	negs	r2, r3
    26b6:	50e2      	str	r2, [r4, r3]
    26b8:	e7e4      	b.n	2684 <_malloc_r+0x58>
    26ba:	684b      	ldr	r3, [r1, #4]
    26bc:	6063      	str	r3, [r4, #4]
    26be:	000c      	movs	r4, r1
    26c0:	e7ee      	b.n	26a0 <_malloc_r+0x74>
    26c2:	000c      	movs	r4, r1
    26c4:	6849      	ldr	r1, [r1, #4]
    26c6:	e7c2      	b.n	264e <_malloc_r+0x22>
    26c8:	2303      	movs	r3, #3
    26ca:	1cc4      	adds	r4, r0, #3
    26cc:	439c      	bics	r4, r3
    26ce:	42a0      	cmp	r0, r4
    26d0:	d0e0      	beq.n	2694 <_malloc_r+0x68>
    26d2:	1a21      	subs	r1, r4, r0
    26d4:	0030      	movs	r0, r6
    26d6:	f000 fad3 	bl	2c80 <_sbrk_r>
    26da:	1c43      	adds	r3, r0, #1
    26dc:	d1da      	bne.n	2694 <_malloc_r+0x68>
    26de:	e7c6      	b.n	266e <_malloc_r+0x42>
    26e0:	200001a0 	.word	0x200001a0
    26e4:	200001a4 	.word	0x200001a4

000026e8 <__sfputc_r>:
    26e8:	6893      	ldr	r3, [r2, #8]
    26ea:	b510      	push	{r4, lr}
    26ec:	3b01      	subs	r3, #1
    26ee:	6093      	str	r3, [r2, #8]
    26f0:	2b00      	cmp	r3, #0
    26f2:	da05      	bge.n	2700 <__sfputc_r+0x18>
    26f4:	6994      	ldr	r4, [r2, #24]
    26f6:	42a3      	cmp	r3, r4
    26f8:	db08      	blt.n	270c <__sfputc_r+0x24>
    26fa:	b2cb      	uxtb	r3, r1
    26fc:	2b0a      	cmp	r3, #10
    26fe:	d005      	beq.n	270c <__sfputc_r+0x24>
    2700:	6813      	ldr	r3, [r2, #0]
    2702:	1c58      	adds	r0, r3, #1
    2704:	6010      	str	r0, [r2, #0]
    2706:	7019      	strb	r1, [r3, #0]
    2708:	b2c8      	uxtb	r0, r1
    270a:	bd10      	pop	{r4, pc}
    270c:	f7ff fc7a 	bl	2004 <__swbuf_r>
    2710:	e7fb      	b.n	270a <__sfputc_r+0x22>

00002712 <__sfputs_r>:
    2712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2714:	0006      	movs	r6, r0
    2716:	000f      	movs	r7, r1
    2718:	0014      	movs	r4, r2
    271a:	18d5      	adds	r5, r2, r3
    271c:	42ac      	cmp	r4, r5
    271e:	d101      	bne.n	2724 <__sfputs_r+0x12>
    2720:	2000      	movs	r0, #0
    2722:	e007      	b.n	2734 <__sfputs_r+0x22>
    2724:	7821      	ldrb	r1, [r4, #0]
    2726:	003a      	movs	r2, r7
    2728:	0030      	movs	r0, r6
    272a:	f7ff ffdd 	bl	26e8 <__sfputc_r>
    272e:	3401      	adds	r4, #1
    2730:	1c43      	adds	r3, r0, #1
    2732:	d1f3      	bne.n	271c <__sfputs_r+0xa>
    2734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00002738 <_vfiprintf_r>:
    2738:	b5f0      	push	{r4, r5, r6, r7, lr}
    273a:	b09f      	sub	sp, #124	; 0x7c
    273c:	0006      	movs	r6, r0
    273e:	000f      	movs	r7, r1
    2740:	0014      	movs	r4, r2
    2742:	9305      	str	r3, [sp, #20]
    2744:	2800      	cmp	r0, #0
    2746:	d004      	beq.n	2752 <_vfiprintf_r+0x1a>
    2748:	6983      	ldr	r3, [r0, #24]
    274a:	2b00      	cmp	r3, #0
    274c:	d101      	bne.n	2752 <_vfiprintf_r+0x1a>
    274e:	f7ff fe1d 	bl	238c <__sinit>
    2752:	4b7f      	ldr	r3, [pc, #508]	; (2950 <_vfiprintf_r+0x218>)
    2754:	429f      	cmp	r7, r3
    2756:	d15c      	bne.n	2812 <_vfiprintf_r+0xda>
    2758:	6877      	ldr	r7, [r6, #4]
    275a:	89bb      	ldrh	r3, [r7, #12]
    275c:	071b      	lsls	r3, r3, #28
    275e:	d562      	bpl.n	2826 <_vfiprintf_r+0xee>
    2760:	693b      	ldr	r3, [r7, #16]
    2762:	2b00      	cmp	r3, #0
    2764:	d05f      	beq.n	2826 <_vfiprintf_r+0xee>
    2766:	2300      	movs	r3, #0
    2768:	ad06      	add	r5, sp, #24
    276a:	616b      	str	r3, [r5, #20]
    276c:	3320      	adds	r3, #32
    276e:	766b      	strb	r3, [r5, #25]
    2770:	3310      	adds	r3, #16
    2772:	76ab      	strb	r3, [r5, #26]
    2774:	9402      	str	r4, [sp, #8]
    2776:	9c02      	ldr	r4, [sp, #8]
    2778:	7823      	ldrb	r3, [r4, #0]
    277a:	2b00      	cmp	r3, #0
    277c:	d15d      	bne.n	283a <_vfiprintf_r+0x102>
    277e:	9b02      	ldr	r3, [sp, #8]
    2780:	1ae3      	subs	r3, r4, r3
    2782:	9304      	str	r3, [sp, #16]
    2784:	d00d      	beq.n	27a2 <_vfiprintf_r+0x6a>
    2786:	9b04      	ldr	r3, [sp, #16]
    2788:	9a02      	ldr	r2, [sp, #8]
    278a:	0039      	movs	r1, r7
    278c:	0030      	movs	r0, r6
    278e:	f7ff ffc0 	bl	2712 <__sfputs_r>
    2792:	1c43      	adds	r3, r0, #1
    2794:	d100      	bne.n	2798 <_vfiprintf_r+0x60>
    2796:	e0cc      	b.n	2932 <_vfiprintf_r+0x1fa>
    2798:	696a      	ldr	r2, [r5, #20]
    279a:	9b04      	ldr	r3, [sp, #16]
    279c:	4694      	mov	ip, r2
    279e:	4463      	add	r3, ip
    27a0:	616b      	str	r3, [r5, #20]
    27a2:	7823      	ldrb	r3, [r4, #0]
    27a4:	2b00      	cmp	r3, #0
    27a6:	d100      	bne.n	27aa <_vfiprintf_r+0x72>
    27a8:	e0c3      	b.n	2932 <_vfiprintf_r+0x1fa>
    27aa:	2201      	movs	r2, #1
    27ac:	2300      	movs	r3, #0
    27ae:	4252      	negs	r2, r2
    27b0:	606a      	str	r2, [r5, #4]
    27b2:	a902      	add	r1, sp, #8
    27b4:	3254      	adds	r2, #84	; 0x54
    27b6:	1852      	adds	r2, r2, r1
    27b8:	3401      	adds	r4, #1
    27ba:	602b      	str	r3, [r5, #0]
    27bc:	60eb      	str	r3, [r5, #12]
    27be:	60ab      	str	r3, [r5, #8]
    27c0:	7013      	strb	r3, [r2, #0]
    27c2:	65ab      	str	r3, [r5, #88]	; 0x58
    27c4:	7821      	ldrb	r1, [r4, #0]
    27c6:	2205      	movs	r2, #5
    27c8:	4862      	ldr	r0, [pc, #392]	; (2954 <_vfiprintf_r+0x21c>)
    27ca:	f000 fb15 	bl	2df8 <memchr>
    27ce:	1c63      	adds	r3, r4, #1
    27d0:	469c      	mov	ip, r3
    27d2:	2800      	cmp	r0, #0
    27d4:	d135      	bne.n	2842 <_vfiprintf_r+0x10a>
    27d6:	6829      	ldr	r1, [r5, #0]
    27d8:	06cb      	lsls	r3, r1, #27
    27da:	d504      	bpl.n	27e6 <_vfiprintf_r+0xae>
    27dc:	2353      	movs	r3, #83	; 0x53
    27de:	aa02      	add	r2, sp, #8
    27e0:	3020      	adds	r0, #32
    27e2:	189b      	adds	r3, r3, r2
    27e4:	7018      	strb	r0, [r3, #0]
    27e6:	070b      	lsls	r3, r1, #28
    27e8:	d504      	bpl.n	27f4 <_vfiprintf_r+0xbc>
    27ea:	2353      	movs	r3, #83	; 0x53
    27ec:	202b      	movs	r0, #43	; 0x2b
    27ee:	aa02      	add	r2, sp, #8
    27f0:	189b      	adds	r3, r3, r2
    27f2:	7018      	strb	r0, [r3, #0]
    27f4:	7823      	ldrb	r3, [r4, #0]
    27f6:	2b2a      	cmp	r3, #42	; 0x2a
    27f8:	d02c      	beq.n	2854 <_vfiprintf_r+0x11c>
    27fa:	2000      	movs	r0, #0
    27fc:	210a      	movs	r1, #10
    27fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2800:	7822      	ldrb	r2, [r4, #0]
    2802:	3a30      	subs	r2, #48	; 0x30
    2804:	2a09      	cmp	r2, #9
    2806:	d800      	bhi.n	280a <_vfiprintf_r+0xd2>
    2808:	e06b      	b.n	28e2 <_vfiprintf_r+0x1aa>
    280a:	2800      	cmp	r0, #0
    280c:	d02a      	beq.n	2864 <_vfiprintf_r+0x12c>
    280e:	9309      	str	r3, [sp, #36]	; 0x24
    2810:	e028      	b.n	2864 <_vfiprintf_r+0x12c>
    2812:	4b51      	ldr	r3, [pc, #324]	; (2958 <_vfiprintf_r+0x220>)
    2814:	429f      	cmp	r7, r3
    2816:	d101      	bne.n	281c <_vfiprintf_r+0xe4>
    2818:	68b7      	ldr	r7, [r6, #8]
    281a:	e79e      	b.n	275a <_vfiprintf_r+0x22>
    281c:	4b4f      	ldr	r3, [pc, #316]	; (295c <_vfiprintf_r+0x224>)
    281e:	429f      	cmp	r7, r3
    2820:	d19b      	bne.n	275a <_vfiprintf_r+0x22>
    2822:	68f7      	ldr	r7, [r6, #12]
    2824:	e799      	b.n	275a <_vfiprintf_r+0x22>
    2826:	0039      	movs	r1, r7
    2828:	0030      	movs	r0, r6
    282a:	f7ff fc41 	bl	20b0 <__swsetup_r>
    282e:	2800      	cmp	r0, #0
    2830:	d099      	beq.n	2766 <_vfiprintf_r+0x2e>
    2832:	2001      	movs	r0, #1
    2834:	4240      	negs	r0, r0
    2836:	b01f      	add	sp, #124	; 0x7c
    2838:	bdf0      	pop	{r4, r5, r6, r7, pc}
    283a:	2b25      	cmp	r3, #37	; 0x25
    283c:	d09f      	beq.n	277e <_vfiprintf_r+0x46>
    283e:	3401      	adds	r4, #1
    2840:	e79a      	b.n	2778 <_vfiprintf_r+0x40>
    2842:	4b44      	ldr	r3, [pc, #272]	; (2954 <_vfiprintf_r+0x21c>)
    2844:	6829      	ldr	r1, [r5, #0]
    2846:	1ac0      	subs	r0, r0, r3
    2848:	2301      	movs	r3, #1
    284a:	4083      	lsls	r3, r0
    284c:	430b      	orrs	r3, r1
    284e:	602b      	str	r3, [r5, #0]
    2850:	4664      	mov	r4, ip
    2852:	e7b7      	b.n	27c4 <_vfiprintf_r+0x8c>
    2854:	9b05      	ldr	r3, [sp, #20]
    2856:	1d18      	adds	r0, r3, #4
    2858:	681b      	ldr	r3, [r3, #0]
    285a:	9005      	str	r0, [sp, #20]
    285c:	2b00      	cmp	r3, #0
    285e:	db3a      	blt.n	28d6 <_vfiprintf_r+0x19e>
    2860:	9309      	str	r3, [sp, #36]	; 0x24
    2862:	4664      	mov	r4, ip
    2864:	7823      	ldrb	r3, [r4, #0]
    2866:	2b2e      	cmp	r3, #46	; 0x2e
    2868:	d10b      	bne.n	2882 <_vfiprintf_r+0x14a>
    286a:	7863      	ldrb	r3, [r4, #1]
    286c:	1c62      	adds	r2, r4, #1
    286e:	2b2a      	cmp	r3, #42	; 0x2a
    2870:	d13f      	bne.n	28f2 <_vfiprintf_r+0x1ba>
    2872:	9b05      	ldr	r3, [sp, #20]
    2874:	3402      	adds	r4, #2
    2876:	1d1a      	adds	r2, r3, #4
    2878:	681b      	ldr	r3, [r3, #0]
    287a:	9205      	str	r2, [sp, #20]
    287c:	2b00      	cmp	r3, #0
    287e:	db35      	blt.n	28ec <_vfiprintf_r+0x1b4>
    2880:	9307      	str	r3, [sp, #28]
    2882:	7821      	ldrb	r1, [r4, #0]
    2884:	2203      	movs	r2, #3
    2886:	4836      	ldr	r0, [pc, #216]	; (2960 <_vfiprintf_r+0x228>)
    2888:	f000 fab6 	bl	2df8 <memchr>
    288c:	2800      	cmp	r0, #0
    288e:	d007      	beq.n	28a0 <_vfiprintf_r+0x168>
    2890:	4b33      	ldr	r3, [pc, #204]	; (2960 <_vfiprintf_r+0x228>)
    2892:	682a      	ldr	r2, [r5, #0]
    2894:	1ac0      	subs	r0, r0, r3
    2896:	2340      	movs	r3, #64	; 0x40
    2898:	4083      	lsls	r3, r0
    289a:	4313      	orrs	r3, r2
    289c:	602b      	str	r3, [r5, #0]
    289e:	3401      	adds	r4, #1
    28a0:	7821      	ldrb	r1, [r4, #0]
    28a2:	1c63      	adds	r3, r4, #1
    28a4:	2206      	movs	r2, #6
    28a6:	482f      	ldr	r0, [pc, #188]	; (2964 <_vfiprintf_r+0x22c>)
    28a8:	9302      	str	r3, [sp, #8]
    28aa:	7629      	strb	r1, [r5, #24]
    28ac:	f000 faa4 	bl	2df8 <memchr>
    28b0:	2800      	cmp	r0, #0
    28b2:	d044      	beq.n	293e <_vfiprintf_r+0x206>
    28b4:	4b2c      	ldr	r3, [pc, #176]	; (2968 <_vfiprintf_r+0x230>)
    28b6:	2b00      	cmp	r3, #0
    28b8:	d12f      	bne.n	291a <_vfiprintf_r+0x1e2>
    28ba:	6829      	ldr	r1, [r5, #0]
    28bc:	9b05      	ldr	r3, [sp, #20]
    28be:	2207      	movs	r2, #7
    28c0:	05c9      	lsls	r1, r1, #23
    28c2:	d528      	bpl.n	2916 <_vfiprintf_r+0x1de>
    28c4:	189b      	adds	r3, r3, r2
    28c6:	4393      	bics	r3, r2
    28c8:	3308      	adds	r3, #8
    28ca:	9305      	str	r3, [sp, #20]
    28cc:	696b      	ldr	r3, [r5, #20]
    28ce:	9a03      	ldr	r2, [sp, #12]
    28d0:	189b      	adds	r3, r3, r2
    28d2:	616b      	str	r3, [r5, #20]
    28d4:	e74f      	b.n	2776 <_vfiprintf_r+0x3e>
    28d6:	425b      	negs	r3, r3
    28d8:	60eb      	str	r3, [r5, #12]
    28da:	2302      	movs	r3, #2
    28dc:	430b      	orrs	r3, r1
    28de:	602b      	str	r3, [r5, #0]
    28e0:	e7bf      	b.n	2862 <_vfiprintf_r+0x12a>
    28e2:	434b      	muls	r3, r1
    28e4:	3401      	adds	r4, #1
    28e6:	189b      	adds	r3, r3, r2
    28e8:	2001      	movs	r0, #1
    28ea:	e789      	b.n	2800 <_vfiprintf_r+0xc8>
    28ec:	2301      	movs	r3, #1
    28ee:	425b      	negs	r3, r3
    28f0:	e7c6      	b.n	2880 <_vfiprintf_r+0x148>
    28f2:	2300      	movs	r3, #0
    28f4:	0014      	movs	r4, r2
    28f6:	200a      	movs	r0, #10
    28f8:	001a      	movs	r2, r3
    28fa:	606b      	str	r3, [r5, #4]
    28fc:	7821      	ldrb	r1, [r4, #0]
    28fe:	3930      	subs	r1, #48	; 0x30
    2900:	2909      	cmp	r1, #9
    2902:	d903      	bls.n	290c <_vfiprintf_r+0x1d4>
    2904:	2b00      	cmp	r3, #0
    2906:	d0bc      	beq.n	2882 <_vfiprintf_r+0x14a>
    2908:	9207      	str	r2, [sp, #28]
    290a:	e7ba      	b.n	2882 <_vfiprintf_r+0x14a>
    290c:	4342      	muls	r2, r0
    290e:	3401      	adds	r4, #1
    2910:	1852      	adds	r2, r2, r1
    2912:	2301      	movs	r3, #1
    2914:	e7f2      	b.n	28fc <_vfiprintf_r+0x1c4>
    2916:	3307      	adds	r3, #7
    2918:	e7d5      	b.n	28c6 <_vfiprintf_r+0x18e>
    291a:	ab05      	add	r3, sp, #20
    291c:	9300      	str	r3, [sp, #0]
    291e:	003a      	movs	r2, r7
    2920:	4b12      	ldr	r3, [pc, #72]	; (296c <_vfiprintf_r+0x234>)
    2922:	0029      	movs	r1, r5
    2924:	0030      	movs	r0, r6
    2926:	e000      	b.n	292a <_vfiprintf_r+0x1f2>
    2928:	bf00      	nop
    292a:	9003      	str	r0, [sp, #12]
    292c:	9b03      	ldr	r3, [sp, #12]
    292e:	3301      	adds	r3, #1
    2930:	d1cc      	bne.n	28cc <_vfiprintf_r+0x194>
    2932:	89bb      	ldrh	r3, [r7, #12]
    2934:	065b      	lsls	r3, r3, #25
    2936:	d500      	bpl.n	293a <_vfiprintf_r+0x202>
    2938:	e77b      	b.n	2832 <_vfiprintf_r+0xfa>
    293a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    293c:	e77b      	b.n	2836 <_vfiprintf_r+0xfe>
    293e:	ab05      	add	r3, sp, #20
    2940:	9300      	str	r3, [sp, #0]
    2942:	003a      	movs	r2, r7
    2944:	4b09      	ldr	r3, [pc, #36]	; (296c <_vfiprintf_r+0x234>)
    2946:	0029      	movs	r1, r5
    2948:	0030      	movs	r0, r6
    294a:	f000 f87f 	bl	2a4c <_printf_i>
    294e:	e7ec      	b.n	292a <_vfiprintf_r+0x1f2>
    2950:	00002ef8 	.word	0x00002ef8
    2954:	00002f38 	.word	0x00002f38
    2958:	00002f18 	.word	0x00002f18
    295c:	00002ed8 	.word	0x00002ed8
    2960:	00002f3e 	.word	0x00002f3e
    2964:	00002f42 	.word	0x00002f42
    2968:	00000000 	.word	0x00000000
    296c:	00002713 	.word	0x00002713

00002970 <_printf_common>:
    2970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2972:	0015      	movs	r5, r2
    2974:	9301      	str	r3, [sp, #4]
    2976:	688a      	ldr	r2, [r1, #8]
    2978:	690b      	ldr	r3, [r1, #16]
    297a:	9000      	str	r0, [sp, #0]
    297c:	000c      	movs	r4, r1
    297e:	4293      	cmp	r3, r2
    2980:	da00      	bge.n	2984 <_printf_common+0x14>
    2982:	0013      	movs	r3, r2
    2984:	0022      	movs	r2, r4
    2986:	602b      	str	r3, [r5, #0]
    2988:	3243      	adds	r2, #67	; 0x43
    298a:	7812      	ldrb	r2, [r2, #0]
    298c:	2a00      	cmp	r2, #0
    298e:	d001      	beq.n	2994 <_printf_common+0x24>
    2990:	3301      	adds	r3, #1
    2992:	602b      	str	r3, [r5, #0]
    2994:	6823      	ldr	r3, [r4, #0]
    2996:	069b      	lsls	r3, r3, #26
    2998:	d502      	bpl.n	29a0 <_printf_common+0x30>
    299a:	682b      	ldr	r3, [r5, #0]
    299c:	3302      	adds	r3, #2
    299e:	602b      	str	r3, [r5, #0]
    29a0:	2706      	movs	r7, #6
    29a2:	6823      	ldr	r3, [r4, #0]
    29a4:	401f      	ands	r7, r3
    29a6:	d027      	beq.n	29f8 <_printf_common+0x88>
    29a8:	0023      	movs	r3, r4
    29aa:	3343      	adds	r3, #67	; 0x43
    29ac:	781b      	ldrb	r3, [r3, #0]
    29ae:	1e5a      	subs	r2, r3, #1
    29b0:	4193      	sbcs	r3, r2
    29b2:	6822      	ldr	r2, [r4, #0]
    29b4:	0692      	lsls	r2, r2, #26
    29b6:	d430      	bmi.n	2a1a <_printf_common+0xaa>
    29b8:	0022      	movs	r2, r4
    29ba:	9901      	ldr	r1, [sp, #4]
    29bc:	3243      	adds	r2, #67	; 0x43
    29be:	9800      	ldr	r0, [sp, #0]
    29c0:	9e08      	ldr	r6, [sp, #32]
    29c2:	47b0      	blx	r6
    29c4:	1c43      	adds	r3, r0, #1
    29c6:	d025      	beq.n	2a14 <_printf_common+0xa4>
    29c8:	2306      	movs	r3, #6
    29ca:	6820      	ldr	r0, [r4, #0]
    29cc:	682a      	ldr	r2, [r5, #0]
    29ce:	68e1      	ldr	r1, [r4, #12]
    29d0:	4003      	ands	r3, r0
    29d2:	2500      	movs	r5, #0
    29d4:	2b04      	cmp	r3, #4
    29d6:	d103      	bne.n	29e0 <_printf_common+0x70>
    29d8:	1a8d      	subs	r5, r1, r2
    29da:	43eb      	mvns	r3, r5
    29dc:	17db      	asrs	r3, r3, #31
    29de:	401d      	ands	r5, r3
    29e0:	68a3      	ldr	r3, [r4, #8]
    29e2:	6922      	ldr	r2, [r4, #16]
    29e4:	4293      	cmp	r3, r2
    29e6:	dd01      	ble.n	29ec <_printf_common+0x7c>
    29e8:	1a9b      	subs	r3, r3, r2
    29ea:	18ed      	adds	r5, r5, r3
    29ec:	2700      	movs	r7, #0
    29ee:	42bd      	cmp	r5, r7
    29f0:	d120      	bne.n	2a34 <_printf_common+0xc4>
    29f2:	2000      	movs	r0, #0
    29f4:	e010      	b.n	2a18 <_printf_common+0xa8>
    29f6:	3701      	adds	r7, #1
    29f8:	68e3      	ldr	r3, [r4, #12]
    29fa:	682a      	ldr	r2, [r5, #0]
    29fc:	1a9b      	subs	r3, r3, r2
    29fe:	429f      	cmp	r7, r3
    2a00:	dad2      	bge.n	29a8 <_printf_common+0x38>
    2a02:	0022      	movs	r2, r4
    2a04:	2301      	movs	r3, #1
    2a06:	3219      	adds	r2, #25
    2a08:	9901      	ldr	r1, [sp, #4]
    2a0a:	9800      	ldr	r0, [sp, #0]
    2a0c:	9e08      	ldr	r6, [sp, #32]
    2a0e:	47b0      	blx	r6
    2a10:	1c43      	adds	r3, r0, #1
    2a12:	d1f0      	bne.n	29f6 <_printf_common+0x86>
    2a14:	2001      	movs	r0, #1
    2a16:	4240      	negs	r0, r0
    2a18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2a1a:	2030      	movs	r0, #48	; 0x30
    2a1c:	18e1      	adds	r1, r4, r3
    2a1e:	3143      	adds	r1, #67	; 0x43
    2a20:	7008      	strb	r0, [r1, #0]
    2a22:	0021      	movs	r1, r4
    2a24:	1c5a      	adds	r2, r3, #1
    2a26:	3145      	adds	r1, #69	; 0x45
    2a28:	7809      	ldrb	r1, [r1, #0]
    2a2a:	18a2      	adds	r2, r4, r2
    2a2c:	3243      	adds	r2, #67	; 0x43
    2a2e:	3302      	adds	r3, #2
    2a30:	7011      	strb	r1, [r2, #0]
    2a32:	e7c1      	b.n	29b8 <_printf_common+0x48>
    2a34:	0022      	movs	r2, r4
    2a36:	2301      	movs	r3, #1
    2a38:	321a      	adds	r2, #26
    2a3a:	9901      	ldr	r1, [sp, #4]
    2a3c:	9800      	ldr	r0, [sp, #0]
    2a3e:	9e08      	ldr	r6, [sp, #32]
    2a40:	47b0      	blx	r6
    2a42:	1c43      	adds	r3, r0, #1
    2a44:	d0e6      	beq.n	2a14 <_printf_common+0xa4>
    2a46:	3701      	adds	r7, #1
    2a48:	e7d1      	b.n	29ee <_printf_common+0x7e>
	...

00002a4c <_printf_i>:
    2a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a4e:	b08b      	sub	sp, #44	; 0x2c
    2a50:	9206      	str	r2, [sp, #24]
    2a52:	000a      	movs	r2, r1
    2a54:	3243      	adds	r2, #67	; 0x43
    2a56:	9307      	str	r3, [sp, #28]
    2a58:	9005      	str	r0, [sp, #20]
    2a5a:	9204      	str	r2, [sp, #16]
    2a5c:	7e0a      	ldrb	r2, [r1, #24]
    2a5e:	000c      	movs	r4, r1
    2a60:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2a62:	2a6e      	cmp	r2, #110	; 0x6e
    2a64:	d100      	bne.n	2a68 <_printf_i+0x1c>
    2a66:	e08f      	b.n	2b88 <_printf_i+0x13c>
    2a68:	d817      	bhi.n	2a9a <_printf_i+0x4e>
    2a6a:	2a63      	cmp	r2, #99	; 0x63
    2a6c:	d02c      	beq.n	2ac8 <_printf_i+0x7c>
    2a6e:	d808      	bhi.n	2a82 <_printf_i+0x36>
    2a70:	2a00      	cmp	r2, #0
    2a72:	d100      	bne.n	2a76 <_printf_i+0x2a>
    2a74:	e099      	b.n	2baa <_printf_i+0x15e>
    2a76:	2a58      	cmp	r2, #88	; 0x58
    2a78:	d054      	beq.n	2b24 <_printf_i+0xd8>
    2a7a:	0026      	movs	r6, r4
    2a7c:	3642      	adds	r6, #66	; 0x42
    2a7e:	7032      	strb	r2, [r6, #0]
    2a80:	e029      	b.n	2ad6 <_printf_i+0x8a>
    2a82:	2a64      	cmp	r2, #100	; 0x64
    2a84:	d001      	beq.n	2a8a <_printf_i+0x3e>
    2a86:	2a69      	cmp	r2, #105	; 0x69
    2a88:	d1f7      	bne.n	2a7a <_printf_i+0x2e>
    2a8a:	6821      	ldr	r1, [r4, #0]
    2a8c:	681a      	ldr	r2, [r3, #0]
    2a8e:	0608      	lsls	r0, r1, #24
    2a90:	d523      	bpl.n	2ada <_printf_i+0x8e>
    2a92:	1d11      	adds	r1, r2, #4
    2a94:	6019      	str	r1, [r3, #0]
    2a96:	6815      	ldr	r5, [r2, #0]
    2a98:	e025      	b.n	2ae6 <_printf_i+0x9a>
    2a9a:	2a73      	cmp	r2, #115	; 0x73
    2a9c:	d100      	bne.n	2aa0 <_printf_i+0x54>
    2a9e:	e088      	b.n	2bb2 <_printf_i+0x166>
    2aa0:	d808      	bhi.n	2ab4 <_printf_i+0x68>
    2aa2:	2a6f      	cmp	r2, #111	; 0x6f
    2aa4:	d029      	beq.n	2afa <_printf_i+0xae>
    2aa6:	2a70      	cmp	r2, #112	; 0x70
    2aa8:	d1e7      	bne.n	2a7a <_printf_i+0x2e>
    2aaa:	2220      	movs	r2, #32
    2aac:	6809      	ldr	r1, [r1, #0]
    2aae:	430a      	orrs	r2, r1
    2ab0:	6022      	str	r2, [r4, #0]
    2ab2:	e003      	b.n	2abc <_printf_i+0x70>
    2ab4:	2a75      	cmp	r2, #117	; 0x75
    2ab6:	d020      	beq.n	2afa <_printf_i+0xae>
    2ab8:	2a78      	cmp	r2, #120	; 0x78
    2aba:	d1de      	bne.n	2a7a <_printf_i+0x2e>
    2abc:	0022      	movs	r2, r4
    2abe:	2178      	movs	r1, #120	; 0x78
    2ac0:	3245      	adds	r2, #69	; 0x45
    2ac2:	7011      	strb	r1, [r2, #0]
    2ac4:	4a6c      	ldr	r2, [pc, #432]	; (2c78 <_printf_i+0x22c>)
    2ac6:	e030      	b.n	2b2a <_printf_i+0xde>
    2ac8:	000e      	movs	r6, r1
    2aca:	681a      	ldr	r2, [r3, #0]
    2acc:	3642      	adds	r6, #66	; 0x42
    2ace:	1d11      	adds	r1, r2, #4
    2ad0:	6019      	str	r1, [r3, #0]
    2ad2:	6813      	ldr	r3, [r2, #0]
    2ad4:	7033      	strb	r3, [r6, #0]
    2ad6:	2301      	movs	r3, #1
    2ad8:	e079      	b.n	2bce <_printf_i+0x182>
    2ada:	0649      	lsls	r1, r1, #25
    2adc:	d5d9      	bpl.n	2a92 <_printf_i+0x46>
    2ade:	1d11      	adds	r1, r2, #4
    2ae0:	6019      	str	r1, [r3, #0]
    2ae2:	2300      	movs	r3, #0
    2ae4:	5ed5      	ldrsh	r5, [r2, r3]
    2ae6:	2d00      	cmp	r5, #0
    2ae8:	da03      	bge.n	2af2 <_printf_i+0xa6>
    2aea:	232d      	movs	r3, #45	; 0x2d
    2aec:	9a04      	ldr	r2, [sp, #16]
    2aee:	426d      	negs	r5, r5
    2af0:	7013      	strb	r3, [r2, #0]
    2af2:	4b62      	ldr	r3, [pc, #392]	; (2c7c <_printf_i+0x230>)
    2af4:	270a      	movs	r7, #10
    2af6:	9303      	str	r3, [sp, #12]
    2af8:	e02f      	b.n	2b5a <_printf_i+0x10e>
    2afa:	6820      	ldr	r0, [r4, #0]
    2afc:	6819      	ldr	r1, [r3, #0]
    2afe:	0605      	lsls	r5, r0, #24
    2b00:	d503      	bpl.n	2b0a <_printf_i+0xbe>
    2b02:	1d08      	adds	r0, r1, #4
    2b04:	6018      	str	r0, [r3, #0]
    2b06:	680d      	ldr	r5, [r1, #0]
    2b08:	e005      	b.n	2b16 <_printf_i+0xca>
    2b0a:	0640      	lsls	r0, r0, #25
    2b0c:	d5f9      	bpl.n	2b02 <_printf_i+0xb6>
    2b0e:	680d      	ldr	r5, [r1, #0]
    2b10:	1d08      	adds	r0, r1, #4
    2b12:	6018      	str	r0, [r3, #0]
    2b14:	b2ad      	uxth	r5, r5
    2b16:	4b59      	ldr	r3, [pc, #356]	; (2c7c <_printf_i+0x230>)
    2b18:	2708      	movs	r7, #8
    2b1a:	9303      	str	r3, [sp, #12]
    2b1c:	2a6f      	cmp	r2, #111	; 0x6f
    2b1e:	d018      	beq.n	2b52 <_printf_i+0x106>
    2b20:	270a      	movs	r7, #10
    2b22:	e016      	b.n	2b52 <_printf_i+0x106>
    2b24:	3145      	adds	r1, #69	; 0x45
    2b26:	700a      	strb	r2, [r1, #0]
    2b28:	4a54      	ldr	r2, [pc, #336]	; (2c7c <_printf_i+0x230>)
    2b2a:	9203      	str	r2, [sp, #12]
    2b2c:	681a      	ldr	r2, [r3, #0]
    2b2e:	6821      	ldr	r1, [r4, #0]
    2b30:	1d10      	adds	r0, r2, #4
    2b32:	6018      	str	r0, [r3, #0]
    2b34:	6815      	ldr	r5, [r2, #0]
    2b36:	0608      	lsls	r0, r1, #24
    2b38:	d522      	bpl.n	2b80 <_printf_i+0x134>
    2b3a:	07cb      	lsls	r3, r1, #31
    2b3c:	d502      	bpl.n	2b44 <_printf_i+0xf8>
    2b3e:	2320      	movs	r3, #32
    2b40:	4319      	orrs	r1, r3
    2b42:	6021      	str	r1, [r4, #0]
    2b44:	2710      	movs	r7, #16
    2b46:	2d00      	cmp	r5, #0
    2b48:	d103      	bne.n	2b52 <_printf_i+0x106>
    2b4a:	2320      	movs	r3, #32
    2b4c:	6822      	ldr	r2, [r4, #0]
    2b4e:	439a      	bics	r2, r3
    2b50:	6022      	str	r2, [r4, #0]
    2b52:	0023      	movs	r3, r4
    2b54:	2200      	movs	r2, #0
    2b56:	3343      	adds	r3, #67	; 0x43
    2b58:	701a      	strb	r2, [r3, #0]
    2b5a:	6863      	ldr	r3, [r4, #4]
    2b5c:	60a3      	str	r3, [r4, #8]
    2b5e:	2b00      	cmp	r3, #0
    2b60:	db5c      	blt.n	2c1c <_printf_i+0x1d0>
    2b62:	2204      	movs	r2, #4
    2b64:	6821      	ldr	r1, [r4, #0]
    2b66:	4391      	bics	r1, r2
    2b68:	6021      	str	r1, [r4, #0]
    2b6a:	2d00      	cmp	r5, #0
    2b6c:	d158      	bne.n	2c20 <_printf_i+0x1d4>
    2b6e:	9e04      	ldr	r6, [sp, #16]
    2b70:	2b00      	cmp	r3, #0
    2b72:	d064      	beq.n	2c3e <_printf_i+0x1f2>
    2b74:	0026      	movs	r6, r4
    2b76:	9b03      	ldr	r3, [sp, #12]
    2b78:	3642      	adds	r6, #66	; 0x42
    2b7a:	781b      	ldrb	r3, [r3, #0]
    2b7c:	7033      	strb	r3, [r6, #0]
    2b7e:	e05e      	b.n	2c3e <_printf_i+0x1f2>
    2b80:	0648      	lsls	r0, r1, #25
    2b82:	d5da      	bpl.n	2b3a <_printf_i+0xee>
    2b84:	b2ad      	uxth	r5, r5
    2b86:	e7d8      	b.n	2b3a <_printf_i+0xee>
    2b88:	6809      	ldr	r1, [r1, #0]
    2b8a:	681a      	ldr	r2, [r3, #0]
    2b8c:	0608      	lsls	r0, r1, #24
    2b8e:	d505      	bpl.n	2b9c <_printf_i+0x150>
    2b90:	1d11      	adds	r1, r2, #4
    2b92:	6019      	str	r1, [r3, #0]
    2b94:	6813      	ldr	r3, [r2, #0]
    2b96:	6962      	ldr	r2, [r4, #20]
    2b98:	601a      	str	r2, [r3, #0]
    2b9a:	e006      	b.n	2baa <_printf_i+0x15e>
    2b9c:	0649      	lsls	r1, r1, #25
    2b9e:	d5f7      	bpl.n	2b90 <_printf_i+0x144>
    2ba0:	1d11      	adds	r1, r2, #4
    2ba2:	6019      	str	r1, [r3, #0]
    2ba4:	6813      	ldr	r3, [r2, #0]
    2ba6:	8aa2      	ldrh	r2, [r4, #20]
    2ba8:	801a      	strh	r2, [r3, #0]
    2baa:	2300      	movs	r3, #0
    2bac:	9e04      	ldr	r6, [sp, #16]
    2bae:	6123      	str	r3, [r4, #16]
    2bb0:	e054      	b.n	2c5c <_printf_i+0x210>
    2bb2:	681a      	ldr	r2, [r3, #0]
    2bb4:	1d11      	adds	r1, r2, #4
    2bb6:	6019      	str	r1, [r3, #0]
    2bb8:	6816      	ldr	r6, [r2, #0]
    2bba:	2100      	movs	r1, #0
    2bbc:	6862      	ldr	r2, [r4, #4]
    2bbe:	0030      	movs	r0, r6
    2bc0:	f000 f91a 	bl	2df8 <memchr>
    2bc4:	2800      	cmp	r0, #0
    2bc6:	d001      	beq.n	2bcc <_printf_i+0x180>
    2bc8:	1b80      	subs	r0, r0, r6
    2bca:	6060      	str	r0, [r4, #4]
    2bcc:	6863      	ldr	r3, [r4, #4]
    2bce:	6123      	str	r3, [r4, #16]
    2bd0:	2300      	movs	r3, #0
    2bd2:	9a04      	ldr	r2, [sp, #16]
    2bd4:	7013      	strb	r3, [r2, #0]
    2bd6:	e041      	b.n	2c5c <_printf_i+0x210>
    2bd8:	6923      	ldr	r3, [r4, #16]
    2bda:	0032      	movs	r2, r6
    2bdc:	9906      	ldr	r1, [sp, #24]
    2bde:	9805      	ldr	r0, [sp, #20]
    2be0:	9d07      	ldr	r5, [sp, #28]
    2be2:	47a8      	blx	r5
    2be4:	1c43      	adds	r3, r0, #1
    2be6:	d043      	beq.n	2c70 <_printf_i+0x224>
    2be8:	6823      	ldr	r3, [r4, #0]
    2bea:	2500      	movs	r5, #0
    2bec:	079b      	lsls	r3, r3, #30
    2bee:	d40f      	bmi.n	2c10 <_printf_i+0x1c4>
    2bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2bf2:	68e0      	ldr	r0, [r4, #12]
    2bf4:	4298      	cmp	r0, r3
    2bf6:	da3d      	bge.n	2c74 <_printf_i+0x228>
    2bf8:	0018      	movs	r0, r3
    2bfa:	e03b      	b.n	2c74 <_printf_i+0x228>
    2bfc:	0022      	movs	r2, r4
    2bfe:	2301      	movs	r3, #1
    2c00:	3219      	adds	r2, #25
    2c02:	9906      	ldr	r1, [sp, #24]
    2c04:	9805      	ldr	r0, [sp, #20]
    2c06:	9e07      	ldr	r6, [sp, #28]
    2c08:	47b0      	blx	r6
    2c0a:	1c43      	adds	r3, r0, #1
    2c0c:	d030      	beq.n	2c70 <_printf_i+0x224>
    2c0e:	3501      	adds	r5, #1
    2c10:	68e3      	ldr	r3, [r4, #12]
    2c12:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2c14:	1a9b      	subs	r3, r3, r2
    2c16:	429d      	cmp	r5, r3
    2c18:	dbf0      	blt.n	2bfc <_printf_i+0x1b0>
    2c1a:	e7e9      	b.n	2bf0 <_printf_i+0x1a4>
    2c1c:	2d00      	cmp	r5, #0
    2c1e:	d0a9      	beq.n	2b74 <_printf_i+0x128>
    2c20:	9e04      	ldr	r6, [sp, #16]
    2c22:	0028      	movs	r0, r5
    2c24:	0039      	movs	r1, r7
    2c26:	f7ff f857 	bl	1cd8 <__aeabi_uidivmod>
    2c2a:	9b03      	ldr	r3, [sp, #12]
    2c2c:	3e01      	subs	r6, #1
    2c2e:	5c5b      	ldrb	r3, [r3, r1]
    2c30:	0028      	movs	r0, r5
    2c32:	7033      	strb	r3, [r6, #0]
    2c34:	0039      	movs	r1, r7
    2c36:	f7fe ffc9 	bl	1bcc <__udivsi3>
    2c3a:	1e05      	subs	r5, r0, #0
    2c3c:	d1f1      	bne.n	2c22 <_printf_i+0x1d6>
    2c3e:	2f08      	cmp	r7, #8
    2c40:	d109      	bne.n	2c56 <_printf_i+0x20a>
    2c42:	6823      	ldr	r3, [r4, #0]
    2c44:	07db      	lsls	r3, r3, #31
    2c46:	d506      	bpl.n	2c56 <_printf_i+0x20a>
    2c48:	6863      	ldr	r3, [r4, #4]
    2c4a:	6922      	ldr	r2, [r4, #16]
    2c4c:	4293      	cmp	r3, r2
    2c4e:	dc02      	bgt.n	2c56 <_printf_i+0x20a>
    2c50:	2330      	movs	r3, #48	; 0x30
    2c52:	3e01      	subs	r6, #1
    2c54:	7033      	strb	r3, [r6, #0]
    2c56:	9b04      	ldr	r3, [sp, #16]
    2c58:	1b9b      	subs	r3, r3, r6
    2c5a:	6123      	str	r3, [r4, #16]
    2c5c:	9b07      	ldr	r3, [sp, #28]
    2c5e:	aa09      	add	r2, sp, #36	; 0x24
    2c60:	9300      	str	r3, [sp, #0]
    2c62:	0021      	movs	r1, r4
    2c64:	9b06      	ldr	r3, [sp, #24]
    2c66:	9805      	ldr	r0, [sp, #20]
    2c68:	f7ff fe82 	bl	2970 <_printf_common>
    2c6c:	1c43      	adds	r3, r0, #1
    2c6e:	d1b3      	bne.n	2bd8 <_printf_i+0x18c>
    2c70:	2001      	movs	r0, #1
    2c72:	4240      	negs	r0, r0
    2c74:	b00b      	add	sp, #44	; 0x2c
    2c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c78:	00002f5a 	.word	0x00002f5a
    2c7c:	00002f49 	.word	0x00002f49

00002c80 <_sbrk_r>:
    2c80:	2300      	movs	r3, #0
    2c82:	b570      	push	{r4, r5, r6, lr}
    2c84:	4c06      	ldr	r4, [pc, #24]	; (2ca0 <_sbrk_r+0x20>)
    2c86:	0005      	movs	r5, r0
    2c88:	0008      	movs	r0, r1
    2c8a:	6023      	str	r3, [r4, #0]
    2c8c:	f7fe fd9a 	bl	17c4 <_sbrk>
    2c90:	1c43      	adds	r3, r0, #1
    2c92:	d103      	bne.n	2c9c <_sbrk_r+0x1c>
    2c94:	6823      	ldr	r3, [r4, #0]
    2c96:	2b00      	cmp	r3, #0
    2c98:	d000      	beq.n	2c9c <_sbrk_r+0x1c>
    2c9a:	602b      	str	r3, [r5, #0]
    2c9c:	bd70      	pop	{r4, r5, r6, pc}
    2c9e:	46c0      	nop			; (mov r8, r8)
    2ca0:	200001fc 	.word	0x200001fc

00002ca4 <__sread>:
    2ca4:	b570      	push	{r4, r5, r6, lr}
    2ca6:	000c      	movs	r4, r1
    2ca8:	250e      	movs	r5, #14
    2caa:	5f49      	ldrsh	r1, [r1, r5]
    2cac:	f000 f8b2 	bl	2e14 <_read_r>
    2cb0:	2800      	cmp	r0, #0
    2cb2:	db03      	blt.n	2cbc <__sread+0x18>
    2cb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2cb6:	181b      	adds	r3, r3, r0
    2cb8:	6563      	str	r3, [r4, #84]	; 0x54
    2cba:	bd70      	pop	{r4, r5, r6, pc}
    2cbc:	89a3      	ldrh	r3, [r4, #12]
    2cbe:	4a02      	ldr	r2, [pc, #8]	; (2cc8 <__sread+0x24>)
    2cc0:	4013      	ands	r3, r2
    2cc2:	81a3      	strh	r3, [r4, #12]
    2cc4:	e7f9      	b.n	2cba <__sread+0x16>
    2cc6:	46c0      	nop			; (mov r8, r8)
    2cc8:	ffffefff 	.word	0xffffefff

00002ccc <__swrite>:
    2ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2cce:	001f      	movs	r7, r3
    2cd0:	898b      	ldrh	r3, [r1, #12]
    2cd2:	0005      	movs	r5, r0
    2cd4:	000c      	movs	r4, r1
    2cd6:	0016      	movs	r6, r2
    2cd8:	05db      	lsls	r3, r3, #23
    2cda:	d505      	bpl.n	2ce8 <__swrite+0x1c>
    2cdc:	230e      	movs	r3, #14
    2cde:	5ec9      	ldrsh	r1, [r1, r3]
    2ce0:	2200      	movs	r2, #0
    2ce2:	2302      	movs	r3, #2
    2ce4:	f000 f874 	bl	2dd0 <_lseek_r>
    2ce8:	89a3      	ldrh	r3, [r4, #12]
    2cea:	4a05      	ldr	r2, [pc, #20]	; (2d00 <__swrite+0x34>)
    2cec:	0028      	movs	r0, r5
    2cee:	4013      	ands	r3, r2
    2cf0:	81a3      	strh	r3, [r4, #12]
    2cf2:	0032      	movs	r2, r6
    2cf4:	230e      	movs	r3, #14
    2cf6:	5ee1      	ldrsh	r1, [r4, r3]
    2cf8:	003b      	movs	r3, r7
    2cfa:	f000 f81f 	bl	2d3c <_write_r>
    2cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d00:	ffffefff 	.word	0xffffefff

00002d04 <__sseek>:
    2d04:	b570      	push	{r4, r5, r6, lr}
    2d06:	000c      	movs	r4, r1
    2d08:	250e      	movs	r5, #14
    2d0a:	5f49      	ldrsh	r1, [r1, r5]
    2d0c:	f000 f860 	bl	2dd0 <_lseek_r>
    2d10:	89a3      	ldrh	r3, [r4, #12]
    2d12:	1c42      	adds	r2, r0, #1
    2d14:	d103      	bne.n	2d1e <__sseek+0x1a>
    2d16:	4a05      	ldr	r2, [pc, #20]	; (2d2c <__sseek+0x28>)
    2d18:	4013      	ands	r3, r2
    2d1a:	81a3      	strh	r3, [r4, #12]
    2d1c:	bd70      	pop	{r4, r5, r6, pc}
    2d1e:	2280      	movs	r2, #128	; 0x80
    2d20:	0152      	lsls	r2, r2, #5
    2d22:	4313      	orrs	r3, r2
    2d24:	81a3      	strh	r3, [r4, #12]
    2d26:	6560      	str	r0, [r4, #84]	; 0x54
    2d28:	e7f8      	b.n	2d1c <__sseek+0x18>
    2d2a:	46c0      	nop			; (mov r8, r8)
    2d2c:	ffffefff 	.word	0xffffefff

00002d30 <__sclose>:
    2d30:	b510      	push	{r4, lr}
    2d32:	230e      	movs	r3, #14
    2d34:	5ec9      	ldrsh	r1, [r1, r3]
    2d36:	f000 f815 	bl	2d64 <_close_r>
    2d3a:	bd10      	pop	{r4, pc}

00002d3c <_write_r>:
    2d3c:	b570      	push	{r4, r5, r6, lr}
    2d3e:	0005      	movs	r5, r0
    2d40:	0008      	movs	r0, r1
    2d42:	0011      	movs	r1, r2
    2d44:	2200      	movs	r2, #0
    2d46:	4c06      	ldr	r4, [pc, #24]	; (2d60 <_write_r+0x24>)
    2d48:	6022      	str	r2, [r4, #0]
    2d4a:	001a      	movs	r2, r3
    2d4c:	f7fe fd12 	bl	1774 <_write>
    2d50:	1c43      	adds	r3, r0, #1
    2d52:	d103      	bne.n	2d5c <_write_r+0x20>
    2d54:	6823      	ldr	r3, [r4, #0]
    2d56:	2b00      	cmp	r3, #0
    2d58:	d000      	beq.n	2d5c <_write_r+0x20>
    2d5a:	602b      	str	r3, [r5, #0]
    2d5c:	bd70      	pop	{r4, r5, r6, pc}
    2d5e:	46c0      	nop			; (mov r8, r8)
    2d60:	200001fc 	.word	0x200001fc

00002d64 <_close_r>:
    2d64:	2300      	movs	r3, #0
    2d66:	b570      	push	{r4, r5, r6, lr}
    2d68:	4c06      	ldr	r4, [pc, #24]	; (2d84 <_close_r+0x20>)
    2d6a:	0005      	movs	r5, r0
    2d6c:	0008      	movs	r0, r1
    2d6e:	6023      	str	r3, [r4, #0]
    2d70:	f7fe fd3a 	bl	17e8 <_close>
    2d74:	1c43      	adds	r3, r0, #1
    2d76:	d103      	bne.n	2d80 <_close_r+0x1c>
    2d78:	6823      	ldr	r3, [r4, #0]
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	d000      	beq.n	2d80 <_close_r+0x1c>
    2d7e:	602b      	str	r3, [r5, #0]
    2d80:	bd70      	pop	{r4, r5, r6, pc}
    2d82:	46c0      	nop			; (mov r8, r8)
    2d84:	200001fc 	.word	0x200001fc

00002d88 <_fstat_r>:
    2d88:	2300      	movs	r3, #0
    2d8a:	b570      	push	{r4, r5, r6, lr}
    2d8c:	4c06      	ldr	r4, [pc, #24]	; (2da8 <_fstat_r+0x20>)
    2d8e:	0005      	movs	r5, r0
    2d90:	0008      	movs	r0, r1
    2d92:	0011      	movs	r1, r2
    2d94:	6023      	str	r3, [r4, #0]
    2d96:	f7fe fd2a 	bl	17ee <_fstat>
    2d9a:	1c43      	adds	r3, r0, #1
    2d9c:	d103      	bne.n	2da6 <_fstat_r+0x1e>
    2d9e:	6823      	ldr	r3, [r4, #0]
    2da0:	2b00      	cmp	r3, #0
    2da2:	d000      	beq.n	2da6 <_fstat_r+0x1e>
    2da4:	602b      	str	r3, [r5, #0]
    2da6:	bd70      	pop	{r4, r5, r6, pc}
    2da8:	200001fc 	.word	0x200001fc

00002dac <_isatty_r>:
    2dac:	2300      	movs	r3, #0
    2dae:	b570      	push	{r4, r5, r6, lr}
    2db0:	4c06      	ldr	r4, [pc, #24]	; (2dcc <_isatty_r+0x20>)
    2db2:	0005      	movs	r5, r0
    2db4:	0008      	movs	r0, r1
    2db6:	6023      	str	r3, [r4, #0]
    2db8:	f7fe fd1e 	bl	17f8 <_isatty>
    2dbc:	1c43      	adds	r3, r0, #1
    2dbe:	d103      	bne.n	2dc8 <_isatty_r+0x1c>
    2dc0:	6823      	ldr	r3, [r4, #0]
    2dc2:	2b00      	cmp	r3, #0
    2dc4:	d000      	beq.n	2dc8 <_isatty_r+0x1c>
    2dc6:	602b      	str	r3, [r5, #0]
    2dc8:	bd70      	pop	{r4, r5, r6, pc}
    2dca:	46c0      	nop			; (mov r8, r8)
    2dcc:	200001fc 	.word	0x200001fc

00002dd0 <_lseek_r>:
    2dd0:	b570      	push	{r4, r5, r6, lr}
    2dd2:	0005      	movs	r5, r0
    2dd4:	0008      	movs	r0, r1
    2dd6:	0011      	movs	r1, r2
    2dd8:	2200      	movs	r2, #0
    2dda:	4c06      	ldr	r4, [pc, #24]	; (2df4 <_lseek_r+0x24>)
    2ddc:	6022      	str	r2, [r4, #0]
    2dde:	001a      	movs	r2, r3
    2de0:	f7fe fd0c 	bl	17fc <_lseek>
    2de4:	1c43      	adds	r3, r0, #1
    2de6:	d103      	bne.n	2df0 <_lseek_r+0x20>
    2de8:	6823      	ldr	r3, [r4, #0]
    2dea:	2b00      	cmp	r3, #0
    2dec:	d000      	beq.n	2df0 <_lseek_r+0x20>
    2dee:	602b      	str	r3, [r5, #0]
    2df0:	bd70      	pop	{r4, r5, r6, pc}
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	200001fc 	.word	0x200001fc

00002df8 <memchr>:
    2df8:	b2c9      	uxtb	r1, r1
    2dfa:	1882      	adds	r2, r0, r2
    2dfc:	4290      	cmp	r0, r2
    2dfe:	d101      	bne.n	2e04 <memchr+0xc>
    2e00:	2000      	movs	r0, #0
    2e02:	4770      	bx	lr
    2e04:	7803      	ldrb	r3, [r0, #0]
    2e06:	428b      	cmp	r3, r1
    2e08:	d0fb      	beq.n	2e02 <memchr+0xa>
    2e0a:	3001      	adds	r0, #1
    2e0c:	e7f6      	b.n	2dfc <memchr+0x4>

00002e0e <__malloc_lock>:
    2e0e:	4770      	bx	lr

00002e10 <__malloc_unlock>:
    2e10:	4770      	bx	lr
	...

00002e14 <_read_r>:
    2e14:	b570      	push	{r4, r5, r6, lr}
    2e16:	0005      	movs	r5, r0
    2e18:	0008      	movs	r0, r1
    2e1a:	0011      	movs	r1, r2
    2e1c:	2200      	movs	r2, #0
    2e1e:	4c06      	ldr	r4, [pc, #24]	; (2e38 <_read_r+0x24>)
    2e20:	6022      	str	r2, [r4, #0]
    2e22:	001a      	movs	r2, r3
    2e24:	f7fe fc84 	bl	1730 <_read>
    2e28:	1c43      	adds	r3, r0, #1
    2e2a:	d103      	bne.n	2e34 <_read_r+0x20>
    2e2c:	6823      	ldr	r3, [r4, #0]
    2e2e:	2b00      	cmp	r3, #0
    2e30:	d000      	beq.n	2e34 <_read_r+0x20>
    2e32:	602b      	str	r3, [r5, #0]
    2e34:	bd70      	pop	{r4, r5, r6, pc}
    2e36:	46c0      	nop			; (mov r8, r8)
    2e38:	200001fc 	.word	0x200001fc

00002e3c <_tcc_intflag>:
    2e3c:	00000001 00000002 00000004 00000008     ................
    2e4c:	00001000 00002000 00004000 00008000     ..... ...@......
    2e5c:	00010000 00020000 00040000 00080000     ................
    2e6c:	42000400 42000800 42000c00 42001000     ...B...B...B...B
    2e7c:	42001400 42001800 00000fea 00000fe6     ...B...B........
    2e8c:	00000fe6 00001018 00001018 00001002     ................
    2e9c:	00000ff0 00001008 000011dc 000011bc     ................
    2eac:	000011bc 00001212 000011ce 000011ea     ................
    2ebc:	000011c0 000011f8 5f58255f 00000000     ........_%X_....
    2ecc:	0000000a 00205825                       ....%X .

00002ed4 <_global_impure_ptr>:
    2ed4:	2000001c                                ... 

00002ed8 <__sf_fake_stderr>:
	...

00002ef8 <__sf_fake_stdin>:
	...

00002f18 <__sf_fake_stdout>:
	...
    2f38:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    2f48:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    2f58:	31300046 35343332 39383736 64636261     F.0123456789abcd
    2f68:	00006665                                ef..

00002f6c <_init>:
    2f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f6e:	46c0      	nop			; (mov r8, r8)
    2f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f72:	bc08      	pop	{r3}
    2f74:	469e      	mov	lr, r3
    2f76:	4770      	bx	lr

00002f78 <__init_array_start>:
    2f78:	000000e5 	.word	0x000000e5

00002f7c <_fini>:
    2f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f7e:	46c0      	nop			; (mov r8, r8)
    2f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f82:	bc08      	pop	{r3}
    2f84:	469e      	mov	lr, r3
    2f86:	4770      	bx	lr

00002f88 <__fini_array_start>:
    2f88:	000000bd 	.word	0x000000bd
